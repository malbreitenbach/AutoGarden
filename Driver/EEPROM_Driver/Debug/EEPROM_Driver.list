
EEPROM_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000145c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001568  08001568  00011568  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080015a4  080015a4  000115a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080015a8  080015a8  000115a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080015ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a0  2000000c  080015b8  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000ac  080015b8  000200ac  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000de23  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000205a  00000000  00000000  0002de58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002889  00000000  00000000  0002feb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000580  00000000  00000000  00032740  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000688  00000000  00000000  00032cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000364c  00000000  00000000  00033348  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000021aa  00000000  00000000  00036994  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00038b3e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000de0  00000000  00000000  00038bbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001550 	.word	0x08001550

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001550 	.word	0x08001550

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f88a 	bl	800027c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f840 	bl	80001fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <HAL_Init+0x1c>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f819 	bl	80001d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
}
 80001ac:	2000      	movs	r0, #0
 80001ae:	bd08      	pop	{r3, pc}
 80001b0:	40022000 	.word	0x40022000

080001b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b4:	4a03      	ldr	r2, [pc, #12]	; (80001c4 <HAL_IncTick+0x10>)
 80001b6:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <HAL_IncTick+0x14>)
 80001b8:	6811      	ldr	r1, [r2, #0]
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	440b      	add	r3, r1
 80001be:	6013      	str	r3, [r2, #0]
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	20000028 	.word	0x20000028
 80001c8:	20000000 	.word	0x20000000

080001cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001cc:	4b01      	ldr	r3, [pc, #4]	; (80001d4 <HAL_GetTick+0x8>)
 80001ce:	6818      	ldr	r0, [r3, #0]
}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000028 	.word	0x20000028

080001d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4a07      	ldr	r2, [pc, #28]	; (80001f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001da:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001e6:	041b      	lsls	r3, r3, #16
 80001e8:	0c1b      	lsrs	r3, r3, #16
 80001ea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f4:	60d3      	str	r3, [r2, #12]
 80001f6:	4770      	bx	lr
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001fc:	4b17      	ldr	r3, [pc, #92]	; (800025c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80001fe:	b530      	push	{r4, r5, lr}
 8000200:	68dc      	ldr	r4, [r3, #12]
 8000202:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000206:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020c:	2b04      	cmp	r3, #4
 800020e:	bf28      	it	cs
 8000210:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000212:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000214:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000218:	bf98      	it	ls
 800021a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800021c:	fa05 f303 	lsl.w	r3, r5, r3
 8000220:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000224:	bf88      	it	hi
 8000226:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000228:	4019      	ands	r1, r3
 800022a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800022c:	fa05 f404 	lsl.w	r4, r5, r4
 8000230:	3c01      	subs	r4, #1
 8000232:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000234:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000236:	ea42 0201 	orr.w	r2, r2, r1
 800023a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023e:	bfaf      	iteee	ge
 8000240:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000244:	4b06      	ldrlt	r3, [pc, #24]	; (8000260 <HAL_NVIC_SetPriority+0x64>)
 8000246:	f000 000f 	andlt.w	r0, r0, #15
 800024a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024c:	bfa5      	ittet	ge
 800024e:	b2d2      	uxtbge	r2, r2
 8000250:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000254:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000256:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800025a:	bd30      	pop	{r4, r5, pc}
 800025c:	e000ed00 	.word	0xe000ed00
 8000260:	e000ed14 	.word	0xe000ed14

08000264 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000264:	2301      	movs	r3, #1
 8000266:	0942      	lsrs	r2, r0, #5
 8000268:	f000 001f 	and.w	r0, r0, #31
 800026c:	fa03 f000 	lsl.w	r0, r3, r0
 8000270:	4b01      	ldr	r3, [pc, #4]	; (8000278 <HAL_NVIC_EnableIRQ+0x14>)
 8000272:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000276:	4770      	bx	lr
 8000278:	e000e100 	.word	0xe000e100

0800027c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800027c:	3801      	subs	r0, #1
 800027e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000282:	d20a      	bcs.n	800029a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	4a06      	ldr	r2, [pc, #24]	; (80002a4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000290:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000292:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000294:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800029a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	e000e010 	.word	0xe000e010
 80002a4:	e000ed00 	.word	0xe000ed00

080002a8 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002a8:	2201      	movs	r2, #1
 80002aa:	0943      	lsrs	r3, r0, #5
 80002ac:	f000 001f 	and.w	r0, r0, #31
 80002b0:	fa02 f000 	lsl.w	r0, r2, r0
 80002b4:	4a02      	ldr	r2, [pc, #8]	; (80002c0 <HAL_NVIC_ClearPendingIRQ+0x18>)
 80002b6:	3360      	adds	r3, #96	; 0x60
 80002b8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e100 	.word	0xe000e100

080002c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002c6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	bf0c      	ite	eq
 80002cc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002d0:	f022 0204 	bicne.w	r2, r2, #4
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	4770      	bx	lr
 80002d8:	e000e010 	.word	0xe000e010

080002dc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002dc:	4770      	bx	lr

080002de <HAL_SYSTICK_IRQHandler>:
{
 80002de:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002e0:	f7ff fffc 	bl	80002dc <HAL_SYSTICK_Callback>
 80002e4:	bd08      	pop	{r3, pc}
	...

080002e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002ec:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002ee:	4616      	mov	r6, r2
 80002f0:	4b65      	ldr	r3, [pc, #404]	; (8000488 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002f2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000498 <HAL_GPIO_Init+0x1b0>
 80002f6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800049c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002fa:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002fe:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000300:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000304:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000308:	45a0      	cmp	r8, r4
 800030a:	d17f      	bne.n	800040c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800030c:	684d      	ldr	r5, [r1, #4]
 800030e:	2d12      	cmp	r5, #18
 8000310:	f000 80af 	beq.w	8000472 <HAL_GPIO_Init+0x18a>
 8000314:	f200 8088 	bhi.w	8000428 <HAL_GPIO_Init+0x140>
 8000318:	2d02      	cmp	r5, #2
 800031a:	f000 80a7 	beq.w	800046c <HAL_GPIO_Init+0x184>
 800031e:	d87c      	bhi.n	800041a <HAL_GPIO_Init+0x132>
 8000320:	2d00      	cmp	r5, #0
 8000322:	f000 808e 	beq.w	8000442 <HAL_GPIO_Init+0x15a>
 8000326:	2d01      	cmp	r5, #1
 8000328:	f000 809e 	beq.w	8000468 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800032c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000330:	2cff      	cmp	r4, #255	; 0xff
 8000332:	bf93      	iteet	ls
 8000334:	4682      	movls	sl, r0
 8000336:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800033a:	3d08      	subhi	r5, #8
 800033c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000340:	bf92      	itee	ls
 8000342:	00b5      	lslls	r5, r6, #2
 8000344:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000348:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800034a:	fa09 f805 	lsl.w	r8, r9, r5
 800034e:	ea2b 0808 	bic.w	r8, fp, r8
 8000352:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000356:	bf88      	it	hi
 8000358:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800035c:	ea48 0505 	orr.w	r5, r8, r5
 8000360:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000364:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000368:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800036c:	d04e      	beq.n	800040c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800036e:	4d47      	ldr	r5, [pc, #284]	; (800048c <HAL_GPIO_Init+0x1a4>)
 8000370:	4f46      	ldr	r7, [pc, #280]	; (800048c <HAL_GPIO_Init+0x1a4>)
 8000372:	69ad      	ldr	r5, [r5, #24]
 8000374:	f026 0803 	bic.w	r8, r6, #3
 8000378:	f045 0501 	orr.w	r5, r5, #1
 800037c:	61bd      	str	r5, [r7, #24]
 800037e:	69bd      	ldr	r5, [r7, #24]
 8000380:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000384:	f005 0501 	and.w	r5, r5, #1
 8000388:	9501      	str	r5, [sp, #4]
 800038a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800038e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000392:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000394:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000398:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800039c:	fa09 f90b 	lsl.w	r9, r9, fp
 80003a0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003a4:	4d3a      	ldr	r5, [pc, #232]	; (8000490 <HAL_GPIO_Init+0x1a8>)
 80003a6:	42a8      	cmp	r0, r5
 80003a8:	d068      	beq.n	800047c <HAL_GPIO_Init+0x194>
 80003aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ae:	42a8      	cmp	r0, r5
 80003b0:	d066      	beq.n	8000480 <HAL_GPIO_Init+0x198>
 80003b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b6:	42a8      	cmp	r0, r5
 80003b8:	d064      	beq.n	8000484 <HAL_GPIO_Init+0x19c>
 80003ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003be:	42a8      	cmp	r0, r5
 80003c0:	bf0c      	ite	eq
 80003c2:	2503      	moveq	r5, #3
 80003c4:	2504      	movne	r5, #4
 80003c6:	fa05 f50b 	lsl.w	r5, r5, fp
 80003ca:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003ce:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003d2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003d4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003d8:	bf14      	ite	ne
 80003da:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003dc:	43a5      	biceq	r5, r4
 80003de:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003e0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003e2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003e6:	bf14      	ite	ne
 80003e8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ea:	43a5      	biceq	r5, r4
 80003ec:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003ee:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003f0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003f4:	bf14      	ite	ne
 80003f6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003f8:	43a5      	biceq	r5, r4
 80003fa:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003fc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003fe:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000402:	bf14      	ite	ne
 8000404:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000406:	ea25 0404 	biceq.w	r4, r5, r4
 800040a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800040c:	3601      	adds	r6, #1
 800040e:	2e10      	cmp	r6, #16
 8000410:	f47f af73 	bne.w	80002fa <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000414:	b003      	add	sp, #12
 8000416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800041a:	2d03      	cmp	r5, #3
 800041c:	d022      	beq.n	8000464 <HAL_GPIO_Init+0x17c>
 800041e:	2d11      	cmp	r5, #17
 8000420:	d184      	bne.n	800032c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000422:	68ca      	ldr	r2, [r1, #12]
 8000424:	3204      	adds	r2, #4
          break;
 8000426:	e781      	b.n	800032c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000428:	4f1a      	ldr	r7, [pc, #104]	; (8000494 <HAL_GPIO_Init+0x1ac>)
 800042a:	42bd      	cmp	r5, r7
 800042c:	d009      	beq.n	8000442 <HAL_GPIO_Init+0x15a>
 800042e:	d812      	bhi.n	8000456 <HAL_GPIO_Init+0x16e>
 8000430:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80004a0 <HAL_GPIO_Init+0x1b8>
 8000434:	454d      	cmp	r5, r9
 8000436:	d004      	beq.n	8000442 <HAL_GPIO_Init+0x15a>
 8000438:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800043c:	454d      	cmp	r5, r9
 800043e:	f47f af75 	bne.w	800032c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000442:	688a      	ldr	r2, [r1, #8]
 8000444:	b1c2      	cbz	r2, 8000478 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000446:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000448:	bf0c      	ite	eq
 800044a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800044e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000452:	2208      	movs	r2, #8
 8000454:	e76a      	b.n	800032c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000456:	4575      	cmp	r5, lr
 8000458:	d0f3      	beq.n	8000442 <HAL_GPIO_Init+0x15a>
 800045a:	4565      	cmp	r5, ip
 800045c:	d0f1      	beq.n	8000442 <HAL_GPIO_Init+0x15a>
 800045e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004a4 <HAL_GPIO_Init+0x1bc>
 8000462:	e7eb      	b.n	800043c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000464:	2200      	movs	r2, #0
 8000466:	e761      	b.n	800032c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000468:	68ca      	ldr	r2, [r1, #12]
          break;
 800046a:	e75f      	b.n	800032c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800046c:	68ca      	ldr	r2, [r1, #12]
 800046e:	3208      	adds	r2, #8
          break;
 8000470:	e75c      	b.n	800032c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000472:	68ca      	ldr	r2, [r1, #12]
 8000474:	320c      	adds	r2, #12
          break;
 8000476:	e759      	b.n	800032c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000478:	2204      	movs	r2, #4
 800047a:	e757      	b.n	800032c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800047c:	2500      	movs	r5, #0
 800047e:	e7a2      	b.n	80003c6 <HAL_GPIO_Init+0xde>
 8000480:	2501      	movs	r5, #1
 8000482:	e7a0      	b.n	80003c6 <HAL_GPIO_Init+0xde>
 8000484:	2502      	movs	r5, #2
 8000486:	e79e      	b.n	80003c6 <HAL_GPIO_Init+0xde>
 8000488:	40010400 	.word	0x40010400
 800048c:	40021000 	.word	0x40021000
 8000490:	40010800 	.word	0x40010800
 8000494:	10210000 	.word	0x10210000
 8000498:	10310000 	.word	0x10310000
 800049c:	10320000 	.word	0x10320000
 80004a0:	10110000 	.word	0x10110000
 80004a4:	10220000 	.word	0x10220000

080004a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004a8:	b10a      	cbz	r2, 80004ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004aa:	6101      	str	r1, [r0, #16]
 80004ac:	4770      	bx	lr
 80004ae:	0409      	lsls	r1, r1, #16
 80004b0:	e7fb      	b.n	80004aa <HAL_GPIO_WritePin+0x2>
	...

080004b4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004b4:	6803      	ldr	r3, [r0, #0]
{
 80004b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ba:	07db      	lsls	r3, r3, #31
{
 80004bc:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004be:	d410      	bmi.n	80004e2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004c0:	682b      	ldr	r3, [r5, #0]
 80004c2:	079f      	lsls	r7, r3, #30
 80004c4:	d45e      	bmi.n	8000584 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004c6:	682b      	ldr	r3, [r5, #0]
 80004c8:	0719      	lsls	r1, r3, #28
 80004ca:	f100 8095 	bmi.w	80005f8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004ce:	682b      	ldr	r3, [r5, #0]
 80004d0:	075a      	lsls	r2, r3, #29
 80004d2:	f100 80bf 	bmi.w	8000654 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004d6:	69ea      	ldr	r2, [r5, #28]
 80004d8:	2a00      	cmp	r2, #0
 80004da:	f040 812d 	bne.w	8000738 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004de:	2000      	movs	r0, #0
 80004e0:	e014      	b.n	800050c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004e2:	4c90      	ldr	r4, [pc, #576]	; (8000724 <HAL_RCC_OscConfig+0x270>)
 80004e4:	6863      	ldr	r3, [r4, #4]
 80004e6:	f003 030c 	and.w	r3, r3, #12
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	d007      	beq.n	80004fe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004ee:	6863      	ldr	r3, [r4, #4]
 80004f0:	f003 030c 	and.w	r3, r3, #12
 80004f4:	2b08      	cmp	r3, #8
 80004f6:	d10c      	bne.n	8000512 <HAL_RCC_OscConfig+0x5e>
 80004f8:	6863      	ldr	r3, [r4, #4]
 80004fa:	03de      	lsls	r6, r3, #15
 80004fc:	d509      	bpl.n	8000512 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004fe:	6823      	ldr	r3, [r4, #0]
 8000500:	039c      	lsls	r4, r3, #14
 8000502:	d5dd      	bpl.n	80004c0 <HAL_RCC_OscConfig+0xc>
 8000504:	686b      	ldr	r3, [r5, #4]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1da      	bne.n	80004c0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800050a:	2001      	movs	r0, #1
}
 800050c:	b002      	add	sp, #8
 800050e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000512:	686b      	ldr	r3, [r5, #4]
 8000514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000518:	d110      	bne.n	800053c <HAL_RCC_OscConfig+0x88>
 800051a:	6823      	ldr	r3, [r4, #0]
 800051c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000520:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000522:	f7ff fe53 	bl	80001cc <HAL_GetTick>
 8000526:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000528:	6823      	ldr	r3, [r4, #0]
 800052a:	0398      	lsls	r0, r3, #14
 800052c:	d4c8      	bmi.n	80004c0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800052e:	f7ff fe4d 	bl	80001cc <HAL_GetTick>
 8000532:	1b80      	subs	r0, r0, r6
 8000534:	2864      	cmp	r0, #100	; 0x64
 8000536:	d9f7      	bls.n	8000528 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000538:	2003      	movs	r0, #3
 800053a:	e7e7      	b.n	800050c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800053c:	b99b      	cbnz	r3, 8000566 <HAL_RCC_OscConfig+0xb2>
 800053e:	6823      	ldr	r3, [r4, #0]
 8000540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000544:	6023      	str	r3, [r4, #0]
 8000546:	6823      	ldr	r3, [r4, #0]
 8000548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800054c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800054e:	f7ff fe3d 	bl	80001cc <HAL_GetTick>
 8000552:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000554:	6823      	ldr	r3, [r4, #0]
 8000556:	0399      	lsls	r1, r3, #14
 8000558:	d5b2      	bpl.n	80004c0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800055a:	f7ff fe37 	bl	80001cc <HAL_GetTick>
 800055e:	1b80      	subs	r0, r0, r6
 8000560:	2864      	cmp	r0, #100	; 0x64
 8000562:	d9f7      	bls.n	8000554 <HAL_RCC_OscConfig+0xa0>
 8000564:	e7e8      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000566:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800056a:	6823      	ldr	r3, [r4, #0]
 800056c:	d103      	bne.n	8000576 <HAL_RCC_OscConfig+0xc2>
 800056e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000572:	6023      	str	r3, [r4, #0]
 8000574:	e7d1      	b.n	800051a <HAL_RCC_OscConfig+0x66>
 8000576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800057a:	6023      	str	r3, [r4, #0]
 800057c:	6823      	ldr	r3, [r4, #0]
 800057e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000582:	e7cd      	b.n	8000520 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000584:	4c67      	ldr	r4, [pc, #412]	; (8000724 <HAL_RCC_OscConfig+0x270>)
 8000586:	6863      	ldr	r3, [r4, #4]
 8000588:	f013 0f0c 	tst.w	r3, #12
 800058c:	d007      	beq.n	800059e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800058e:	6863      	ldr	r3, [r4, #4]
 8000590:	f003 030c 	and.w	r3, r3, #12
 8000594:	2b08      	cmp	r3, #8
 8000596:	d110      	bne.n	80005ba <HAL_RCC_OscConfig+0x106>
 8000598:	6863      	ldr	r3, [r4, #4]
 800059a:	03da      	lsls	r2, r3, #15
 800059c:	d40d      	bmi.n	80005ba <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	079b      	lsls	r3, r3, #30
 80005a2:	d502      	bpl.n	80005aa <HAL_RCC_OscConfig+0xf6>
 80005a4:	692b      	ldr	r3, [r5, #16]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d1af      	bne.n	800050a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	696a      	ldr	r2, [r5, #20]
 80005ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005b2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005b6:	6023      	str	r3, [r4, #0]
 80005b8:	e785      	b.n	80004c6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005ba:	692a      	ldr	r2, [r5, #16]
 80005bc:	4b5a      	ldr	r3, [pc, #360]	; (8000728 <HAL_RCC_OscConfig+0x274>)
 80005be:	b16a      	cbz	r2, 80005dc <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80005c0:	2201      	movs	r2, #1
 80005c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005c4:	f7ff fe02 	bl	80001cc <HAL_GetTick>
 80005c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005ca:	6823      	ldr	r3, [r4, #0]
 80005cc:	079f      	lsls	r7, r3, #30
 80005ce:	d4ec      	bmi.n	80005aa <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005d0:	f7ff fdfc 	bl	80001cc <HAL_GetTick>
 80005d4:	1b80      	subs	r0, r0, r6
 80005d6:	2802      	cmp	r0, #2
 80005d8:	d9f7      	bls.n	80005ca <HAL_RCC_OscConfig+0x116>
 80005da:	e7ad      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005de:	f7ff fdf5 	bl	80001cc <HAL_GetTick>
 80005e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005e4:	6823      	ldr	r3, [r4, #0]
 80005e6:	0798      	lsls	r0, r3, #30
 80005e8:	f57f af6d 	bpl.w	80004c6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005ec:	f7ff fdee 	bl	80001cc <HAL_GetTick>
 80005f0:	1b80      	subs	r0, r0, r6
 80005f2:	2802      	cmp	r0, #2
 80005f4:	d9f6      	bls.n	80005e4 <HAL_RCC_OscConfig+0x130>
 80005f6:	e79f      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005f8:	69aa      	ldr	r2, [r5, #24]
 80005fa:	4c4a      	ldr	r4, [pc, #296]	; (8000724 <HAL_RCC_OscConfig+0x270>)
 80005fc:	4b4b      	ldr	r3, [pc, #300]	; (800072c <HAL_RCC_OscConfig+0x278>)
 80005fe:	b1da      	cbz	r2, 8000638 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000600:	2201      	movs	r2, #1
 8000602:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000604:	f7ff fde2 	bl	80001cc <HAL_GetTick>
 8000608:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800060a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800060c:	079b      	lsls	r3, r3, #30
 800060e:	d50d      	bpl.n	800062c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000610:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000614:	4b46      	ldr	r3, [pc, #280]	; (8000730 <HAL_RCC_OscConfig+0x27c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	fbb3 f3f2 	udiv	r3, r3, r2
 800061c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800061e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000620:	9b01      	ldr	r3, [sp, #4]
 8000622:	1e5a      	subs	r2, r3, #1
 8000624:	9201      	str	r2, [sp, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1f9      	bne.n	800061e <HAL_RCC_OscConfig+0x16a>
 800062a:	e750      	b.n	80004ce <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800062c:	f7ff fdce 	bl	80001cc <HAL_GetTick>
 8000630:	1b80      	subs	r0, r0, r6
 8000632:	2802      	cmp	r0, #2
 8000634:	d9e9      	bls.n	800060a <HAL_RCC_OscConfig+0x156>
 8000636:	e77f      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000638:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800063a:	f7ff fdc7 	bl	80001cc <HAL_GetTick>
 800063e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000642:	079f      	lsls	r7, r3, #30
 8000644:	f57f af43 	bpl.w	80004ce <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000648:	f7ff fdc0 	bl	80001cc <HAL_GetTick>
 800064c:	1b80      	subs	r0, r0, r6
 800064e:	2802      	cmp	r0, #2
 8000650:	d9f6      	bls.n	8000640 <HAL_RCC_OscConfig+0x18c>
 8000652:	e771      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000654:	4c33      	ldr	r4, [pc, #204]	; (8000724 <HAL_RCC_OscConfig+0x270>)
 8000656:	69e3      	ldr	r3, [r4, #28]
 8000658:	00d8      	lsls	r0, r3, #3
 800065a:	d424      	bmi.n	80006a6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800065c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	69e3      	ldr	r3, [r4, #28]
 8000660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000664:	61e3      	str	r3, [r4, #28]
 8000666:	69e3      	ldr	r3, [r4, #28]
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000670:	4e30      	ldr	r6, [pc, #192]	; (8000734 <HAL_RCC_OscConfig+0x280>)
 8000672:	6833      	ldr	r3, [r6, #0]
 8000674:	05d9      	lsls	r1, r3, #23
 8000676:	d518      	bpl.n	80006aa <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000678:	68eb      	ldr	r3, [r5, #12]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d126      	bne.n	80006cc <HAL_RCC_OscConfig+0x218>
 800067e:	6a23      	ldr	r3, [r4, #32]
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000686:	f7ff fda1 	bl	80001cc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800068a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800068e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000690:	6a23      	ldr	r3, [r4, #32]
 8000692:	079b      	lsls	r3, r3, #30
 8000694:	d53f      	bpl.n	8000716 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000696:	2f00      	cmp	r7, #0
 8000698:	f43f af1d 	beq.w	80004d6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800069c:	69e3      	ldr	r3, [r4, #28]
 800069e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80006a2:	61e3      	str	r3, [r4, #28]
 80006a4:	e717      	b.n	80004d6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80006a6:	2700      	movs	r7, #0
 80006a8:	e7e2      	b.n	8000670 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006aa:	6833      	ldr	r3, [r6, #0]
 80006ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006b2:	f7ff fd8b 	bl	80001cc <HAL_GetTick>
 80006b6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006b8:	6833      	ldr	r3, [r6, #0]
 80006ba:	05da      	lsls	r2, r3, #23
 80006bc:	d4dc      	bmi.n	8000678 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006be:	f7ff fd85 	bl	80001cc <HAL_GetTick>
 80006c2:	eba0 0008 	sub.w	r0, r0, r8
 80006c6:	2864      	cmp	r0, #100	; 0x64
 80006c8:	d9f6      	bls.n	80006b8 <HAL_RCC_OscConfig+0x204>
 80006ca:	e735      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006cc:	b9ab      	cbnz	r3, 80006fa <HAL_RCC_OscConfig+0x246>
 80006ce:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006d0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006d4:	f023 0301 	bic.w	r3, r3, #1
 80006d8:	6223      	str	r3, [r4, #32]
 80006da:	6a23      	ldr	r3, [r4, #32]
 80006dc:	f023 0304 	bic.w	r3, r3, #4
 80006e0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006e2:	f7ff fd73 	bl	80001cc <HAL_GetTick>
 80006e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006e8:	6a23      	ldr	r3, [r4, #32]
 80006ea:	0798      	lsls	r0, r3, #30
 80006ec:	d5d3      	bpl.n	8000696 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006ee:	f7ff fd6d 	bl	80001cc <HAL_GetTick>
 80006f2:	1b80      	subs	r0, r0, r6
 80006f4:	4540      	cmp	r0, r8
 80006f6:	d9f7      	bls.n	80006e8 <HAL_RCC_OscConfig+0x234>
 80006f8:	e71e      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006fa:	2b05      	cmp	r3, #5
 80006fc:	6a23      	ldr	r3, [r4, #32]
 80006fe:	d103      	bne.n	8000708 <HAL_RCC_OscConfig+0x254>
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6223      	str	r3, [r4, #32]
 8000706:	e7ba      	b.n	800067e <HAL_RCC_OscConfig+0x1ca>
 8000708:	f023 0301 	bic.w	r3, r3, #1
 800070c:	6223      	str	r3, [r4, #32]
 800070e:	6a23      	ldr	r3, [r4, #32]
 8000710:	f023 0304 	bic.w	r3, r3, #4
 8000714:	e7b6      	b.n	8000684 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000716:	f7ff fd59 	bl	80001cc <HAL_GetTick>
 800071a:	eba0 0008 	sub.w	r0, r0, r8
 800071e:	42b0      	cmp	r0, r6
 8000720:	d9b6      	bls.n	8000690 <HAL_RCC_OscConfig+0x1dc>
 8000722:	e709      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
 8000724:	40021000 	.word	0x40021000
 8000728:	42420000 	.word	0x42420000
 800072c:	42420480 	.word	0x42420480
 8000730:	20000008 	.word	0x20000008
 8000734:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000738:	4c22      	ldr	r4, [pc, #136]	; (80007c4 <HAL_RCC_OscConfig+0x310>)
 800073a:	6863      	ldr	r3, [r4, #4]
 800073c:	f003 030c 	and.w	r3, r3, #12
 8000740:	2b08      	cmp	r3, #8
 8000742:	f43f aee2 	beq.w	800050a <HAL_RCC_OscConfig+0x56>
 8000746:	2300      	movs	r3, #0
 8000748:	4e1f      	ldr	r6, [pc, #124]	; (80007c8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800074a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800074c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800074e:	d12b      	bne.n	80007a8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000750:	f7ff fd3c 	bl	80001cc <HAL_GetTick>
 8000754:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000756:	6823      	ldr	r3, [r4, #0]
 8000758:	0199      	lsls	r1, r3, #6
 800075a:	d41f      	bmi.n	800079c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800075c:	6a2b      	ldr	r3, [r5, #32]
 800075e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000762:	d105      	bne.n	8000770 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000764:	6862      	ldr	r2, [r4, #4]
 8000766:	68a9      	ldr	r1, [r5, #8]
 8000768:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800076c:	430a      	orrs	r2, r1
 800076e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000770:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000772:	6862      	ldr	r2, [r4, #4]
 8000774:	430b      	orrs	r3, r1
 8000776:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800077a:	4313      	orrs	r3, r2
 800077c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800077e:	2301      	movs	r3, #1
 8000780:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000782:	f7ff fd23 	bl	80001cc <HAL_GetTick>
 8000786:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000788:	6823      	ldr	r3, [r4, #0]
 800078a:	019a      	lsls	r2, r3, #6
 800078c:	f53f aea7 	bmi.w	80004de <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000790:	f7ff fd1c 	bl	80001cc <HAL_GetTick>
 8000794:	1b40      	subs	r0, r0, r5
 8000796:	2802      	cmp	r0, #2
 8000798:	d9f6      	bls.n	8000788 <HAL_RCC_OscConfig+0x2d4>
 800079a:	e6cd      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800079c:	f7ff fd16 	bl	80001cc <HAL_GetTick>
 80007a0:	1bc0      	subs	r0, r0, r7
 80007a2:	2802      	cmp	r0, #2
 80007a4:	d9d7      	bls.n	8000756 <HAL_RCC_OscConfig+0x2a2>
 80007a6:	e6c7      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80007a8:	f7ff fd10 	bl	80001cc <HAL_GetTick>
 80007ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007ae:	6823      	ldr	r3, [r4, #0]
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	f57f ae94 	bpl.w	80004de <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007b6:	f7ff fd09 	bl	80001cc <HAL_GetTick>
 80007ba:	1b40      	subs	r0, r0, r5
 80007bc:	2802      	cmp	r0, #2
 80007be:	d9f6      	bls.n	80007ae <HAL_RCC_OscConfig+0x2fa>
 80007c0:	e6ba      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	42420060 	.word	0x42420060

080007cc <HAL_RCC_GetSysClockFreq>:
{
 80007cc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007ce:	4b19      	ldr	r3, [pc, #100]	; (8000834 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007d0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007d2:	ac02      	add	r4, sp, #8
 80007d4:	f103 0510 	add.w	r5, r3, #16
 80007d8:	4622      	mov	r2, r4
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	6859      	ldr	r1, [r3, #4]
 80007de:	3308      	adds	r3, #8
 80007e0:	c203      	stmia	r2!, {r0, r1}
 80007e2:	42ab      	cmp	r3, r5
 80007e4:	4614      	mov	r4, r2
 80007e6:	d1f7      	bne.n	80007d8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007e8:	2301      	movs	r3, #1
 80007ea:	f88d 3004 	strb.w	r3, [sp, #4]
 80007ee:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007f0:	4911      	ldr	r1, [pc, #68]	; (8000838 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007f2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007f6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007f8:	f003 020c 	and.w	r2, r3, #12
 80007fc:	2a08      	cmp	r2, #8
 80007fe:	d117      	bne.n	8000830 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000800:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000804:	a806      	add	r0, sp, #24
 8000806:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000808:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800080a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800080e:	d50c      	bpl.n	800082a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000810:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000814:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000818:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800081a:	aa06      	add	r2, sp, #24
 800081c:	4413      	add	r3, r2
 800081e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000822:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000826:	b007      	add	sp, #28
 8000828:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <HAL_RCC_GetSysClockFreq+0x74>)
 800082c:	4350      	muls	r0, r2
 800082e:	e7fa      	b.n	8000826 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000832:	e7f8      	b.n	8000826 <HAL_RCC_GetSysClockFreq+0x5a>
 8000834:	08001568 	.word	0x08001568
 8000838:	40021000 	.word	0x40021000
 800083c:	007a1200 	.word	0x007a1200
 8000840:	003d0900 	.word	0x003d0900

08000844 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000844:	4a4d      	ldr	r2, [pc, #308]	; (800097c <HAL_RCC_ClockConfig+0x138>)
{
 8000846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800084a:	6813      	ldr	r3, [r2, #0]
{
 800084c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	428b      	cmp	r3, r1
{
 8000854:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000856:	d328      	bcc.n	80008aa <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000858:	682a      	ldr	r2, [r5, #0]
 800085a:	0791      	lsls	r1, r2, #30
 800085c:	d432      	bmi.n	80008c4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800085e:	07d2      	lsls	r2, r2, #31
 8000860:	d438      	bmi.n	80008d4 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000862:	4a46      	ldr	r2, [pc, #280]	; (800097c <HAL_RCC_ClockConfig+0x138>)
 8000864:	6813      	ldr	r3, [r2, #0]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	429e      	cmp	r6, r3
 800086c:	d373      	bcc.n	8000956 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800086e:	682a      	ldr	r2, [r5, #0]
 8000870:	4c43      	ldr	r4, [pc, #268]	; (8000980 <HAL_RCC_ClockConfig+0x13c>)
 8000872:	f012 0f04 	tst.w	r2, #4
 8000876:	d179      	bne.n	800096c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000878:	0713      	lsls	r3, r2, #28
 800087a:	d506      	bpl.n	800088a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800087c:	6863      	ldr	r3, [r4, #4]
 800087e:	692a      	ldr	r2, [r5, #16]
 8000880:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000884:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000888:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800088a:	f7ff ff9f 	bl	80007cc <HAL_RCC_GetSysClockFreq>
 800088e:	6863      	ldr	r3, [r4, #4]
 8000890:	4a3c      	ldr	r2, [pc, #240]	; (8000984 <HAL_RCC_ClockConfig+0x140>)
 8000892:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000896:	5cd3      	ldrb	r3, [r2, r3]
 8000898:	40d8      	lsrs	r0, r3
 800089a:	4b3b      	ldr	r3, [pc, #236]	; (8000988 <HAL_RCC_ClockConfig+0x144>)
 800089c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fc54 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80008a4:	2000      	movs	r0, #0
}
 80008a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008aa:	6813      	ldr	r3, [r2, #0]
 80008ac:	f023 0307 	bic.w	r3, r3, #7
 80008b0:	430b      	orrs	r3, r1
 80008b2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008b4:	6813      	ldr	r3, [r2, #0]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	4299      	cmp	r1, r3
 80008bc:	d0cc      	beq.n	8000858 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008be:	2001      	movs	r0, #1
 80008c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008c4:	492e      	ldr	r1, [pc, #184]	; (8000980 <HAL_RCC_ClockConfig+0x13c>)
 80008c6:	68a8      	ldr	r0, [r5, #8]
 80008c8:	684b      	ldr	r3, [r1, #4]
 80008ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008ce:	4303      	orrs	r3, r0
 80008d0:	604b      	str	r3, [r1, #4]
 80008d2:	e7c4      	b.n	800085e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008d4:	686a      	ldr	r2, [r5, #4]
 80008d6:	4c2a      	ldr	r4, [pc, #168]	; (8000980 <HAL_RCC_ClockConfig+0x13c>)
 80008d8:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008da:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008dc:	d11c      	bne.n	8000918 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008e2:	d0ec      	beq.n	80008be <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008e4:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008e6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008ea:	f023 0303 	bic.w	r3, r3, #3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008f2:	f7ff fc6b 	bl	80001cc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008f6:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008f8:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d114      	bne.n	8000928 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008fe:	6863      	ldr	r3, [r4, #4]
 8000900:	f003 030c 	and.w	r3, r3, #12
 8000904:	2b04      	cmp	r3, #4
 8000906:	d0ac      	beq.n	8000862 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000908:	f7ff fc60 	bl	80001cc <HAL_GetTick>
 800090c:	1bc0      	subs	r0, r0, r7
 800090e:	4540      	cmp	r0, r8
 8000910:	d9f5      	bls.n	80008fe <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000912:	2003      	movs	r0, #3
 8000914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000918:	2a02      	cmp	r2, #2
 800091a:	d102      	bne.n	8000922 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800091c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000920:	e7df      	b.n	80008e2 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000922:	f013 0f02 	tst.w	r3, #2
 8000926:	e7dc      	b.n	80008e2 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000928:	2b02      	cmp	r3, #2
 800092a:	d10f      	bne.n	800094c <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800092c:	6863      	ldr	r3, [r4, #4]
 800092e:	f003 030c 	and.w	r3, r3, #12
 8000932:	2b08      	cmp	r3, #8
 8000934:	d095      	beq.n	8000862 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000936:	f7ff fc49 	bl	80001cc <HAL_GetTick>
 800093a:	1bc0      	subs	r0, r0, r7
 800093c:	4540      	cmp	r0, r8
 800093e:	d9f5      	bls.n	800092c <HAL_RCC_ClockConfig+0xe8>
 8000940:	e7e7      	b.n	8000912 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000942:	f7ff fc43 	bl	80001cc <HAL_GetTick>
 8000946:	1bc0      	subs	r0, r0, r7
 8000948:	4540      	cmp	r0, r8
 800094a:	d8e2      	bhi.n	8000912 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800094c:	6863      	ldr	r3, [r4, #4]
 800094e:	f013 0f0c 	tst.w	r3, #12
 8000952:	d1f6      	bne.n	8000942 <HAL_RCC_ClockConfig+0xfe>
 8000954:	e785      	b.n	8000862 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000956:	6813      	ldr	r3, [r2, #0]
 8000958:	f023 0307 	bic.w	r3, r3, #7
 800095c:	4333      	orrs	r3, r6
 800095e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000960:	6813      	ldr	r3, [r2, #0]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	429e      	cmp	r6, r3
 8000968:	d1a9      	bne.n	80008be <HAL_RCC_ClockConfig+0x7a>
 800096a:	e780      	b.n	800086e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800096c:	6863      	ldr	r3, [r4, #4]
 800096e:	68e9      	ldr	r1, [r5, #12]
 8000970:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000974:	430b      	orrs	r3, r1
 8000976:	6063      	str	r3, [r4, #4]
 8000978:	e77e      	b.n	8000878 <HAL_RCC_ClockConfig+0x34>
 800097a:	bf00      	nop
 800097c:	40022000 	.word	0x40022000
 8000980:	40021000 	.word	0x40021000
 8000984:	08001592 	.word	0x08001592
 8000988:	20000008 	.word	0x20000008

0800098c <HAL_RCC_GetHCLKFreq>:
}
 800098c:	4b01      	ldr	r3, [pc, #4]	; (8000994 <HAL_RCC_GetHCLKFreq+0x8>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008

08000998 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800099c:	4604      	mov	r4, r0
 800099e:	4688      	mov	r8, r1
 80009a0:	4617      	mov	r7, r2
 80009a2:	461d      	mov	r5, r3
 80009a4:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80009a6:	6822      	ldr	r2, [r4, #0]
 80009a8:	6893      	ldr	r3, [r2, #8]
 80009aa:	ea38 0303 	bics.w	r3, r8, r3
 80009ae:	bf0c      	ite	eq
 80009b0:	2301      	moveq	r3, #1
 80009b2:	2300      	movne	r3, #0
 80009b4:	429f      	cmp	r7, r3
 80009b6:	d102      	bne.n	80009be <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80009b8:	2000      	movs	r0, #0
}
 80009ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80009be:	1c6b      	adds	r3, r5, #1
 80009c0:	d0f2      	beq.n	80009a8 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80009c2:	bb55      	cbnz	r5, 8000a1a <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80009c4:	6823      	ldr	r3, [r4, #0]
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80009cc:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80009ce:	6862      	ldr	r2, [r4, #4]
 80009d0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80009d4:	d10a      	bne.n	80009ec <SPI_WaitFlagStateUntilTimeout+0x54>
 80009d6:	68a2      	ldr	r2, [r4, #8]
 80009d8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80009dc:	d002      	beq.n	80009e4 <SPI_WaitFlagStateUntilTimeout+0x4c>
 80009de:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80009e2:	d103      	bne.n	80009ec <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80009ea:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80009ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009ee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80009f2:	d109      	bne.n	8000a08 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80009fa:	0412      	lsls	r2, r2, #16
 80009fc:	0c12      	lsrs	r2, r2, #16
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a06:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000a0e:	2300      	movs	r3, #0
 8000a10:	2003      	movs	r0, #3
 8000a12:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000a1a:	f7ff fbd7 	bl	80001cc <HAL_GetTick>
 8000a1e:	1b80      	subs	r0, r0, r6
 8000a20:	4285      	cmp	r5, r0
 8000a22:	d8c0      	bhi.n	80009a6 <SPI_WaitFlagStateUntilTimeout+0xe>
 8000a24:	e7ce      	b.n	80009c4 <SPI_WaitFlagStateUntilTimeout+0x2c>

08000a26 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000a26:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000a28:	460b      	mov	r3, r1
 8000a2a:	9200      	str	r2, [sp, #0]
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	2200      	movs	r2, #0
{
 8000a30:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000a32:	f7ff ffb1 	bl	8000998 <SPI_WaitFlagStateUntilTimeout>
 8000a36:	b120      	cbz	r0, 8000a42 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000a38:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000a3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a3c:	f043 0320 	orr.w	r3, r3, #32
 8000a40:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000a42:	b002      	add	sp, #8
 8000a44:	bd10      	pop	{r4, pc}

08000a46 <HAL_SPI_Transmit>:
{
 8000a46:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000a4a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000a4c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000a50:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8000a52:	2b01      	cmp	r3, #1
{
 8000a54:	460d      	mov	r5, r1
 8000a56:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000a58:	f000 809c 	beq.w	8000b94 <HAL_SPI_Transmit+0x14e>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000a62:	f7ff fbb3 	bl	80001cc <HAL_GetTick>
 8000a66:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000a68:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000a6c:	b2c0      	uxtb	r0, r0
 8000a6e:	2801      	cmp	r0, #1
 8000a70:	f040 808e 	bne.w	8000b90 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 8000a74:	2d00      	cmp	r5, #0
 8000a76:	d04e      	beq.n	8000b16 <HAL_SPI_Transmit+0xd0>
 8000a78:	f1b8 0f00 	cmp.w	r8, #0
 8000a7c:	d04b      	beq.n	8000b16 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000a88:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000a8a:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000a8e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000a90:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000a92:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000a94:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000a96:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000a98:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a9e:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8000aa0:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000aa4:	bf02      	ittt	eq
 8000aa6:	681a      	ldreq	r2, [r3, #0]
 8000aa8:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8000aac:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000ab2:	bf5e      	ittt	pl
 8000ab4:	681a      	ldrpl	r2, [r3, #0]
 8000ab6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000aba:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000abc:	68e2      	ldr	r2, [r4, #12]
 8000abe:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000ac2:	6862      	ldr	r2, [r4, #4]
 8000ac4:	d138      	bne.n	8000b38 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000ac6:	b11a      	cbz	r2, 8000ad0 <HAL_SPI_Transmit+0x8a>
 8000ac8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000aca:	b292      	uxth	r2, r2
 8000acc:	2a01      	cmp	r2, #1
 8000ace:	d106      	bne.n	8000ade <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000ad0:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000ad4:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000ad6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000ade:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b993      	cbnz	r3, 8000b0a <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000ae4:	9700      	str	r7, [sp, #0]
 8000ae6:	4633      	mov	r3, r6
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2102      	movs	r1, #2
 8000aec:	4620      	mov	r0, r4
 8000aee:	f7ff ff53 	bl	8000998 <SPI_WaitFlagStateUntilTimeout>
 8000af2:	b978      	cbnz	r0, 8000b14 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000af4:	463a      	mov	r2, r7
 8000af6:	4631      	mov	r1, r6
 8000af8:	4620      	mov	r0, r4
 8000afa:	f7ff ff94 	bl	8000a26 <SPI_CheckFlag_BSY>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	d038      	beq.n	8000b74 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000b02:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8000b04:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000b06:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8000b08:	e005      	b.n	8000b16 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000b0a:	6823      	ldr	r3, [r4, #0]
 8000b0c:	689a      	ldr	r2, [r3, #8]
 8000b0e:	0790      	lsls	r0, r2, #30
 8000b10:	d4de      	bmi.n	8000ad0 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000b12:	b94e      	cbnz	r6, 8000b28 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8000b14:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000b16:	2301      	movs	r3, #1
 8000b18:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000b22:	b004      	add	sp, #16
 8000b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000b28:	1c71      	adds	r1, r6, #1
 8000b2a:	d0d8      	beq.n	8000ade <HAL_SPI_Transmit+0x98>
 8000b2c:	f7ff fb4e 	bl	80001cc <HAL_GetTick>
 8000b30:	1bc0      	subs	r0, r0, r7
 8000b32:	4286      	cmp	r6, r0
 8000b34:	d8d3      	bhi.n	8000ade <HAL_SPI_Transmit+0x98>
 8000b36:	e7ed      	b.n	8000b14 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000b38:	b11a      	cbz	r2, 8000b42 <HAL_SPI_Transmit+0xfc>
 8000b3a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000b3c:	b292      	uxth	r2, r2
 8000b3e:	2a01      	cmp	r2, #1
 8000b40:	d106      	bne.n	8000b50 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000b42:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000b46:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000b48:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000b50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0c5      	beq.n	8000ae4 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000b58:	6823      	ldr	r3, [r4, #0]
 8000b5a:	689a      	ldr	r2, [r3, #8]
 8000b5c:	0792      	lsls	r2, r2, #30
 8000b5e:	d4f0      	bmi.n	8000b42 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000b60:	2e00      	cmp	r6, #0
 8000b62:	d0d7      	beq.n	8000b14 <HAL_SPI_Transmit+0xce>
 8000b64:	1c73      	adds	r3, r6, #1
 8000b66:	d0f3      	beq.n	8000b50 <HAL_SPI_Transmit+0x10a>
 8000b68:	f7ff fb30 	bl	80001cc <HAL_GetTick>
 8000b6c:	1bc0      	subs	r0, r0, r7
 8000b6e:	4286      	cmp	r6, r0
 8000b70:	d8ee      	bhi.n	8000b50 <HAL_SPI_Transmit+0x10a>
 8000b72:	e7cf      	b.n	8000b14 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000b74:	68a3      	ldr	r3, [r4, #8]
 8000b76:	b933      	cbnz	r3, 8000b86 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000b78:	9303      	str	r3, [sp, #12]
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	68da      	ldr	r2, [r3, #12]
 8000b7e:	9203      	str	r2, [sp, #12]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	9303      	str	r3, [sp, #12]
 8000b84:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000b86:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000b88:	3000      	adds	r0, #0
 8000b8a:	bf18      	it	ne
 8000b8c:	2001      	movne	r0, #1
 8000b8e:	e7c2      	b.n	8000b16 <HAL_SPI_Transmit+0xd0>
 8000b90:	2002      	movs	r0, #2
 8000b92:	e7c0      	b.n	8000b16 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8000b94:	2002      	movs	r0, #2
 8000b96:	e7c4      	b.n	8000b22 <HAL_SPI_Transmit+0xdc>

08000b98 <HAL_SPI_TransmitReceive>:
{
 8000b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b9c:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8000b9e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000ba2:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8000ba4:	2b01      	cmp	r3, #1
{
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	460d      	mov	r5, r1
 8000baa:	4616      	mov	r6, r2
 8000bac:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8000bae:	f000 80ee 	beq.w	8000d8e <HAL_SPI_TransmitReceive+0x1f6>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000bb8:	f7ff fb08 	bl	80001cc <HAL_GetTick>
  tmp  = hspi->State;
 8000bbc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000bc0:	4680      	mov	r8, r0
  tmp  = hspi->State;
 8000bc2:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000bc4:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 8000bc6:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000bc8:	d00a      	beq.n	8000be0 <HAL_SPI_TransmitReceive+0x48>
 8000bca:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000bce:	f040 80dc 	bne.w	8000d8a <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000bd2:	68a2      	ldr	r2, [r4, #8]
 8000bd4:	2a00      	cmp	r2, #0
 8000bd6:	f040 80d8 	bne.w	8000d8a <HAL_SPI_TransmitReceive+0x1f2>
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	f040 80d5 	bne.w	8000d8a <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000be0:	2d00      	cmp	r5, #0
 8000be2:	d04e      	beq.n	8000c82 <HAL_SPI_TransmitReceive+0xea>
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d04c      	beq.n	8000c82 <HAL_SPI_TransmitReceive+0xea>
 8000be8:	f1b9 0f00 	cmp.w	r9, #0
 8000bec:	d049      	beq.n	8000c82 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8000bee:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000bf2:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8000bf4:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000bf6:	bf04      	itt	eq
 8000bf8:	2305      	moveq	r3, #5
 8000bfa:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000c02:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000c04:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000c06:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000c08:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000c0c:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000c10:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000c12:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000c16:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000c18:	bf58      	it	pl
 8000c1a:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000c1c:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000c1e:	bf58      	it	pl
 8000c20:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000c24:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000c28:	bf58      	it	pl
 8000c2a:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000c2c:	68e2      	ldr	r2, [r4, #12]
 8000c2e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000c32:	d15d      	bne.n	8000cf0 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000c34:	b119      	cbz	r1, 8000c3e <HAL_SPI_TransmitReceive+0xa6>
 8000c36:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000c38:	b292      	uxth	r2, r2
 8000c3a:	2a01      	cmp	r2, #1
 8000c3c:	d106      	bne.n	8000c4c <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000c3e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000c42:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000c44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c46:	3b01      	subs	r3, #1
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000c4c:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000c50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	b9bb      	cbnz	r3, 8000c86 <HAL_SPI_TransmitReceive+0xee>
 8000c56:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	b9a3      	cbnz	r3, 8000c86 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000c5c:	f8cd 8000 	str.w	r8, [sp]
 8000c60:	463b      	mov	r3, r7
 8000c62:	2201      	movs	r2, #1
 8000c64:	2102      	movs	r1, #2
 8000c66:	4620      	mov	r0, r4
 8000c68:	f7ff fe96 	bl	8000998 <SPI_WaitFlagStateUntilTimeout>
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	d135      	bne.n	8000cdc <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000c70:	4642      	mov	r2, r8
 8000c72:	4639      	mov	r1, r7
 8000c74:	4620      	mov	r0, r4
 8000c76:	f7ff fed6 	bl	8000a26 <SPI_CheckFlag_BSY>
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	d07a      	beq.n	8000d74 <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000c7e:	2320      	movs	r3, #32
 8000c80:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000c82:	2001      	movs	r0, #1
 8000c84:	e02b      	b.n	8000cde <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000c86:	f1b9 0f00 	cmp.w	r9, #0
 8000c8a:	d00f      	beq.n	8000cac <HAL_SPI_TransmitReceive+0x114>
 8000c8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	b163      	cbz	r3, 8000cac <HAL_SPI_TransmitReceive+0x114>
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	0791      	lsls	r1, r2, #30
 8000c98:	d508      	bpl.n	8000cac <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8000c9a:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000c9e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000ca2:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8000ca4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000cac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	b163      	cbz	r3, 8000ccc <HAL_SPI_TransmitReceive+0x134>
 8000cb2:	6823      	ldr	r3, [r4, #0]
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	07d2      	lsls	r2, r2, #31
 8000cb8:	d508      	bpl.n	8000ccc <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 8000cba:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8000cc4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000ccc:	1c78      	adds	r0, r7, #1
 8000cce:	d0bf      	beq.n	8000c50 <HAL_SPI_TransmitReceive+0xb8>
 8000cd0:	f7ff fa7c 	bl	80001cc <HAL_GetTick>
 8000cd4:	eba0 0008 	sub.w	r0, r0, r8
 8000cd8:	4287      	cmp	r7, r0
 8000cda:	d8b9      	bhi.n	8000c50 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8000cdc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000cea:	b005      	add	sp, #20
 8000cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000cf0:	b119      	cbz	r1, 8000cfa <HAL_SPI_TransmitReceive+0x162>
 8000cf2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000cf4:	b292      	uxth	r2, r2
 8000cf6:	2a01      	cmp	r2, #1
 8000cf8:	d106      	bne.n	8000d08 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8000cfa:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000cfe:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8000d00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d02:	3b01      	subs	r3, #1
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000d08:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d0c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	b91b      	cbnz	r3, 8000d1a <HAL_SPI_TransmitReceive+0x182>
 8000d12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0a0      	beq.n	8000c5c <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000d1a:	f1b9 0f00 	cmp.w	r9, #0
 8000d1e:	d00f      	beq.n	8000d40 <HAL_SPI_TransmitReceive+0x1a8>
 8000d20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	b163      	cbz	r3, 8000d40 <HAL_SPI_TransmitReceive+0x1a8>
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	0791      	lsls	r1, r2, #30
 8000d2c:	d508      	bpl.n	8000d40 <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 8000d2e:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8000d32:	782a      	ldrb	r2, [r5, #0]
 8000d34:	3501      	adds	r5, #1
 8000d36:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000d38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000d40:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	b16b      	cbz	r3, 8000d62 <HAL_SPI_TransmitReceive+0x1ca>
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	07d2      	lsls	r2, r2, #31
 8000d4c:	d509      	bpl.n	8000d62 <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8000d4e:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	3601      	adds	r6, #1
 8000d56:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 8000d5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000d62:	1c7b      	adds	r3, r7, #1
 8000d64:	d0d2      	beq.n	8000d0c <HAL_SPI_TransmitReceive+0x174>
 8000d66:	f7ff fa31 	bl	80001cc <HAL_GetTick>
 8000d6a:	eba0 0008 	sub.w	r0, r0, r8
 8000d6e:	4287      	cmp	r7, r0
 8000d70:	d8cc      	bhi.n	8000d0c <HAL_SPI_TransmitReceive+0x174>
 8000d72:	e7b3      	b.n	8000cdc <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000d74:	68a3      	ldr	r3, [r4, #8]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1b1      	bne.n	8000cde <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	9003      	str	r0, [sp, #12]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	9203      	str	r2, [sp, #12]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	9303      	str	r3, [sp, #12]
 8000d86:	9b03      	ldr	r3, [sp, #12]
 8000d88:	e7a9      	b.n	8000cde <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	e7a7      	b.n	8000cde <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8000d8e:	2002      	movs	r0, #2
 8000d90:	e7ab      	b.n	8000cea <HAL_SPI_TransmitReceive+0x152>

08000d92 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000d92:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000d94:	4604      	mov	r4, r0
 8000d96:	2800      	cmp	r0, #0
 8000d98:	d034      	beq.n	8000e04 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000d9e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000da2:	b90b      	cbnz	r3, 8000da8 <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000da4:	f000 fa32 	bl	800120c <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000da8:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000daa:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000dac:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000db0:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000db2:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000db8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000dba:	6863      	ldr	r3, [r4, #4]
 8000dbc:	69a2      	ldr	r2, [r4, #24]
 8000dbe:	4303      	orrs	r3, r0
 8000dc0:	68e0      	ldr	r0, [r4, #12]
 8000dc2:	4303      	orrs	r3, r0
 8000dc4:	6920      	ldr	r0, [r4, #16]
 8000dc6:	4303      	orrs	r3, r0
 8000dc8:	6960      	ldr	r0, [r4, #20]
 8000dca:	4303      	orrs	r3, r0
 8000dcc:	69e0      	ldr	r0, [r4, #28]
 8000dce:	4303      	orrs	r3, r0
 8000dd0:	6a20      	ldr	r0, [r4, #32]
 8000dd2:	4303      	orrs	r3, r0
 8000dd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000ddc:	4303      	orrs	r3, r0
 8000dde:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000de0:	0c12      	lsrs	r2, r2, #16
 8000de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000de4:	f002 0204 	and.w	r2, r2, #4
 8000de8:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000dea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000dec:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000dee:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000df0:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000df2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000df8:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8000dfa:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dfc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000dfe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8000e02:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e04:	2001      	movs	r0, #1
}
 8000e06:	bd10      	pop	{r4, pc}

08000e08 <EEPROM_Ini>:
 * Initializes EEPROM communication.
 * @param spi_per SPI Peripheral
 * @return Status
 */
EEPROM_STATUS EEPROM_Ini()
{
 8000e08:	b510      	push	{r4, lr}

	/* SPI1 clock enable */
	__HAL_RCC_SPI1_CLK_ENABLE();

	hspi1.Instance = SPI1;
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e0a:	f44f 7482 	mov.w	r4, #260	; 0x104
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b34      	ldr	r3, [pc, #208]	; (8000ee0 <EEPROM_Ini+0xd8>)
{
 8000e10:	b086      	sub	sp, #24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	699a      	ldr	r2, [r3, #24]
	hspi1.Instance = SPI1;
 8000e14:	4833      	ldr	r0, [pc, #204]	; (8000ee4 <EEPROM_Ini+0xdc>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	f042 0204 	orr.w	r2, r2, #4
 8000e1a:	619a      	str	r2, [r3, #24]
 8000e1c:	699a      	ldr	r2, [r3, #24]
 8000e1e:	f002 0204 	and.w	r2, r2, #4
 8000e22:	9200      	str	r2, [sp, #0]
 8000e24:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_SPI1_CLK_ENABLE();
 8000e26:	699a      	ldr	r2, [r3, #24]
 8000e28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e2c:	619a      	str	r2, [r3, #24]
 8000e2e:	699b      	ldr	r3, [r3, #24]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e30:	f44f 7200 	mov.w	r2, #512	; 0x200
	__HAL_RCC_SPI1_CLK_ENABLE();
 8000e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	9b01      	ldr	r3, [sp, #4]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <EEPROM_Ini+0xe0>)
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e3e:	6182      	str	r2, [r0, #24]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e40:	e880 0018 	stmia.w	r0, {r3, r4}
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e44:	2300      	movs	r3, #0
 8000e46:	6083      	str	r3, [r0, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e48:	60c3      	str	r3, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e4a:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e4c:	6143      	str	r3, [r0, #20]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e4e:	61c3      	str	r3, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e50:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e52:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e54:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000e56:	230a      	movs	r3, #10
 8000e58:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e5a:	f7ff ff9a 	bl	8000d92 <HAL_SPI_Init>
 8000e5e:	b118      	cbz	r0, 8000e68 <EEPROM_Ini+0x60>
	{
	_Error_Handler(__FILE__, __LINE__);
 8000e60:	2126      	movs	r1, #38	; 0x26
 8000e62:	4822      	ldr	r0, [pc, #136]	; (8000eec <EEPROM_Ini+0xe4>)
 8000e64:	f000 f9d0 	bl	8001208 <_Error_Handler>
		PA7     ------> SPI1_MOSI
		PA8     ------> SPI1_SS
		*/

		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e68:	23a0      	movs	r3, #160	; 0xa0
 8000e6a:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e70:	2303      	movs	r3, #3
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	a902      	add	r1, sp, #8
 8000e74:	481e      	ldr	r0, [pc, #120]	; (8000ef0 <EEPROM_Ini+0xe8>)

		GPIO_InitStruct.Pin = GPIO_PIN_6;
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e76:	2400      	movs	r4, #0
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e78:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f7ff fa35 	bl	80002e8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e7e:	2340      	movs	r3, #64	; 0x40
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	a902      	add	r1, sp, #8
 8000e82:	481b      	ldr	r0, [pc, #108]	; (8000ef0 <EEPROM_Ini+0xe8>)
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e84:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e86:	9403      	str	r4, [sp, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	9404      	str	r4, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f7ff fa2d 	bl	80002e8 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e92:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	a902      	add	r1, sp, #8
 8000e98:	4815      	ldr	r0, [pc, #84]	; (8000ef0 <EEPROM_Ini+0xe8>)
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	9404      	str	r4, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f7ff fa23 	bl	80002e8 <HAL_GPIO_Init>

		/* SPI1 interrupt Init */
		HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ea2:	4622      	mov	r2, r4
 8000ea4:	4621      	mov	r1, r4
 8000ea6:	2023      	movs	r0, #35	; 0x23
 8000ea8:	f7ff f9a8 	bl	80001fc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000eac:	2023      	movs	r0, #35	; 0x23
 8000eae:	f7ff f9d9 	bl	8000264 <HAL_NVIC_EnableIRQ>
		//Reset cooldown
		coolD = 0;

		return EEPROM_STATUS_READY;

}
 8000eb2:	4620      	mov	r0, r4
		SPI1->CR2 &= ~(SPI_CR2_TXEIE | SPI_CR2_RXNEIE); //Nothing to do -> Interrupt disable
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <EEPROM_Ini+0xe0>)
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000ebc:	605a      	str	r2, [r3, #4]
		SPI1->CR2 |= SPI_CR2_ERRIE;
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	f042 0220 	orr.w	r2, r2, #32
 8000ec4:	605a      	str	r2, [r3, #4]
		SPI1->CR1 |= SPI_CR1_SPE;
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ecc:	601a      	str	r2, [r3, #0]
		write_state = EEPROM_WRITE_INACTIVE;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <EEPROM_Ini+0xec>)
 8000ed0:	701c      	strb	r4, [r3, #0]
		read_state = EEPROM_READ_INACTIVE;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <EEPROM_Ini+0xf0>)
 8000ed4:	701c      	strb	r4, [r3, #0]
		coolD = 0;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <EEPROM_Ini+0xf4>)
 8000ed8:	601c      	str	r4, [r3, #0]
}
 8000eda:	b006      	add	sp, #24
 8000edc:	bd10      	pop	{r4, pc}
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	20000050 	.word	0x20000050
 8000ee8:	40013000 	.word	0x40013000
 8000eec:	0800157b 	.word	0x0800157b
 8000ef0:	40010800 	.word	0x40010800
 8000ef4:	2000002c 	.word	0x2000002c
 8000ef8:	20000048 	.word	0x20000048
 8000efc:	2000004c 	.word	0x2000004c

08000f00 <EEPROM_Read>:
 * @param dest Destination (Should be allocated by len + 1)
 * @param len Length of Bytestream
 *
 */
EEPROM_RESULT EEPROM_Read(uint32_t address, uint8_t *dest, uint32_t len)
{
 8000f00:	b510      	push	{r4, lr}
	if(read_state == EEPROM_READ_INACTIVE)
 8000f02:	4c0a      	ldr	r4, [pc, #40]	; (8000f2c <EEPROM_Read+0x2c>)
 8000f04:	7823      	ldrb	r3, [r4, #0]
 8000f06:	b973      	cbnz	r3, 8000f26 <EEPROM_Read+0x26>
	{
		read_len = len;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <EEPROM_Read+0x30>)
 8000f0a:	601a      	str	r2, [r3, #0]
		read_state = EEPROM_READ0_WAIT;
 8000f0c:	2301      	movs	r3, #1
		read_adr = address;
 8000f0e:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <EEPROM_Read+0x34>)
		read_state = EEPROM_READ0_WAIT;
 8000f10:	7023      	strb	r3, [r4, #0]
		read_adr = address;
 8000f12:	6010      	str	r0, [r2, #0]
		read_dest = dest;
 8000f14:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <EEPROM_Read+0x38>)
		//Enable Interrupt
		SPI1->CR2 |= SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE;
 8000f16:	4618      	mov	r0, r3
		read_dest = dest;
 8000f18:	6011      	str	r1, [r2, #0]
		SPI1->CR2 |= SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE;
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <EEPROM_Read+0x3c>)
 8000f1c:	684a      	ldr	r2, [r1, #4]
 8000f1e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8000f22:	604a      	str	r2, [r1, #4]
 8000f24:	bd10      	pop	{r4, pc}

		return EEPROM_RESULT_OK;
	} else
	{
		return EEPROM_RESULT_ERR_RIP;
 8000f26:	2002      	movs	r0, #2
	}
}
 8000f28:	bd10      	pop	{r4, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000048 	.word	0x20000048
 8000f30:	20000038 	.word	0x20000038
 8000f34:	20000040 	.word	0x20000040
 8000f38:	2000003c 	.word	0x2000003c
 8000f3c:	40013000 	.word	0x40013000

08000f40 <EEPROM_Read_blocking>:

EEPROM_RESULT EEPROM_Read_blocking(uint32_t address, uint8_t *dest, uint32_t len, EEPROM_RESULT *result,uint32_t timeout)
{
 8000f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f44:	461d      	mov	r5, r3
	*result = EEPROM_RESULT_ERR_RIP;
 8000f46:	2302      	movs	r3, #2
{
 8000f48:	4606      	mov	r6, r0
 8000f4a:	460f      	mov	r7, r1
 8000f4c:	4690      	mov	r8, r2
 8000f4e:	9c06      	ldr	r4, [sp, #24]
	*result = EEPROM_RESULT_ERR_RIP;
 8000f50:	702b      	strb	r3, [r5, #0]
	while(EEPROM_Read(address, dest, len) == EEPROM_RESULT_ERR_RIP && timeout-- > 0);
 8000f52:	4642      	mov	r2, r8
 8000f54:	4639      	mov	r1, r7
 8000f56:	4630      	mov	r0, r6
 8000f58:	f7ff ffd2 	bl	8000f00 <EEPROM_Read>
 8000f5c:	2802      	cmp	r0, #2
 8000f5e:	d107      	bne.n	8000f70 <EEPROM_Read_blocking+0x30>
 8000f60:	1e63      	subs	r3, r4, #1
 8000f62:	b91c      	cbnz	r4, 8000f6c <EEPROM_Read_blocking+0x2c>
	if(timeout > 0)
	{
		*result = EEPROM_RESULT_OK;
 8000f64:	2001      	movs	r0, #1
 8000f66:	7028      	strb	r0, [r5, #0]
		return EEPROM_RESULT_OK;
 8000f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f6c:	461c      	mov	r4, r3
 8000f6e:	e7f0      	b.n	8000f52 <EEPROM_Read_blocking+0x12>
	if(timeout > 0)
 8000f70:	2c00      	cmp	r4, #0
 8000f72:	d1f7      	bne.n	8000f64 <EEPROM_Read_blocking+0x24>
	}
	else
		return EEPROM_RESULT_ERR_TIMEOUT;
 8000f74:	2004      	movs	r0, #4
}
 8000f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000f7c <EEPROM_Write>:
	return EEPROM_RESULT_OK;
}

EEPROM_RESULT EEPROM_Write(uint32_t address, uint8_t *source, uint32_t len)
{
	if(read_state == EEPROM_READ_INACTIVE)
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <EEPROM_Write+0x2c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b97b      	cbnz	r3, 8000fa2 <EEPROM_Write+0x26>
	{
		write_len = len;
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <EEPROM_Write+0x30>)
 8000f84:	601a      	str	r2, [r3, #0]
		write_state = EEPROM_WRITE0_WAIT;
 8000f86:	2301      	movs	r3, #1
 8000f88:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <EEPROM_Write+0x34>)
 8000f8a:	7013      	strb	r3, [r2, #0]
		write_adr = address;
 8000f8c:	4a09      	ldr	r2, [pc, #36]	; (8000fb4 <EEPROM_Write+0x38>)
 8000f8e:	6010      	str	r0, [r2, #0]
		write_sou = source;
 8000f90:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <EEPROM_Write+0x3c>)
		//Enable Interrupt
		SPI1->CR2 |= SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE;
 8000f92:	4618      	mov	r0, r3
		write_sou = source;
 8000f94:	6011      	str	r1, [r2, #0]
		SPI1->CR2 |= SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE;
 8000f96:	4909      	ldr	r1, [pc, #36]	; (8000fbc <EEPROM_Write+0x40>)
 8000f98:	684a      	ldr	r2, [r1, #4]
 8000f9a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8000f9e:	604a      	str	r2, [r1, #4]
 8000fa0:	4770      	bx	lr
		return EEPROM_RESULT_OK;
	} else
	{
		return EEPROM_RESULT_ERR_WIP;
 8000fa2:	2003      	movs	r0, #3
	}
}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000048 	.word	0x20000048
 8000fac:	20000044 	.word	0x20000044
 8000fb0:	2000002c 	.word	0x2000002c
 8000fb4:	20000034 	.word	0x20000034
 8000fb8:	20000030 	.word	0x20000030
 8000fbc:	40013000 	.word	0x40013000

08000fc0 <EEPROM_Write_blocking>:

EEPROM_RESULT EEPROM_Write_blocking(uint32_t address, uint8_t *source, uint32_t len, EEPROM_RESULT *result, uint32_t timeout)
{
 8000fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fc4:	461d      	mov	r5, r3
	*result = EEPROM_RESULT_ERR_WIP;
 8000fc6:	2303      	movs	r3, #3
{
 8000fc8:	4606      	mov	r6, r0
 8000fca:	460f      	mov	r7, r1
 8000fcc:	4690      	mov	r8, r2
 8000fce:	9c06      	ldr	r4, [sp, #24]
	*result = EEPROM_RESULT_ERR_WIP;
 8000fd0:	702b      	strb	r3, [r5, #0]
	while(EEPROM_Write(address, source, len) == EEPROM_RESULT_ERR_WIP && timeout-- > 0);
 8000fd2:	4642      	mov	r2, r8
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	f7ff ffd0 	bl	8000f7c <EEPROM_Write>
 8000fdc:	2803      	cmp	r0, #3
 8000fde:	d107      	bne.n	8000ff0 <EEPROM_Write_blocking+0x30>
 8000fe0:	1e63      	subs	r3, r4, #1
 8000fe2:	b91c      	cbnz	r4, 8000fec <EEPROM_Write_blocking+0x2c>
	if(timeout > 0)
	{
		*result = EEPROM_RESULT_OK;
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	7028      	strb	r0, [r5, #0]
		return EEPROM_RESULT_OK;
 8000fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fec:	461c      	mov	r4, r3
 8000fee:	e7f0      	b.n	8000fd2 <EEPROM_Write_blocking+0x12>
	if(timeout > 0)
 8000ff0:	2c00      	cmp	r4, #0
 8000ff2:	d1f7      	bne.n	8000fe4 <EEPROM_Write_blocking+0x24>
	}
	else
		return EEPROM_RESULT_ERR_TIMEOUT;
 8000ff4:	2004      	movs	r0, #4
}
 8000ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000ffc <EEPROM_ReadStatus>:
{
	return EEPROM_SendCommand(OPCODE_WREN);
}

EEPROM_STATUS EEPROM_ReadStatus()
{
 8000ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //Slave select
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001004:	4819      	ldr	r0, [pc, #100]	; (800106c <EEPROM_ReadStatus+0x70>)
 8001006:	f7ff fa4f 	bl	80004a8 <HAL_GPIO_WritePin>
	uint8_t pData;
	uint8_t dummy = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	f88d 300f 	strb.w	r3, [sp, #15]
	pData = OPCODE_RDSR;
 8001010:	2305      	movs	r3, #5
 8001012:	ac04      	add	r4, sp, #16
 8001014:	f804 3d02 	strb.w	r3, [r4, #-2]!
	HAL_SPI_Transmit(&hspi1, &pData, 1, 0xFFFF);
 8001018:	2201      	movs	r2, #1
 800101a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800101e:	4621      	mov	r1, r4
 8001020:	4813      	ldr	r0, [pc, #76]	; (8001070 <EEPROM_ReadStatus+0x74>)
 8001022:	f7ff fd10 	bl	8000a46 <HAL_SPI_Transmit>
	HAL_SPI_TransmitReceive(&hspi1, &dummy, &pData, 1, 0xFFFF);
 8001026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800102a:	4622      	mov	r2, r4
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	f10d 010f 	add.w	r1, sp, #15
 8001032:	2301      	movs	r3, #1
 8001034:	480e      	ldr	r0, [pc, #56]	; (8001070 <EEPROM_ReadStatus+0x74>)
 8001036:	f7ff fdaf 	bl	8000b98 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //Slave deSelect
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001040:	480a      	ldr	r0, [pc, #40]	; (800106c <EEPROM_ReadStatus+0x70>)
 8001042:	f7ff fa31 	bl	80004a8 <HAL_GPIO_WritePin>


	if(pData & (1<<0))
 8001046:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800104a:	07da      	lsls	r2, r3, #31
 800104c:	d409      	bmi.n	8001062 <EEPROM_ReadStatus+0x66>
		return EEPROM_STATUS_WIP;
	else if(!(pData & (1<<1)))
 800104e:	079b      	lsls	r3, r3, #30
 8001050:	d509      	bpl.n	8001066 <EEPROM_ReadStatus+0x6a>
		return EEPROM_STATUS_WRITE_NE;
	else if(read_state != EEPROM_READ_INACTIVE)
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <EEPROM_ReadStatus+0x78>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
			return EEPROM_STATUS_RIP;
	else
		return EEPROM_STATUS_READY;
 8001058:	bf14      	ite	ne
 800105a:	2003      	movne	r0, #3
 800105c:	2000      	moveq	r0, #0


}
 800105e:	b004      	add	sp, #16
 8001060:	bd10      	pop	{r4, pc}
		return EEPROM_STATUS_WIP;
 8001062:	2001      	movs	r0, #1
 8001064:	e7fb      	b.n	800105e <EEPROM_ReadStatus+0x62>
		return EEPROM_STATUS_WRITE_NE;
 8001066:	2002      	movs	r0, #2
 8001068:	e7f9      	b.n	800105e <EEPROM_ReadStatus+0x62>
 800106a:	bf00      	nop
 800106c:	40010800 	.word	0x40010800
 8001070:	20000050 	.word	0x20000050
 8001074:	20000048 	.word	0x20000048

08001078 <freeDR>:

/* ################## BONUS FUNCTION #################### */

void freeDR()
{
	uint8_t dummy = SPI1->DR;
 8001078:	4b01      	ldr	r3, [pc, #4]	; (8001080 <freeDR+0x8>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40013000 	.word	0x40013000

08001084 <selectSlave>:
}

void selectSlave(uint8_t status)
{
	if(status)
 8001084:	4602      	mov	r2, r0
 8001086:	b100      	cbz	r0, 800108a <selectSlave+0x6>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //Slave deselect
 8001088:	2201      	movs	r2, #1
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //Slave select
 800108a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108e:	4801      	ldr	r0, [pc, #4]	; (8001094 <selectSlave+0x10>)
 8001090:	f7ff ba0a 	b.w	80004a8 <HAL_GPIO_WritePin>
 8001094:	40010800 	.word	0x40010800

08001098 <EEPROM_SendCommand>:
{
 8001098:	b513      	push	{r0, r1, r4, lr}
 800109a:	ac02      	add	r4, sp, #8
 800109c:	f804 0d01 	strb.w	r0, [r4, #-1]!
	selectSlave(0);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff ffef 	bl	8001084 <selectSlave>
	HAL_SPI_Transmit(&hspi1, &opCode, 1, 0xFFFF);
 80010a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010aa:	4621      	mov	r1, r4
 80010ac:	2201      	movs	r2, #1
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <EEPROM_SendCommand+0x30>)
 80010b0:	f7ff fcc9 	bl	8000a46 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //Slave deselect
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ba:	4804      	ldr	r0, [pc, #16]	; (80010cc <EEPROM_SendCommand+0x34>)
 80010bc:	f7ff f9f4 	bl	80004a8 <HAL_GPIO_WritePin>
	return EEPROM_ReadStatus();
 80010c0:	f7ff ff9c 	bl	8000ffc <EEPROM_ReadStatus>
}
 80010c4:	b002      	add	sp, #8
 80010c6:	bd10      	pop	{r4, pc}
 80010c8:	20000050 	.word	0x20000050
 80010cc:	40010800 	.word	0x40010800

080010d0 <EEPROM_WriteE>:
	return EEPROM_SendCommand(OPCODE_WREN);
 80010d0:	2006      	movs	r0, #6
 80010d2:	f7ff bfe1 	b.w	8001098 <EEPROM_SendCommand>
	...

080010d8 <tickEnableIR>:
}

void tickEnableIR(void)
{
	if(coolD > 0)
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <tickEnableIR+0x20>)
 80010da:	6813      	ldr	r3, [r2, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	dd02      	ble.n	80010e6 <tickEnableIR+0xe>
		coolD--;
 80010e0:	3b01      	subs	r3, #1
	else if(coolD == 0)
	{
		//Enable Interrupt
		SPI1->CR2 |= SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE;
		coolD = -1;
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4770      	bx	lr
	else if(coolD == 0)
 80010e6:	d1fd      	bne.n	80010e4 <tickEnableIR+0xc>
		SPI1->CR2 |= SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE;
 80010e8:	4904      	ldr	r1, [pc, #16]	; (80010fc <tickEnableIR+0x24>)
 80010ea:	684b      	ldr	r3, [r1, #4]
 80010ec:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80010f0:	604b      	str	r3, [r1, #4]
		coolD = -1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	e7f4      	b.n	80010e2 <tickEnableIR+0xa>
 80010f8:	2000004c 	.word	0x2000004c
 80010fc:	40013000 	.word	0x40013000

08001100 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_GPIO_Init+0x3c>)
{
 8001102:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001106:	4c0e      	ldr	r4, [pc, #56]	; (8001140 <MX_GPIO_Init+0x40>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	f042 0204 	orr.w	r2, r2, #4
 800110c:	619a      	str	r2, [r3, #24]
 800110e:	699b      	ldr	r3, [r3, #24]
{
 8001110:	b086      	sub	sp, #24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	4620      	mov	r0, r4
 800111c:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001120:	f7ff f9c2 	bl	80004a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001124:	2310      	movs	r3, #16
 8001126:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	a902      	add	r1, sp, #8
 8001130:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f7ff f8d8 	bl	80002e8 <HAL_GPIO_Init>

}
 8001138:	b006      	add	sp, #24
 800113a:	bd10      	pop	{r4, pc}
 800113c:	40021000 	.word	0x40021000
 8001140:	40010800 	.word	0x40010800

08001144 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001144:	2302      	movs	r3, #2
{
 8001146:	b510      	push	{r4, lr}
 8001148:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114c:	2301      	movs	r3, #1
 800114e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001150:	2310      	movs	r3, #16
 8001152:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001154:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001156:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001158:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115a:	f7ff f9ab 	bl	80004b4 <HAL_RCC_OscConfig>
 800115e:	4601      	mov	r1, r0
 8001160:	b100      	cbz	r0, 8001164 <SystemClock_Config+0x20>
 8001162:	e7fe      	b.n	8001162 <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001164:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001166:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800116a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800116e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001170:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001172:	f7ff fb67 	bl	8000844 <HAL_RCC_ClockConfig>
 8001176:	4604      	mov	r4, r0
 8001178:	b100      	cbz	r0, 800117c <SystemClock_Config+0x38>
 800117a:	e7fe      	b.n	800117a <SystemClock_Config+0x36>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800117c:	f7ff fc06 	bl	800098c <HAL_RCC_GetHCLKFreq>
 8001180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001184:	fbb0 f0f3 	udiv	r0, r0, r3
 8001188:	f7ff f878 	bl	800027c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800118c:	2004      	movs	r0, #4
 800118e:	f7ff f899 	bl	80002c4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001192:	4622      	mov	r2, r4
 8001194:	4621      	mov	r1, r4
 8001196:	f04f 30ff 	mov.w	r0, #4294967295
 800119a:	f7ff f82f 	bl	80001fc <HAL_NVIC_SetPriority>
}
 800119e:	b010      	add	sp, #64	; 0x40
 80011a0:	bd10      	pop	{r4, pc}
	...

080011a4 <main>:
{
 80011a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  volatile uint8_t i = 0;
 80011a6:	2500      	movs	r5, #0
  HAL_Init();
 80011a8:	f7fe fff4 	bl	8000194 <HAL_Init>
  EEPROM_Write_blocking(0x00, tx, 3, &writeRes,10000);
 80011ac:	f242 7410 	movw	r4, #10000	; 0x2710
  SystemClock_Config();
 80011b0:	f7ff ffc8 	bl	8001144 <SystemClock_Config>
  MX_GPIO_Init();
 80011b4:	f7ff ffa4 	bl	8001100 <MX_GPIO_Init>
  volatile uint8_t i = 0;
 80011b8:	f88d 500c 	strb.w	r5, [sp, #12]
  EEPROM_Ini();
 80011bc:	f7ff fe24 	bl	8000e08 <EEPROM_Ini>
  state = EEPROM_WriteE();
 80011c0:	f7ff ff86 	bl	80010d0 <EEPROM_WriteE>
  uint8_t tx[] = {10,20,30};
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <main+0x60>)
  state = EEPROM_WriteE();
 80011c6:	f88d 000d 	strb.w	r0, [sp, #13]
  uint8_t tx[] = {10,20,30};
 80011ca:	881a      	ldrh	r2, [r3, #0]
 80011cc:	789b      	ldrb	r3, [r3, #2]
 80011ce:	f8ad 2010 	strh.w	r2, [sp, #16]
 80011d2:	f88d 3012 	strb.w	r3, [sp, #18]
  EEPROM_Write_blocking(0x00, tx, 3, &writeRes,10000);
 80011d6:	2203      	movs	r2, #3
 80011d8:	f10d 030e 	add.w	r3, sp, #14
 80011dc:	a904      	add	r1, sp, #16
 80011de:	9400      	str	r4, [sp, #0]
 80011e0:	4628      	mov	r0, r5
 80011e2:	f7ff feed 	bl	8000fc0 <EEPROM_Write_blocking>
  EEPROM_Read_blocking(0x01, rx, 2, &readRes, 10000);
 80011e6:	9400      	str	r4, [sp, #0]
 80011e8:	f10d 030f 	add.w	r3, sp, #15
 80011ec:	2202      	movs	r2, #2
 80011ee:	a905      	add	r1, sp, #20
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff fea5 	bl	8000f40 <EEPROM_Read_blocking>
	  i++;
 80011f6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	f88d 300c 	strb.w	r3, [sp, #12]
 8001202:	e7f8      	b.n	80011f6 <main+0x52>
 8001204:	08001578 	.word	0x08001578

08001208 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001208:	e7fe      	b.n	8001208 <_Error_Handler>
	...

0800120c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800120c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 800120e:	6802      	ldr	r2, [r0, #0]
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_SPI_MspInit+0x5c>)
{
 8001212:	b086      	sub	sp, #24
  if(spiHandle->Instance==SPI1)
 8001214:	429a      	cmp	r2, r3
 8001216:	d125      	bne.n	8001264 <HAL_SPI_MspInit+0x58>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001218:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800121c:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001220:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001224:	619a      	str	r2, [r3, #24]
 8001226:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	4810      	ldr	r0, [pc, #64]	; (800126c <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800122a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001232:	23a0      	movs	r3, #160	; 0xa0
 8001234:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123a:	2303      	movs	r3, #3

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f7ff f852 	bl	80002e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001244:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	a902      	add	r1, sp, #8
 8001248:	4808      	ldr	r0, [pc, #32]	; (800126c <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800124a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f7ff f84a 	bl	80002e8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001254:	2023      	movs	r0, #35	; 0x23
 8001256:	4622      	mov	r2, r4
 8001258:	4621      	mov	r1, r4
 800125a:	f7fe ffcf 	bl	80001fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800125e:	2023      	movs	r0, #35	; 0x23
 8001260:	f7ff f800 	bl	8000264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001264:	b006      	add	sp, #24
 8001266:	bd10      	pop	{r4, pc}
 8001268:	40013000 	.word	0x40013000
 800126c:	40010800 	.word	0x40010800

08001270 <NMI_Handler>:
 8001270:	4770      	bx	lr

08001272 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler>

08001274 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001274:	e7fe      	b.n	8001274 <MemManage_Handler>

08001276 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler>

08001278 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler>

0800127a <SVC_Handler>:
 800127a:	4770      	bx	lr

0800127c <DebugMon_Handler>:
 800127c:	4770      	bx	lr

0800127e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800127e:	4770      	bx	lr

08001280 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001280:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001282:	f7fe ff97 	bl	80001b4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001286:	f7ff f82a 	bl	80002de <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //Cooldown
  tickEnableIR();
  /* USER CODE END SysTick_IRQn 1 */
}
 800128a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  tickEnableIR();
 800128e:	f7ff bf23 	b.w	80010d8 <tickEnableIR>
	...

08001294 <SPI1_IRQHandler>:

/**
* @brief This function handles SPI1 global interrupt.
*/
void SPI1_IRQHandler(void)
{
 8001294:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

	//Clear Interrupt Flag
	HAL_NVIC_ClearPendingIRQ(SPI1_IRQn);
 8001296:	2023      	movs	r0, #35	; 0x23
 8001298:	f7ff f806 	bl	80002a8 <HAL_NVIC_ClearPendingIRQ>

	/* --- Check for Error Flags --- */
	if(SPI1->SR & SPI_SR_OVR)
 800129c:	4b69      	ldr	r3, [pc, #420]	; (8001444 <SPI1_IRQHandler+0x1b0>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	0658      	lsls	r0, r3, #25
 80012a2:	d508      	bpl.n	80012b6 <SPI1_IRQHandler+0x22>
	{
		__HAL_SPI_CLEAR_OVRFLAG(&hspi1);
 80012a4:	2300      	movs	r3, #0
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	4b67      	ldr	r3, [pc, #412]	; (8001448 <SPI1_IRQHandler+0x1b4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	9201      	str	r2, [sp, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	9b01      	ldr	r3, [sp, #4]
	}

	/* --- Check if still active --- */
	if((read_state == EEPROM_READ_INACTIVE && write_state == EEPROM_WRITE_INACTIVE) || coolD > 0)
 80012b6:	4c65      	ldr	r4, [pc, #404]	; (800144c <SPI1_IRQHandler+0x1b8>)
 80012b8:	7823      	ldrb	r3, [r4, #0]
 80012ba:	b913      	cbnz	r3, 80012c2 <SPI1_IRQHandler+0x2e>
 80012bc:	4a64      	ldr	r2, [pc, #400]	; (8001450 <SPI1_IRQHandler+0x1bc>)
 80012be:	7812      	ldrb	r2, [r2, #0]
 80012c0:	b11a      	cbz	r2, 80012ca <SPI1_IRQHandler+0x36>
 80012c2:	4a64      	ldr	r2, [pc, #400]	; (8001454 <SPI1_IRQHandler+0x1c0>)
 80012c4:	6811      	ldr	r1, [r2, #0]
 80012c6:	2900      	cmp	r1, #0
 80012c8:	dd08      	ble.n	80012dc <SPI1_IRQHandler+0x48>
	{
		SPI1->CR2 &= ~(SPI_CR2_TXEIE | SPI_CR2_RXNEIE); //Nothing to do -> Interrupt disable
		selectSlave(1);
 80012ca:	2001      	movs	r0, #1
		SPI1->CR2 &= ~(SPI_CR2_TXEIE | SPI_CR2_RXNEIE); //Nothing to do -> Interrupt disable
 80012cc:	4a5d      	ldr	r2, [pc, #372]	; (8001444 <SPI1_IRQHandler+0x1b0>)
 80012ce:	6853      	ldr	r3, [r2, #4]
 80012d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80012d4:	6053      	str	r3, [r2, #4]
			case EEPROM_WRITE_INACTIVE:
				//Nothing to Transmit
				break;
			case EEPROM_WRITE0_WAIT:
					write_state = EEPROM_WRITE1_OPCODE;
					selectSlave(0);
 80012d6:	f7ff fed5 	bl	8001084 <selectSlave>
				break;
 80012da:	e013      	b.n	8001304 <SPI1_IRQHandler+0x70>
	if((write_state == EEPROM_WRITE_INACTIVE || write_state == EEPROM_WRITE0_WAIT) && read_state != EEPROM_READ_INACTIVE) //Fuehre ReadOperation nur durch, wenn momentan nichts geschrieben wird
 80012dc:	4d5c      	ldr	r5, [pc, #368]	; (8001450 <SPI1_IRQHandler+0x1bc>)
 80012de:	7829      	ldrb	r1, [r5, #0]
 80012e0:	2901      	cmp	r1, #1
 80012e2:	d85c      	bhi.n	800139e <SPI1_IRQHandler+0x10a>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d05a      	beq.n	800139e <SPI1_IRQHandler+0x10a>
		switch(read_state)
 80012e8:	3b01      	subs	r3, #1
 80012ea:	2b07      	cmp	r3, #7
 80012ec:	d80a      	bhi.n	8001304 <SPI1_IRQHandler+0x70>
 80012ee:	e8df f003 	tbb	[pc, r3]
 80012f2:	0b04      	.short	0x0b04
 80012f4:	352a1f14 	.word	0x352a1f14
 80012f8:	513c      	.short	0x513c
					selectSlave(0);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff fec2 	bl	8001084 <selectSlave>
					read_state = EEPROM_READ1_OPCODE;
 8001300:	2302      	movs	r3, #2
					read_state = EEPROM_READ1A_ADR;
 8001302:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SPI1_IRQn 0 */
  //HAL_SPI_IRQHandler(&hspi1);
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001304:	b003      	add	sp, #12
 8001306:	bd30      	pop	{r4, r5, pc}
				if(SPI1->SR & SPI_SR_TXE)
 8001308:	4d4e      	ldr	r5, [pc, #312]	; (8001444 <SPI1_IRQHandler+0x1b0>)
 800130a:	68ab      	ldr	r3, [r5, #8]
 800130c:	0799      	lsls	r1, r3, #30
 800130e:	d5f9      	bpl.n	8001304 <SPI1_IRQHandler+0x70>
					freeDR();
 8001310:	f7ff feb2 	bl	8001078 <freeDR>
					SPI1->DR = OPCODE_READ;
 8001314:	2303      	movs	r3, #3
 8001316:	60eb      	str	r3, [r5, #12]
 8001318:	e7f3      	b.n	8001302 <SPI1_IRQHandler+0x6e>
				if(SPI1->SR & SPI_SR_TXE)
 800131a:	4d4a      	ldr	r5, [pc, #296]	; (8001444 <SPI1_IRQHandler+0x1b0>)
 800131c:	68ab      	ldr	r3, [r5, #8]
 800131e:	079a      	lsls	r2, r3, #30
 8001320:	d5f0      	bpl.n	8001304 <SPI1_IRQHandler+0x70>
					freeDR();
 8001322:	f7ff fea9 	bl	8001078 <freeDR>
					SPI1->DR = (read_adr>>16) & 0xFF;
 8001326:	4b4c      	ldr	r3, [pc, #304]	; (8001458 <SPI1_IRQHandler+0x1c4>)
 8001328:	789b      	ldrb	r3, [r3, #2]
 800132a:	60eb      	str	r3, [r5, #12]
					read_state = EEPROM_READ1B_ADR;
 800132c:	2304      	movs	r3, #4
 800132e:	e7e8      	b.n	8001302 <SPI1_IRQHandler+0x6e>
				if(SPI1->SR & SPI_SR_TXE)
 8001330:	4d44      	ldr	r5, [pc, #272]	; (8001444 <SPI1_IRQHandler+0x1b0>)
 8001332:	68ab      	ldr	r3, [r5, #8]
 8001334:	079b      	lsls	r3, r3, #30
 8001336:	d5e5      	bpl.n	8001304 <SPI1_IRQHandler+0x70>
					freeDR();
 8001338:	f7ff fe9e 	bl	8001078 <freeDR>
					SPI1->DR = (read_adr>>8) & 0xFF;
 800133c:	4b46      	ldr	r3, [pc, #280]	; (8001458 <SPI1_IRQHandler+0x1c4>)
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	60eb      	str	r3, [r5, #12]
					read_state = EEPROM_READ1C_ADR;
 8001342:	2305      	movs	r3, #5
 8001344:	e7dd      	b.n	8001302 <SPI1_IRQHandler+0x6e>
				if(SPI1->SR & SPI_SR_TXE)
 8001346:	4d3f      	ldr	r5, [pc, #252]	; (8001444 <SPI1_IRQHandler+0x1b0>)
 8001348:	68ab      	ldr	r3, [r5, #8]
 800134a:	0798      	lsls	r0, r3, #30
 800134c:	d5da      	bpl.n	8001304 <SPI1_IRQHandler+0x70>
					freeDR();
 800134e:	f7ff fe93 	bl	8001078 <freeDR>
					SPI1->DR = read_adr & 0xFF;
 8001352:	4b41      	ldr	r3, [pc, #260]	; (8001458 <SPI1_IRQHandler+0x1c4>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	60eb      	str	r3, [r5, #12]
					read_state = EEPROM_READ2A_RECEIVE;
 8001358:	2306      	movs	r3, #6
 800135a:	e7d2      	b.n	8001302 <SPI1_IRQHandler+0x6e>
				freeDR(); //Discard Byte received while last Address Byte
 800135c:	f7ff fe8c 	bl	8001078 <freeDR>
				SPI1->DR = 0x00; //Pull for Data
 8001360:	2200      	movs	r2, #0
 8001362:	4b38      	ldr	r3, [pc, #224]	; (8001444 <SPI1_IRQHandler+0x1b0>)
 8001364:	60da      	str	r2, [r3, #12]
				read_state = EEPROM_READ2B_RECEIVE;
 8001366:	2307      	movs	r3, #7
 8001368:	e7cb      	b.n	8001302 <SPI1_IRQHandler+0x6e>
				if((SPI1->SR & SPI_SR_RXNE) && read_state)
 800136a:	4a36      	ldr	r2, [pc, #216]	; (8001444 <SPI1_IRQHandler+0x1b0>)
 800136c:	6893      	ldr	r3, [r2, #8]
 800136e:	07d9      	lsls	r1, r3, #31
 8001370:	d5c8      	bpl.n	8001304 <SPI1_IRQHandler+0x70>
					*(read_dest++) = SPI1->DR;
 8001372:	493a      	ldr	r1, [pc, #232]	; (800145c <SPI1_IRQHandler+0x1c8>)
 8001374:	680b      	ldr	r3, [r1, #0]
 8001376:	1c58      	adds	r0, r3, #1
 8001378:	6008      	str	r0, [r1, #0]
 800137a:	68d1      	ldr	r1, [r2, #12]
 800137c:	7019      	strb	r1, [r3, #0]
					if(--read_len <= 0)
 800137e:	4938      	ldr	r1, [pc, #224]	; (8001460 <SPI1_IRQHandler+0x1cc>)
 8001380:	680b      	ldr	r3, [r1, #0]
 8001382:	3b01      	subs	r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	600b      	str	r3, [r1, #0]
 8001388:	dc01      	bgt.n	800138e <SPI1_IRQHandler+0xfa>
						read_state = EEPROM_READ3_EXIT;
 800138a:	2308      	movs	r3, #8
 800138c:	e7b9      	b.n	8001302 <SPI1_IRQHandler+0x6e>
						SPI1->DR = 0x00; //Pull for Data
 800138e:	2300      	movs	r3, #0
 8001390:	60d3      	str	r3, [r2, #12]
 8001392:	e7b7      	b.n	8001304 <SPI1_IRQHandler+0x70>
				read_state = EEPROM_READ_INACTIVE;
 8001394:	2300      	movs	r3, #0
 8001396:	7023      	strb	r3, [r4, #0]
				coolD = 10;
 8001398:	230a      	movs	r3, #10
 800139a:	6013      	str	r3, [r2, #0]
				break;
 800139c:	e7b2      	b.n	8001304 <SPI1_IRQHandler+0x70>
		switch(write_state)
 800139e:	1e4b      	subs	r3, r1, #1
 80013a0:	2b06      	cmp	r3, #6
 80013a2:	d8af      	bhi.n	8001304 <SPI1_IRQHandler+0x70>
 80013a4:	e8df f003 	tbb	[pc, r3]
 80013a8:	1e130804 	.word	0x1e130804
 80013ac:	3429      	.short	0x3429
 80013ae:	4a          	.byte	0x4a
 80013af:	00          	.byte	0x00
					write_state = EEPROM_WRITE1_OPCODE;
 80013b0:	2302      	movs	r3, #2
					selectSlave(0);
 80013b2:	2000      	movs	r0, #0
					write_state = EEPROM_WRITE1_OPCODE;
 80013b4:	702b      	strb	r3, [r5, #0]
 80013b6:	e78e      	b.n	80012d6 <SPI1_IRQHandler+0x42>
				if(SPI1->SR & SPI_SR_TXE)
 80013b8:	4c22      	ldr	r4, [pc, #136]	; (8001444 <SPI1_IRQHandler+0x1b0>)
 80013ba:	68a3      	ldr	r3, [r4, #8]
 80013bc:	079b      	lsls	r3, r3, #30
 80013be:	d5a1      	bpl.n	8001304 <SPI1_IRQHandler+0x70>
					freeDR();
 80013c0:	f7ff fe5a 	bl	8001078 <freeDR>
					SPI1->DR = OPCODE_WRITE;
 80013c4:	2302      	movs	r3, #2
 80013c6:	60e3      	str	r3, [r4, #12]
					write_state = EEPROM_WRITE1A_ADR;
 80013c8:	2303      	movs	r3, #3
						write_state = EEPROM_WRITE3_EXIT;
 80013ca:	702b      	strb	r3, [r5, #0]
 80013cc:	e79a      	b.n	8001304 <SPI1_IRQHandler+0x70>
				if(SPI1->SR & SPI_SR_TXE)
 80013ce:	4c1d      	ldr	r4, [pc, #116]	; (8001444 <SPI1_IRQHandler+0x1b0>)
 80013d0:	68a3      	ldr	r3, [r4, #8]
 80013d2:	0798      	lsls	r0, r3, #30
 80013d4:	d596      	bpl.n	8001304 <SPI1_IRQHandler+0x70>
					freeDR();
 80013d6:	f7ff fe4f 	bl	8001078 <freeDR>
					SPI1->DR = (write_adr>>16)&0xFF;
 80013da:	4b22      	ldr	r3, [pc, #136]	; (8001464 <SPI1_IRQHandler+0x1d0>)
 80013dc:	789b      	ldrb	r3, [r3, #2]
 80013de:	60e3      	str	r3, [r4, #12]
					write_state = EEPROM_WRITE1B_ADR;
 80013e0:	2304      	movs	r3, #4
 80013e2:	e7f2      	b.n	80013ca <SPI1_IRQHandler+0x136>
				if(SPI1->SR & SPI_SR_TXE)
 80013e4:	4c17      	ldr	r4, [pc, #92]	; (8001444 <SPI1_IRQHandler+0x1b0>)
 80013e6:	68a3      	ldr	r3, [r4, #8]
 80013e8:	0799      	lsls	r1, r3, #30
 80013ea:	d58b      	bpl.n	8001304 <SPI1_IRQHandler+0x70>
					freeDR();
 80013ec:	f7ff fe44 	bl	8001078 <freeDR>
					SPI1->DR = (write_adr>>8)&0xFF;
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <SPI1_IRQHandler+0x1d0>)
 80013f2:	785b      	ldrb	r3, [r3, #1]
 80013f4:	60e3      	str	r3, [r4, #12]
					write_state = EEPROM_WRITE1C_ADR;
 80013f6:	2305      	movs	r3, #5
 80013f8:	e7e7      	b.n	80013ca <SPI1_IRQHandler+0x136>
				if(SPI1->SR & SPI_SR_TXE)
 80013fa:	4c12      	ldr	r4, [pc, #72]	; (8001444 <SPI1_IRQHandler+0x1b0>)
 80013fc:	68a3      	ldr	r3, [r4, #8]
 80013fe:	079a      	lsls	r2, r3, #30
 8001400:	d580      	bpl.n	8001304 <SPI1_IRQHandler+0x70>
					freeDR();
 8001402:	f7ff fe39 	bl	8001078 <freeDR>
					SPI1->DR = (write_adr)&0xFF;
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <SPI1_IRQHandler+0x1d0>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	60e3      	str	r3, [r4, #12]
					write_state = EEPROM_WRITE2_SEND;
 800140c:	2306      	movs	r3, #6
 800140e:	e7dc      	b.n	80013ca <SPI1_IRQHandler+0x136>
				if(SPI1->SR & SPI_SR_TXE)
 8001410:	4c0c      	ldr	r4, [pc, #48]	; (8001444 <SPI1_IRQHandler+0x1b0>)
 8001412:	68a3      	ldr	r3, [r4, #8]
 8001414:	079b      	lsls	r3, r3, #30
 8001416:	f57f af75 	bpl.w	8001304 <SPI1_IRQHandler+0x70>
					freeDR();
 800141a:	f7ff fe2d 	bl	8001078 <freeDR>
					SPI1->DR = *(write_sou++);
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <SPI1_IRQHandler+0x1d4>)
 8001420:	6813      	ldr	r3, [r2, #0]
 8001422:	1c59      	adds	r1, r3, #1
 8001424:	6011      	str	r1, [r2, #0]
 8001426:	781b      	ldrb	r3, [r3, #0]
					if(--write_len <= 0)
 8001428:	4a10      	ldr	r2, [pc, #64]	; (800146c <SPI1_IRQHandler+0x1d8>)
					SPI1->DR = *(write_sou++);
 800142a:	60e3      	str	r3, [r4, #12]
					if(--write_len <= 0)
 800142c:	6813      	ldr	r3, [r2, #0]
 800142e:	3b01      	subs	r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	f73f af66 	bgt.w	8001304 <SPI1_IRQHandler+0x70>
						write_state = EEPROM_WRITE3_EXIT;
 8001438:	2307      	movs	r3, #7
 800143a:	e7c6      	b.n	80013ca <SPI1_IRQHandler+0x136>
				write_state = EEPROM_WRITE_INACTIVE;
 800143c:	2300      	movs	r3, #0
 800143e:	702b      	strb	r3, [r5, #0]
 8001440:	e7aa      	b.n	8001398 <SPI1_IRQHandler+0x104>
 8001442:	bf00      	nop
 8001444:	40013000 	.word	0x40013000
 8001448:	20000050 	.word	0x20000050
 800144c:	20000048 	.word	0x20000048
 8001450:	2000002c 	.word	0x2000002c
 8001454:	2000004c 	.word	0x2000004c
 8001458:	20000040 	.word	0x20000040
 800145c:	2000003c 	.word	0x2000003c
 8001460:	20000038 	.word	0x20000038
 8001464:	20000034 	.word	0x20000034
 8001468:	20000030 	.word	0x20000030
 800146c:	20000044 	.word	0x20000044

08001470 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <SystemInit+0x40>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	f042 0201 	orr.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800147a:	6859      	ldr	r1, [r3, #4]
 800147c:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <SystemInit+0x44>)
 800147e:	400a      	ands	r2, r1
 8001480:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001488:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800148c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001494:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800149c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800149e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80014a2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80014a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <SystemInit+0x48>)
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	f8ff0000 	.word	0xf8ff0000
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014be:	e003      	b.n	80014c8 <LoopCopyDataInit>

080014c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80014c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80014c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80014c6:	3104      	adds	r1, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80014c8:	480a      	ldr	r0, [pc, #40]	; (80014f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80014cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014d0:	d3f6      	bcc.n	80014c0 <CopyDataInit>
  ldr r2, =_sbss
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014d4:	e002      	b.n	80014dc <LoopFillZerobss>

080014d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014d8:	f842 3b04 	str.w	r3, [r2], #4

080014dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014e0:	d3f9      	bcc.n	80014d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014e2:	f7ff ffc5 	bl	8001470 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e6:	f000 f80f 	bl	8001508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ea:	f7ff fe5b 	bl	80011a4 <main>
  bx lr
 80014ee:	4770      	bx	lr
  ldr r3, =_sidata
 80014f0:	080015ac 	.word	0x080015ac
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80014fc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001500:	200000ac 	.word	0x200000ac

08001504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC1_2_IRQHandler>
	...

08001508 <__libc_init_array>:
 8001508:	b570      	push	{r4, r5, r6, lr}
 800150a:	2500      	movs	r5, #0
 800150c:	4e0c      	ldr	r6, [pc, #48]	; (8001540 <__libc_init_array+0x38>)
 800150e:	4c0d      	ldr	r4, [pc, #52]	; (8001544 <__libc_init_array+0x3c>)
 8001510:	1ba4      	subs	r4, r4, r6
 8001512:	10a4      	asrs	r4, r4, #2
 8001514:	42a5      	cmp	r5, r4
 8001516:	d109      	bne.n	800152c <__libc_init_array+0x24>
 8001518:	f000 f81a 	bl	8001550 <_init>
 800151c:	2500      	movs	r5, #0
 800151e:	4e0a      	ldr	r6, [pc, #40]	; (8001548 <__libc_init_array+0x40>)
 8001520:	4c0a      	ldr	r4, [pc, #40]	; (800154c <__libc_init_array+0x44>)
 8001522:	1ba4      	subs	r4, r4, r6
 8001524:	10a4      	asrs	r4, r4, #2
 8001526:	42a5      	cmp	r5, r4
 8001528:	d105      	bne.n	8001536 <__libc_init_array+0x2e>
 800152a:	bd70      	pop	{r4, r5, r6, pc}
 800152c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001530:	4798      	blx	r3
 8001532:	3501      	adds	r5, #1
 8001534:	e7ee      	b.n	8001514 <__libc_init_array+0xc>
 8001536:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800153a:	4798      	blx	r3
 800153c:	3501      	adds	r5, #1
 800153e:	e7f2      	b.n	8001526 <__libc_init_array+0x1e>
 8001540:	080015a4 	.word	0x080015a4
 8001544:	080015a4 	.word	0x080015a4
 8001548:	080015a4 	.word	0x080015a4
 800154c:	080015a8 	.word	0x080015a8

08001550 <_init>:
 8001550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001552:	bf00      	nop
 8001554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001556:	bc08      	pop	{r3}
 8001558:	469e      	mov	lr, r3
 800155a:	4770      	bx	lr

0800155c <_fini>:
 800155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800155e:	bf00      	nop
 8001560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001562:	bc08      	pop	{r3}
 8001564:	469e      	mov	lr, r3
 8001566:	4770      	bx	lr
