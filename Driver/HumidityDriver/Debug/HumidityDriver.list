
HumidityDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e54  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000f60  08000f60  00010f60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000f80  08000f80  00010f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000f84  08000f84  00010f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08000f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000000c  08000f94  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000002c  08000f94  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b19b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001cfb  00000000  00000000  0002b1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a5c  00000000  00000000  0002cecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000460  00000000  00000000  0002e928  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000558  00000000  00000000  0002ed88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002ef9  00000000  00000000  0002f2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001d04  00000000  00000000  000321d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00033edd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000a14  00000000  00000000  00033f5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000f48 	.word	0x08000f48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000f48 	.word	0x08000f48

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f9a4 	bl	80004b0 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f966 	bl	8000448 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <HAL_Init+0x1c>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f93f 	bl	8000424 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
}
 80001ac:	2000      	movs	r0, #0
 80001ae:	bd08      	pop	{r3, pc}
 80001b0:	40022000 	.word	0x40022000

080001b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b4:	4a03      	ldr	r2, [pc, #12]	; (80001c4 <HAL_IncTick+0x10>)
 80001b6:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <HAL_IncTick+0x14>)
 80001b8:	6811      	ldr	r1, [r2, #0]
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	440b      	add	r3, r1
 80001be:	6013      	str	r3, [r2, #0]
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	20000028 	.word	0x20000028
 80001c8:	20000000 	.word	0x20000000

080001cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001cc:	4b01      	ldr	r3, [pc, #4]	; (80001d4 <HAL_GetTick+0x8>)
 80001ce:	6818      	ldr	r0, [r3, #0]
}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000028 	.word	0x20000028

080001d8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80001d8:	2300      	movs	r3, #0
{ 
 80001da:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80001dc:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80001de:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d074      	beq.n	80002d0 <HAL_ADC_ConfigChannel+0xf8>
 80001e6:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80001e8:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80001ea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80001ee:	2d06      	cmp	r5, #6
 80001f0:	6802      	ldr	r2, [r0, #0]
 80001f2:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80001f6:	680c      	ldr	r4, [r1, #0]
 80001f8:	d825      	bhi.n	8000246 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80001fa:	442b      	add	r3, r5
 80001fc:	251f      	movs	r5, #31
 80001fe:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000200:	3b05      	subs	r3, #5
 8000202:	409d      	lsls	r5, r3
 8000204:	ea26 0505 	bic.w	r5, r6, r5
 8000208:	fa04 f303 	lsl.w	r3, r4, r3
 800020c:	432b      	orrs	r3, r5
 800020e:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000210:	2c09      	cmp	r4, #9
 8000212:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000216:	688d      	ldr	r5, [r1, #8]
 8000218:	d92f      	bls.n	800027a <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800021a:	2607      	movs	r6, #7
 800021c:	4423      	add	r3, r4
 800021e:	68d1      	ldr	r1, [r2, #12]
 8000220:	3b1e      	subs	r3, #30
 8000222:	409e      	lsls	r6, r3
 8000224:	ea21 0106 	bic.w	r1, r1, r6
 8000228:	fa05 f303 	lsl.w	r3, r5, r3
 800022c:	430b      	orrs	r3, r1
 800022e:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000230:	f1a4 0310 	sub.w	r3, r4, #16
 8000234:	2b01      	cmp	r3, #1
 8000236:	d92b      	bls.n	8000290 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000238:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800023a:	2200      	movs	r2, #0
 800023c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000240:	4618      	mov	r0, r3
 8000242:	b002      	add	sp, #8
 8000244:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000246:	2d0c      	cmp	r5, #12
 8000248:	d80b      	bhi.n	8000262 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800024a:	442b      	add	r3, r5
 800024c:	251f      	movs	r5, #31
 800024e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000250:	3b23      	subs	r3, #35	; 0x23
 8000252:	409d      	lsls	r5, r3
 8000254:	ea26 0505 	bic.w	r5, r6, r5
 8000258:	fa04 f303 	lsl.w	r3, r4, r3
 800025c:	432b      	orrs	r3, r5
 800025e:	6313      	str	r3, [r2, #48]	; 0x30
 8000260:	e7d6      	b.n	8000210 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000262:	442b      	add	r3, r5
 8000264:	251f      	movs	r5, #31
 8000266:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000268:	3b41      	subs	r3, #65	; 0x41
 800026a:	409d      	lsls	r5, r3
 800026c:	ea26 0505 	bic.w	r5, r6, r5
 8000270:	fa04 f303 	lsl.w	r3, r4, r3
 8000274:	432b      	orrs	r3, r5
 8000276:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000278:	e7ca      	b.n	8000210 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800027a:	2607      	movs	r6, #7
 800027c:	6911      	ldr	r1, [r2, #16]
 800027e:	4423      	add	r3, r4
 8000280:	409e      	lsls	r6, r3
 8000282:	ea21 0106 	bic.w	r1, r1, r6
 8000286:	fa05 f303 	lsl.w	r3, r5, r3
 800028a:	430b      	orrs	r3, r1
 800028c:	6113      	str	r3, [r2, #16]
 800028e:	e7cf      	b.n	8000230 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000290:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <HAL_ADC_ConfigChannel+0xfc>)
 8000292:	429a      	cmp	r2, r3
 8000294:	d116      	bne.n	80002c4 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000296:	6893      	ldr	r3, [r2, #8]
 8000298:	021b      	lsls	r3, r3, #8
 800029a:	d4cd      	bmi.n	8000238 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800029c:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800029e:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002a4:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002a6:	d1c7      	bne.n	8000238 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <HAL_ADC_ConfigChannel+0x100>)
 80002aa:	4a0c      	ldr	r2, [pc, #48]	; (80002dc <HAL_ADC_ConfigChannel+0x104>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80002b2:	230a      	movs	r3, #10
 80002b4:	4353      	muls	r3, r2
            wait_loop_index--;
 80002b6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80002b8:	9b01      	ldr	r3, [sp, #4]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d0bc      	beq.n	8000238 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80002be:	9b01      	ldr	r3, [sp, #4]
 80002c0:	3b01      	subs	r3, #1
 80002c2:	e7f8      	b.n	80002b6 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002cc:	2301      	movs	r3, #1
 80002ce:	e7b4      	b.n	800023a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80002d0:	2302      	movs	r3, #2
 80002d2:	e7b5      	b.n	8000240 <HAL_ADC_ConfigChannel+0x68>
 80002d4:	40012400 	.word	0x40012400
 80002d8:	20000008 	.word	0x20000008
 80002dc:	000f4240 	.word	0x000f4240

080002e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80002e0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002e2:	6803      	ldr	r3, [r0, #0]
{
 80002e4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002e6:	689a      	ldr	r2, [r3, #8]
 80002e8:	07d2      	lsls	r2, r2, #31
 80002ea:	d401      	bmi.n	80002f0 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80002ec:	2000      	movs	r0, #0
 80002ee:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80002f0:	689a      	ldr	r2, [r3, #8]
 80002f2:	f022 0201 	bic.w	r2, r2, #1
 80002f6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80002f8:	f7ff ff68 	bl	80001cc <HAL_GetTick>
 80002fc:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80002fe:	6823      	ldr	r3, [r4, #0]
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	07db      	lsls	r3, r3, #31
 8000304:	d5f2      	bpl.n	80002ec <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000306:	f7ff ff61 	bl	80001cc <HAL_GetTick>
 800030a:	1b40      	subs	r0, r0, r5
 800030c:	2802      	cmp	r0, #2
 800030e:	d9f6      	bls.n	80002fe <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000310:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000312:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000314:	f043 0310 	orr.w	r3, r3, #16
 8000318:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800031a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000322:	bd38      	pop	{r3, r4, r5, pc}

08000324 <HAL_ADC_Init>:
{
 8000324:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000326:	4604      	mov	r4, r0
 8000328:	2800      	cmp	r0, #0
 800032a:	d071      	beq.n	8000410 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800032c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800032e:	b923      	cbnz	r3, 800033a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000330:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000332:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000336:	f000 fd67 	bl	8000e08 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800033a:	4620      	mov	r0, r4
 800033c:	f7ff ffd0 	bl	80002e0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000340:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000342:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000346:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000348:	d164      	bne.n	8000414 <HAL_ADC_Init+0xf0>
 800034a:	2800      	cmp	r0, #0
 800034c:	d162      	bne.n	8000414 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800034e:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000350:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000354:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000356:	f023 0302 	bic.w	r3, r3, #2
 800035a:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800035e:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000360:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000362:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000364:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000366:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800036a:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800036e:	d038      	beq.n	80003e2 <HAL_ADC_Init+0xbe>
 8000370:	2901      	cmp	r1, #1
 8000372:	bf14      	ite	ne
 8000374:	4606      	movne	r6, r0
 8000376:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800037a:	6965      	ldr	r5, [r4, #20]
 800037c:	2d01      	cmp	r5, #1
 800037e:	d107      	bne.n	8000390 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000380:	2b00      	cmp	r3, #0
 8000382:	d130      	bne.n	80003e6 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000384:	69a3      	ldr	r3, [r4, #24]
 8000386:	3b01      	subs	r3, #1
 8000388:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 800038c:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000390:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000392:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000396:	685d      	ldr	r5, [r3, #4]
 8000398:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800039c:	ea45 0506 	orr.w	r5, r5, r6
 80003a0:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80003a2:	689e      	ldr	r6, [r3, #8]
 80003a4:	4d1d      	ldr	r5, [pc, #116]	; (800041c <HAL_ADC_Init+0xf8>)
 80003a6:	ea05 0506 	and.w	r5, r5, r6
 80003aa:	ea45 0502 	orr.w	r5, r5, r2
 80003ae:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003b0:	d001      	beq.n	80003b6 <HAL_ADC_Init+0x92>
 80003b2:	2901      	cmp	r1, #1
 80003b4:	d120      	bne.n	80003f8 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80003b6:	6921      	ldr	r1, [r4, #16]
 80003b8:	3901      	subs	r1, #1
 80003ba:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80003bc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80003be:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80003c2:	4329      	orrs	r1, r5
 80003c4:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003c6:	6899      	ldr	r1, [r3, #8]
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <HAL_ADC_Init+0xfc>)
 80003ca:	400b      	ands	r3, r1
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d115      	bne.n	80003fc <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80003d0:	2300      	movs	r3, #0
 80003d2:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80003d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003d6:	f023 0303 	bic.w	r3, r3, #3
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	62a3      	str	r3, [r4, #40]	; 0x28
 80003e0:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80003e2:	460e      	mov	r6, r1
 80003e4:	e7c9      	b.n	800037a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003e8:	f043 0320 	orr.w	r3, r3, #32
 80003ec:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80003f6:	e7cb      	b.n	8000390 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80003f8:	2100      	movs	r1, #0
 80003fa:	e7df      	b.n	80003bc <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80003fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003fe:	f023 0312 	bic.w	r3, r3, #18
 8000402:	f043 0310 	orr.w	r3, r3, #16
 8000406:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000408:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000410:	2001      	movs	r0, #1
}
 8000412:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000414:	f043 0310 	orr.w	r3, r3, #16
 8000418:	62a3      	str	r3, [r4, #40]	; 0x28
 800041a:	e7f9      	b.n	8000410 <HAL_ADC_Init+0xec>
 800041c:	ffe1f7fd 	.word	0xffe1f7fd
 8000420:	ff1f0efe 	.word	0xff1f0efe

08000424 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000424:	4a07      	ldr	r2, [pc, #28]	; (8000444 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000426:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000428:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800042a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800042e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000432:	041b      	lsls	r3, r3, #16
 8000434:	0c1b      	lsrs	r3, r3, #16
 8000436:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800043a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800043e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000440:	60d3      	str	r3, [r2, #12]
 8000442:	4770      	bx	lr
 8000444:	e000ed00 	.word	0xe000ed00

08000448 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000448:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	68dc      	ldr	r4, [r3, #12]
 800044e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000452:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000456:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000458:	2b04      	cmp	r3, #4
 800045a:	bf28      	it	cs
 800045c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800045e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000460:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000464:	bf98      	it	ls
 8000466:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000468:	fa05 f303 	lsl.w	r3, r5, r3
 800046c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000470:	bf88      	it	hi
 8000472:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000474:	4019      	ands	r1, r3
 8000476:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000478:	fa05 f404 	lsl.w	r4, r5, r4
 800047c:	3c01      	subs	r4, #1
 800047e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000480:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000482:	ea42 0201 	orr.w	r2, r2, r1
 8000486:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800048a:	bfaf      	iteee	ge
 800048c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000490:	4b06      	ldrlt	r3, [pc, #24]	; (80004ac <HAL_NVIC_SetPriority+0x64>)
 8000492:	f000 000f 	andlt.w	r0, r0, #15
 8000496:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000498:	bfa5      	ittet	ge
 800049a:	b2d2      	uxtbge	r2, r2
 800049c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a0:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80004a6:	bd30      	pop	{r4, r5, pc}
 80004a8:	e000ed00 	.word	0xe000ed00
 80004ac:	e000ed14 	.word	0xe000ed14

080004b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004b0:	3801      	subs	r0, #1
 80004b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004b6:	d20a      	bcs.n	80004ce <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004bc:	4a06      	ldr	r2, [pc, #24]	; (80004d8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004be:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004c4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004c6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004c8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004ce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	e000e010 	.word	0xe000e010
 80004d8:	e000ed00 	.word	0xe000ed00

080004dc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80004de:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	bf0c      	ite	eq
 80004e4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80004e8:	f022 0204 	bicne.w	r2, r2, #4
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	4770      	bx	lr
 80004f0:	e000e010 	.word	0xe000e010

080004f4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80004f4:	4770      	bx	lr

080004f6 <HAL_SYSTICK_IRQHandler>:
{
 80004f6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80004f8:	f7ff fffc 	bl	80004f4 <HAL_SYSTICK_Callback>
 80004fc:	bd08      	pop	{r3, pc}
	...

08000500 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000504:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000506:	4616      	mov	r6, r2
 8000508:	4b65      	ldr	r3, [pc, #404]	; (80006a0 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800050a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80006b0 <HAL_GPIO_Init+0x1b0>
 800050e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80006b4 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000512:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000516:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000518:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800051c:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000520:	45a0      	cmp	r8, r4
 8000522:	d17f      	bne.n	8000624 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000524:	684d      	ldr	r5, [r1, #4]
 8000526:	2d12      	cmp	r5, #18
 8000528:	f000 80af 	beq.w	800068a <HAL_GPIO_Init+0x18a>
 800052c:	f200 8088 	bhi.w	8000640 <HAL_GPIO_Init+0x140>
 8000530:	2d02      	cmp	r5, #2
 8000532:	f000 80a7 	beq.w	8000684 <HAL_GPIO_Init+0x184>
 8000536:	d87c      	bhi.n	8000632 <HAL_GPIO_Init+0x132>
 8000538:	2d00      	cmp	r5, #0
 800053a:	f000 808e 	beq.w	800065a <HAL_GPIO_Init+0x15a>
 800053e:	2d01      	cmp	r5, #1
 8000540:	f000 809e 	beq.w	8000680 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000544:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000548:	2cff      	cmp	r4, #255	; 0xff
 800054a:	bf93      	iteet	ls
 800054c:	4682      	movls	sl, r0
 800054e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000552:	3d08      	subhi	r5, #8
 8000554:	f8d0 b000 	ldrls.w	fp, [r0]
 8000558:	bf92      	itee	ls
 800055a:	00b5      	lslls	r5, r6, #2
 800055c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000560:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000562:	fa09 f805 	lsl.w	r8, r9, r5
 8000566:	ea2b 0808 	bic.w	r8, fp, r8
 800056a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800056e:	bf88      	it	hi
 8000570:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000574:	ea48 0505 	orr.w	r5, r8, r5
 8000578:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800057c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000580:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000584:	d04e      	beq.n	8000624 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000586:	4d47      	ldr	r5, [pc, #284]	; (80006a4 <HAL_GPIO_Init+0x1a4>)
 8000588:	4f46      	ldr	r7, [pc, #280]	; (80006a4 <HAL_GPIO_Init+0x1a4>)
 800058a:	69ad      	ldr	r5, [r5, #24]
 800058c:	f026 0803 	bic.w	r8, r6, #3
 8000590:	f045 0501 	orr.w	r5, r5, #1
 8000594:	61bd      	str	r5, [r7, #24]
 8000596:	69bd      	ldr	r5, [r7, #24]
 8000598:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800059c:	f005 0501 	and.w	r5, r5, #1
 80005a0:	9501      	str	r5, [sp, #4]
 80005a2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005a6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005aa:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005ac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80005b0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005b4:	fa09 f90b 	lsl.w	r9, r9, fp
 80005b8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005bc:	4d3a      	ldr	r5, [pc, #232]	; (80006a8 <HAL_GPIO_Init+0x1a8>)
 80005be:	42a8      	cmp	r0, r5
 80005c0:	d068      	beq.n	8000694 <HAL_GPIO_Init+0x194>
 80005c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005c6:	42a8      	cmp	r0, r5
 80005c8:	d066      	beq.n	8000698 <HAL_GPIO_Init+0x198>
 80005ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005ce:	42a8      	cmp	r0, r5
 80005d0:	d064      	beq.n	800069c <HAL_GPIO_Init+0x19c>
 80005d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005d6:	42a8      	cmp	r0, r5
 80005d8:	bf0c      	ite	eq
 80005da:	2503      	moveq	r5, #3
 80005dc:	2504      	movne	r5, #4
 80005de:	fa05 f50b 	lsl.w	r5, r5, fp
 80005e2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80005e6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005ea:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005ec:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80005f0:	bf14      	ite	ne
 80005f2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005f4:	43a5      	biceq	r5, r4
 80005f6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80005f8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005fa:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80005fe:	bf14      	ite	ne
 8000600:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000602:	43a5      	biceq	r5, r4
 8000604:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000606:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000608:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800060c:	bf14      	ite	ne
 800060e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000610:	43a5      	biceq	r5, r4
 8000612:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000614:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000616:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800061a:	bf14      	ite	ne
 800061c:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800061e:	ea25 0404 	biceq.w	r4, r5, r4
 8000622:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000624:	3601      	adds	r6, #1
 8000626:	2e10      	cmp	r6, #16
 8000628:	f47f af73 	bne.w	8000512 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 800062c:	b003      	add	sp, #12
 800062e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000632:	2d03      	cmp	r5, #3
 8000634:	d022      	beq.n	800067c <HAL_GPIO_Init+0x17c>
 8000636:	2d11      	cmp	r5, #17
 8000638:	d184      	bne.n	8000544 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800063a:	68ca      	ldr	r2, [r1, #12]
 800063c:	3204      	adds	r2, #4
          break;
 800063e:	e781      	b.n	8000544 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000640:	4f1a      	ldr	r7, [pc, #104]	; (80006ac <HAL_GPIO_Init+0x1ac>)
 8000642:	42bd      	cmp	r5, r7
 8000644:	d009      	beq.n	800065a <HAL_GPIO_Init+0x15a>
 8000646:	d812      	bhi.n	800066e <HAL_GPIO_Init+0x16e>
 8000648:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80006b8 <HAL_GPIO_Init+0x1b8>
 800064c:	454d      	cmp	r5, r9
 800064e:	d004      	beq.n	800065a <HAL_GPIO_Init+0x15a>
 8000650:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000654:	454d      	cmp	r5, r9
 8000656:	f47f af75 	bne.w	8000544 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800065a:	688a      	ldr	r2, [r1, #8]
 800065c:	b1c2      	cbz	r2, 8000690 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800065e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000660:	bf0c      	ite	eq
 8000662:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000666:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800066a:	2208      	movs	r2, #8
 800066c:	e76a      	b.n	8000544 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800066e:	4575      	cmp	r5, lr
 8000670:	d0f3      	beq.n	800065a <HAL_GPIO_Init+0x15a>
 8000672:	4565      	cmp	r5, ip
 8000674:	d0f1      	beq.n	800065a <HAL_GPIO_Init+0x15a>
 8000676:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80006bc <HAL_GPIO_Init+0x1bc>
 800067a:	e7eb      	b.n	8000654 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800067c:	2200      	movs	r2, #0
 800067e:	e761      	b.n	8000544 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000680:	68ca      	ldr	r2, [r1, #12]
          break;
 8000682:	e75f      	b.n	8000544 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000684:	68ca      	ldr	r2, [r1, #12]
 8000686:	3208      	adds	r2, #8
          break;
 8000688:	e75c      	b.n	8000544 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800068a:	68ca      	ldr	r2, [r1, #12]
 800068c:	320c      	adds	r2, #12
          break;
 800068e:	e759      	b.n	8000544 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000690:	2204      	movs	r2, #4
 8000692:	e757      	b.n	8000544 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000694:	2500      	movs	r5, #0
 8000696:	e7a2      	b.n	80005de <HAL_GPIO_Init+0xde>
 8000698:	2501      	movs	r5, #1
 800069a:	e7a0      	b.n	80005de <HAL_GPIO_Init+0xde>
 800069c:	2502      	movs	r5, #2
 800069e:	e79e      	b.n	80005de <HAL_GPIO_Init+0xde>
 80006a0:	40010400 	.word	0x40010400
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010800 	.word	0x40010800
 80006ac:	10210000 	.word	0x10210000
 80006b0:	10310000 	.word	0x10310000
 80006b4:	10320000 	.word	0x10320000
 80006b8:	10110000 	.word	0x10110000
 80006bc:	10220000 	.word	0x10220000

080006c0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006c0:	6803      	ldr	r3, [r0, #0]
{
 80006c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006c6:	07db      	lsls	r3, r3, #31
{
 80006c8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006ca:	d410      	bmi.n	80006ee <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80006cc:	682b      	ldr	r3, [r5, #0]
 80006ce:	079f      	lsls	r7, r3, #30
 80006d0:	d45e      	bmi.n	8000790 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006d2:	682b      	ldr	r3, [r5, #0]
 80006d4:	0719      	lsls	r1, r3, #28
 80006d6:	f100 8095 	bmi.w	8000804 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006da:	682b      	ldr	r3, [r5, #0]
 80006dc:	075a      	lsls	r2, r3, #29
 80006de:	f100 80bf 	bmi.w	8000860 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80006e2:	69ea      	ldr	r2, [r5, #28]
 80006e4:	2a00      	cmp	r2, #0
 80006e6:	f040 812d 	bne.w	8000944 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80006ea:	2000      	movs	r0, #0
 80006ec:	e014      	b.n	8000718 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80006ee:	4c90      	ldr	r4, [pc, #576]	; (8000930 <HAL_RCC_OscConfig+0x270>)
 80006f0:	6863      	ldr	r3, [r4, #4]
 80006f2:	f003 030c 	and.w	r3, r3, #12
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	d007      	beq.n	800070a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80006fa:	6863      	ldr	r3, [r4, #4]
 80006fc:	f003 030c 	and.w	r3, r3, #12
 8000700:	2b08      	cmp	r3, #8
 8000702:	d10c      	bne.n	800071e <HAL_RCC_OscConfig+0x5e>
 8000704:	6863      	ldr	r3, [r4, #4]
 8000706:	03de      	lsls	r6, r3, #15
 8000708:	d509      	bpl.n	800071e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800070a:	6823      	ldr	r3, [r4, #0]
 800070c:	039c      	lsls	r4, r3, #14
 800070e:	d5dd      	bpl.n	80006cc <HAL_RCC_OscConfig+0xc>
 8000710:	686b      	ldr	r3, [r5, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1da      	bne.n	80006cc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000716:	2001      	movs	r0, #1
}
 8000718:	b002      	add	sp, #8
 800071a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800071e:	686b      	ldr	r3, [r5, #4]
 8000720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000724:	d110      	bne.n	8000748 <HAL_RCC_OscConfig+0x88>
 8000726:	6823      	ldr	r3, [r4, #0]
 8000728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800072c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800072e:	f7ff fd4d 	bl	80001cc <HAL_GetTick>
 8000732:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000734:	6823      	ldr	r3, [r4, #0]
 8000736:	0398      	lsls	r0, r3, #14
 8000738:	d4c8      	bmi.n	80006cc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800073a:	f7ff fd47 	bl	80001cc <HAL_GetTick>
 800073e:	1b80      	subs	r0, r0, r6
 8000740:	2864      	cmp	r0, #100	; 0x64
 8000742:	d9f7      	bls.n	8000734 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000744:	2003      	movs	r0, #3
 8000746:	e7e7      	b.n	8000718 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000748:	b99b      	cbnz	r3, 8000772 <HAL_RCC_OscConfig+0xb2>
 800074a:	6823      	ldr	r3, [r4, #0]
 800074c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000750:	6023      	str	r3, [r4, #0]
 8000752:	6823      	ldr	r3, [r4, #0]
 8000754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000758:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800075a:	f7ff fd37 	bl	80001cc <HAL_GetTick>
 800075e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000760:	6823      	ldr	r3, [r4, #0]
 8000762:	0399      	lsls	r1, r3, #14
 8000764:	d5b2      	bpl.n	80006cc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000766:	f7ff fd31 	bl	80001cc <HAL_GetTick>
 800076a:	1b80      	subs	r0, r0, r6
 800076c:	2864      	cmp	r0, #100	; 0x64
 800076e:	d9f7      	bls.n	8000760 <HAL_RCC_OscConfig+0xa0>
 8000770:	e7e8      	b.n	8000744 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000772:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000776:	6823      	ldr	r3, [r4, #0]
 8000778:	d103      	bne.n	8000782 <HAL_RCC_OscConfig+0xc2>
 800077a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800077e:	6023      	str	r3, [r4, #0]
 8000780:	e7d1      	b.n	8000726 <HAL_RCC_OscConfig+0x66>
 8000782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000786:	6023      	str	r3, [r4, #0]
 8000788:	6823      	ldr	r3, [r4, #0]
 800078a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800078e:	e7cd      	b.n	800072c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000790:	4c67      	ldr	r4, [pc, #412]	; (8000930 <HAL_RCC_OscConfig+0x270>)
 8000792:	6863      	ldr	r3, [r4, #4]
 8000794:	f013 0f0c 	tst.w	r3, #12
 8000798:	d007      	beq.n	80007aa <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800079a:	6863      	ldr	r3, [r4, #4]
 800079c:	f003 030c 	and.w	r3, r3, #12
 80007a0:	2b08      	cmp	r3, #8
 80007a2:	d110      	bne.n	80007c6 <HAL_RCC_OscConfig+0x106>
 80007a4:	6863      	ldr	r3, [r4, #4]
 80007a6:	03da      	lsls	r2, r3, #15
 80007a8:	d40d      	bmi.n	80007c6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007aa:	6823      	ldr	r3, [r4, #0]
 80007ac:	079b      	lsls	r3, r3, #30
 80007ae:	d502      	bpl.n	80007b6 <HAL_RCC_OscConfig+0xf6>
 80007b0:	692b      	ldr	r3, [r5, #16]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d1af      	bne.n	8000716 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007b6:	6823      	ldr	r3, [r4, #0]
 80007b8:	696a      	ldr	r2, [r5, #20]
 80007ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80007be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80007c2:	6023      	str	r3, [r4, #0]
 80007c4:	e785      	b.n	80006d2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007c6:	692a      	ldr	r2, [r5, #16]
 80007c8:	4b5a      	ldr	r3, [pc, #360]	; (8000934 <HAL_RCC_OscConfig+0x274>)
 80007ca:	b16a      	cbz	r2, 80007e8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80007cc:	2201      	movs	r2, #1
 80007ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007d0:	f7ff fcfc 	bl	80001cc <HAL_GetTick>
 80007d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007d6:	6823      	ldr	r3, [r4, #0]
 80007d8:	079f      	lsls	r7, r3, #30
 80007da:	d4ec      	bmi.n	80007b6 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007dc:	f7ff fcf6 	bl	80001cc <HAL_GetTick>
 80007e0:	1b80      	subs	r0, r0, r6
 80007e2:	2802      	cmp	r0, #2
 80007e4:	d9f7      	bls.n	80007d6 <HAL_RCC_OscConfig+0x116>
 80007e6:	e7ad      	b.n	8000744 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80007e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007ea:	f7ff fcef 	bl	80001cc <HAL_GetTick>
 80007ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	0798      	lsls	r0, r3, #30
 80007f4:	f57f af6d 	bpl.w	80006d2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007f8:	f7ff fce8 	bl	80001cc <HAL_GetTick>
 80007fc:	1b80      	subs	r0, r0, r6
 80007fe:	2802      	cmp	r0, #2
 8000800:	d9f6      	bls.n	80007f0 <HAL_RCC_OscConfig+0x130>
 8000802:	e79f      	b.n	8000744 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000804:	69aa      	ldr	r2, [r5, #24]
 8000806:	4c4a      	ldr	r4, [pc, #296]	; (8000930 <HAL_RCC_OscConfig+0x270>)
 8000808:	4b4b      	ldr	r3, [pc, #300]	; (8000938 <HAL_RCC_OscConfig+0x278>)
 800080a:	b1da      	cbz	r2, 8000844 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000810:	f7ff fcdc 	bl	80001cc <HAL_GetTick>
 8000814:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000818:	079b      	lsls	r3, r3, #30
 800081a:	d50d      	bpl.n	8000838 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800081c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000820:	4b46      	ldr	r3, [pc, #280]	; (800093c <HAL_RCC_OscConfig+0x27c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	fbb3 f3f2 	udiv	r3, r3, r2
 8000828:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800082a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800082c:	9b01      	ldr	r3, [sp, #4]
 800082e:	1e5a      	subs	r2, r3, #1
 8000830:	9201      	str	r2, [sp, #4]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1f9      	bne.n	800082a <HAL_RCC_OscConfig+0x16a>
 8000836:	e750      	b.n	80006da <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000838:	f7ff fcc8 	bl	80001cc <HAL_GetTick>
 800083c:	1b80      	subs	r0, r0, r6
 800083e:	2802      	cmp	r0, #2
 8000840:	d9e9      	bls.n	8000816 <HAL_RCC_OscConfig+0x156>
 8000842:	e77f      	b.n	8000744 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000844:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000846:	f7ff fcc1 	bl	80001cc <HAL_GetTick>
 800084a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800084c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800084e:	079f      	lsls	r7, r3, #30
 8000850:	f57f af43 	bpl.w	80006da <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000854:	f7ff fcba 	bl	80001cc <HAL_GetTick>
 8000858:	1b80      	subs	r0, r0, r6
 800085a:	2802      	cmp	r0, #2
 800085c:	d9f6      	bls.n	800084c <HAL_RCC_OscConfig+0x18c>
 800085e:	e771      	b.n	8000744 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000860:	4c33      	ldr	r4, [pc, #204]	; (8000930 <HAL_RCC_OscConfig+0x270>)
 8000862:	69e3      	ldr	r3, [r4, #28]
 8000864:	00d8      	lsls	r0, r3, #3
 8000866:	d424      	bmi.n	80008b2 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000868:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	69e3      	ldr	r3, [r4, #28]
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	61e3      	str	r3, [r4, #28]
 8000872:	69e3      	ldr	r3, [r4, #28]
 8000874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800087c:	4e30      	ldr	r6, [pc, #192]	; (8000940 <HAL_RCC_OscConfig+0x280>)
 800087e:	6833      	ldr	r3, [r6, #0]
 8000880:	05d9      	lsls	r1, r3, #23
 8000882:	d518      	bpl.n	80008b6 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000884:	68eb      	ldr	r3, [r5, #12]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d126      	bne.n	80008d8 <HAL_RCC_OscConfig+0x218>
 800088a:	6a23      	ldr	r3, [r4, #32]
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000892:	f7ff fc9b 	bl	80001cc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000896:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800089a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800089c:	6a23      	ldr	r3, [r4, #32]
 800089e:	079b      	lsls	r3, r3, #30
 80008a0:	d53f      	bpl.n	8000922 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80008a2:	2f00      	cmp	r7, #0
 80008a4:	f43f af1d 	beq.w	80006e2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008a8:	69e3      	ldr	r3, [r4, #28]
 80008aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008ae:	61e3      	str	r3, [r4, #28]
 80008b0:	e717      	b.n	80006e2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80008b2:	2700      	movs	r7, #0
 80008b4:	e7e2      	b.n	800087c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008b6:	6833      	ldr	r3, [r6, #0]
 80008b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008bc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80008be:	f7ff fc85 	bl	80001cc <HAL_GetTick>
 80008c2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008c4:	6833      	ldr	r3, [r6, #0]
 80008c6:	05da      	lsls	r2, r3, #23
 80008c8:	d4dc      	bmi.n	8000884 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008ca:	f7ff fc7f 	bl	80001cc <HAL_GetTick>
 80008ce:	eba0 0008 	sub.w	r0, r0, r8
 80008d2:	2864      	cmp	r0, #100	; 0x64
 80008d4:	d9f6      	bls.n	80008c4 <HAL_RCC_OscConfig+0x204>
 80008d6:	e735      	b.n	8000744 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008d8:	b9ab      	cbnz	r3, 8000906 <HAL_RCC_OscConfig+0x246>
 80008da:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008dc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008e0:	f023 0301 	bic.w	r3, r3, #1
 80008e4:	6223      	str	r3, [r4, #32]
 80008e6:	6a23      	ldr	r3, [r4, #32]
 80008e8:	f023 0304 	bic.w	r3, r3, #4
 80008ec:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008ee:	f7ff fc6d 	bl	80001cc <HAL_GetTick>
 80008f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008f4:	6a23      	ldr	r3, [r4, #32]
 80008f6:	0798      	lsls	r0, r3, #30
 80008f8:	d5d3      	bpl.n	80008a2 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008fa:	f7ff fc67 	bl	80001cc <HAL_GetTick>
 80008fe:	1b80      	subs	r0, r0, r6
 8000900:	4540      	cmp	r0, r8
 8000902:	d9f7      	bls.n	80008f4 <HAL_RCC_OscConfig+0x234>
 8000904:	e71e      	b.n	8000744 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000906:	2b05      	cmp	r3, #5
 8000908:	6a23      	ldr	r3, [r4, #32]
 800090a:	d103      	bne.n	8000914 <HAL_RCC_OscConfig+0x254>
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6223      	str	r3, [r4, #32]
 8000912:	e7ba      	b.n	800088a <HAL_RCC_OscConfig+0x1ca>
 8000914:	f023 0301 	bic.w	r3, r3, #1
 8000918:	6223      	str	r3, [r4, #32]
 800091a:	6a23      	ldr	r3, [r4, #32]
 800091c:	f023 0304 	bic.w	r3, r3, #4
 8000920:	e7b6      	b.n	8000890 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000922:	f7ff fc53 	bl	80001cc <HAL_GetTick>
 8000926:	eba0 0008 	sub.w	r0, r0, r8
 800092a:	42b0      	cmp	r0, r6
 800092c:	d9b6      	bls.n	800089c <HAL_RCC_OscConfig+0x1dc>
 800092e:	e709      	b.n	8000744 <HAL_RCC_OscConfig+0x84>
 8000930:	40021000 	.word	0x40021000
 8000934:	42420000 	.word	0x42420000
 8000938:	42420480 	.word	0x42420480
 800093c:	20000008 	.word	0x20000008
 8000940:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000944:	4c22      	ldr	r4, [pc, #136]	; (80009d0 <HAL_RCC_OscConfig+0x310>)
 8000946:	6863      	ldr	r3, [r4, #4]
 8000948:	f003 030c 	and.w	r3, r3, #12
 800094c:	2b08      	cmp	r3, #8
 800094e:	f43f aee2 	beq.w	8000716 <HAL_RCC_OscConfig+0x56>
 8000952:	2300      	movs	r3, #0
 8000954:	4e1f      	ldr	r6, [pc, #124]	; (80009d4 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000956:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000958:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800095a:	d12b      	bne.n	80009b4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800095c:	f7ff fc36 	bl	80001cc <HAL_GetTick>
 8000960:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000962:	6823      	ldr	r3, [r4, #0]
 8000964:	0199      	lsls	r1, r3, #6
 8000966:	d41f      	bmi.n	80009a8 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000968:	6a2b      	ldr	r3, [r5, #32]
 800096a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800096e:	d105      	bne.n	800097c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000970:	6862      	ldr	r2, [r4, #4]
 8000972:	68a9      	ldr	r1, [r5, #8]
 8000974:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000978:	430a      	orrs	r2, r1
 800097a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800097c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800097e:	6862      	ldr	r2, [r4, #4]
 8000980:	430b      	orrs	r3, r1
 8000982:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000986:	4313      	orrs	r3, r2
 8000988:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800098a:	2301      	movs	r3, #1
 800098c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800098e:	f7ff fc1d 	bl	80001cc <HAL_GetTick>
 8000992:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000994:	6823      	ldr	r3, [r4, #0]
 8000996:	019a      	lsls	r2, r3, #6
 8000998:	f53f aea7 	bmi.w	80006ea <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800099c:	f7ff fc16 	bl	80001cc <HAL_GetTick>
 80009a0:	1b40      	subs	r0, r0, r5
 80009a2:	2802      	cmp	r0, #2
 80009a4:	d9f6      	bls.n	8000994 <HAL_RCC_OscConfig+0x2d4>
 80009a6:	e6cd      	b.n	8000744 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009a8:	f7ff fc10 	bl	80001cc <HAL_GetTick>
 80009ac:	1bc0      	subs	r0, r0, r7
 80009ae:	2802      	cmp	r0, #2
 80009b0:	d9d7      	bls.n	8000962 <HAL_RCC_OscConfig+0x2a2>
 80009b2:	e6c7      	b.n	8000744 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80009b4:	f7ff fc0a 	bl	80001cc <HAL_GetTick>
 80009b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009ba:	6823      	ldr	r3, [r4, #0]
 80009bc:	019b      	lsls	r3, r3, #6
 80009be:	f57f ae94 	bpl.w	80006ea <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009c2:	f7ff fc03 	bl	80001cc <HAL_GetTick>
 80009c6:	1b40      	subs	r0, r0, r5
 80009c8:	2802      	cmp	r0, #2
 80009ca:	d9f6      	bls.n	80009ba <HAL_RCC_OscConfig+0x2fa>
 80009cc:	e6ba      	b.n	8000744 <HAL_RCC_OscConfig+0x84>
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000
 80009d4:	42420060 	.word	0x42420060

080009d8 <HAL_RCC_GetSysClockFreq>:
{
 80009d8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80009dc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009de:	ac02      	add	r4, sp, #8
 80009e0:	f103 0510 	add.w	r5, r3, #16
 80009e4:	4622      	mov	r2, r4
 80009e6:	6818      	ldr	r0, [r3, #0]
 80009e8:	6859      	ldr	r1, [r3, #4]
 80009ea:	3308      	adds	r3, #8
 80009ec:	c203      	stmia	r2!, {r0, r1}
 80009ee:	42ab      	cmp	r3, r5
 80009f0:	4614      	mov	r4, r2
 80009f2:	d1f7      	bne.n	80009e4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80009f4:	2301      	movs	r3, #1
 80009f6:	f88d 3004 	strb.w	r3, [sp, #4]
 80009fa:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80009fc:	4911      	ldr	r1, [pc, #68]	; (8000a44 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80009fe:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000a02:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a04:	f003 020c 	and.w	r2, r3, #12
 8000a08:	2a08      	cmp	r2, #8
 8000a0a:	d117      	bne.n	8000a3c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a0c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000a10:	a806      	add	r0, sp, #24
 8000a12:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a14:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a16:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a1a:	d50c      	bpl.n	8000a36 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a1c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a1e:	480a      	ldr	r0, [pc, #40]	; (8000a48 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a20:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a24:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a26:	aa06      	add	r2, sp, #24
 8000a28:	4413      	add	r3, r2
 8000a2a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a2e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000a32:	b007      	add	sp, #28
 8000a34:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <HAL_RCC_GetSysClockFreq+0x74>)
 8000a38:	4350      	muls	r0, r2
 8000a3a:	e7fa      	b.n	8000a32 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000a3e:	e7f8      	b.n	8000a32 <HAL_RCC_GetSysClockFreq+0x5a>
 8000a40:	08000f60 	.word	0x08000f60
 8000a44:	40021000 	.word	0x40021000
 8000a48:	007a1200 	.word	0x007a1200
 8000a4c:	003d0900 	.word	0x003d0900

08000a50 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a50:	4a4d      	ldr	r2, [pc, #308]	; (8000b88 <HAL_RCC_ClockConfig+0x138>)
{
 8000a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a56:	6813      	ldr	r3, [r2, #0]
{
 8000a58:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	428b      	cmp	r3, r1
{
 8000a60:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a62:	d328      	bcc.n	8000ab6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a64:	682a      	ldr	r2, [r5, #0]
 8000a66:	0791      	lsls	r1, r2, #30
 8000a68:	d432      	bmi.n	8000ad0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a6a:	07d2      	lsls	r2, r2, #31
 8000a6c:	d438      	bmi.n	8000ae0 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a6e:	4a46      	ldr	r2, [pc, #280]	; (8000b88 <HAL_RCC_ClockConfig+0x138>)
 8000a70:	6813      	ldr	r3, [r2, #0]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	429e      	cmp	r6, r3
 8000a78:	d373      	bcc.n	8000b62 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a7a:	682a      	ldr	r2, [r5, #0]
 8000a7c:	4c43      	ldr	r4, [pc, #268]	; (8000b8c <HAL_RCC_ClockConfig+0x13c>)
 8000a7e:	f012 0f04 	tst.w	r2, #4
 8000a82:	d179      	bne.n	8000b78 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a84:	0713      	lsls	r3, r2, #28
 8000a86:	d506      	bpl.n	8000a96 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a88:	6863      	ldr	r3, [r4, #4]
 8000a8a:	692a      	ldr	r2, [r5, #16]
 8000a8c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a94:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000a96:	f7ff ff9f 	bl	80009d8 <HAL_RCC_GetSysClockFreq>
 8000a9a:	6863      	ldr	r3, [r4, #4]
 8000a9c:	4a3c      	ldr	r2, [pc, #240]	; (8000b90 <HAL_RCC_ClockConfig+0x140>)
 8000a9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000aa2:	5cd3      	ldrb	r3, [r2, r3]
 8000aa4:	40d8      	lsrs	r0, r3
 8000aa6:	4b3b      	ldr	r3, [pc, #236]	; (8000b94 <HAL_RCC_ClockConfig+0x144>)
 8000aa8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fb4e 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000ab0:	2000      	movs	r0, #0
}
 8000ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ab6:	6813      	ldr	r3, [r2, #0]
 8000ab8:	f023 0307 	bic.w	r3, r3, #7
 8000abc:	430b      	orrs	r3, r1
 8000abe:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ac0:	6813      	ldr	r3, [r2, #0]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d0cc      	beq.n	8000a64 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000aca:	2001      	movs	r0, #1
 8000acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ad0:	492e      	ldr	r1, [pc, #184]	; (8000b8c <HAL_RCC_ClockConfig+0x13c>)
 8000ad2:	68a8      	ldr	r0, [r5, #8]
 8000ad4:	684b      	ldr	r3, [r1, #4]
 8000ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ada:	4303      	orrs	r3, r0
 8000adc:	604b      	str	r3, [r1, #4]
 8000ade:	e7c4      	b.n	8000a6a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ae0:	686a      	ldr	r2, [r5, #4]
 8000ae2:	4c2a      	ldr	r4, [pc, #168]	; (8000b8c <HAL_RCC_ClockConfig+0x13c>)
 8000ae4:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ae6:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ae8:	d11c      	bne.n	8000b24 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aee:	d0ec      	beq.n	8000aca <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000af0:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000af2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000af6:	f023 0303 	bic.w	r3, r3, #3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000afe:	f7ff fb65 	bl	80001cc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b02:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000b04:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d114      	bne.n	8000b34 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b0a:	6863      	ldr	r3, [r4, #4]
 8000b0c:	f003 030c 	and.w	r3, r3, #12
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d0ac      	beq.n	8000a6e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b14:	f7ff fb5a 	bl	80001cc <HAL_GetTick>
 8000b18:	1bc0      	subs	r0, r0, r7
 8000b1a:	4540      	cmp	r0, r8
 8000b1c:	d9f5      	bls.n	8000b0a <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000b1e:	2003      	movs	r0, #3
 8000b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b24:	2a02      	cmp	r2, #2
 8000b26:	d102      	bne.n	8000b2e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b2c:	e7df      	b.n	8000aee <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b2e:	f013 0f02 	tst.w	r3, #2
 8000b32:	e7dc      	b.n	8000aee <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d10f      	bne.n	8000b58 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b38:	6863      	ldr	r3, [r4, #4]
 8000b3a:	f003 030c 	and.w	r3, r3, #12
 8000b3e:	2b08      	cmp	r3, #8
 8000b40:	d095      	beq.n	8000a6e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b42:	f7ff fb43 	bl	80001cc <HAL_GetTick>
 8000b46:	1bc0      	subs	r0, r0, r7
 8000b48:	4540      	cmp	r0, r8
 8000b4a:	d9f5      	bls.n	8000b38 <HAL_RCC_ClockConfig+0xe8>
 8000b4c:	e7e7      	b.n	8000b1e <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b4e:	f7ff fb3d 	bl	80001cc <HAL_GetTick>
 8000b52:	1bc0      	subs	r0, r0, r7
 8000b54:	4540      	cmp	r0, r8
 8000b56:	d8e2      	bhi.n	8000b1e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b58:	6863      	ldr	r3, [r4, #4]
 8000b5a:	f013 0f0c 	tst.w	r3, #12
 8000b5e:	d1f6      	bne.n	8000b4e <HAL_RCC_ClockConfig+0xfe>
 8000b60:	e785      	b.n	8000a6e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b62:	6813      	ldr	r3, [r2, #0]
 8000b64:	f023 0307 	bic.w	r3, r3, #7
 8000b68:	4333      	orrs	r3, r6
 8000b6a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b6c:	6813      	ldr	r3, [r2, #0]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	429e      	cmp	r6, r3
 8000b74:	d1a9      	bne.n	8000aca <HAL_RCC_ClockConfig+0x7a>
 8000b76:	e780      	b.n	8000a7a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b78:	6863      	ldr	r3, [r4, #4]
 8000b7a:	68e9      	ldr	r1, [r5, #12]
 8000b7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b80:	430b      	orrs	r3, r1
 8000b82:	6063      	str	r3, [r4, #4]
 8000b84:	e77e      	b.n	8000a84 <HAL_RCC_ClockConfig+0x34>
 8000b86:	bf00      	nop
 8000b88:	40022000 	.word	0x40022000
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	08000f70 	.word	0x08000f70
 8000b94:	20000008 	.word	0x20000008

08000b98 <HAL_RCC_GetHCLKFreq>:
}
 8000b98:	4b01      	ldr	r3, [pc, #4]	; (8000ba0 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000ba4:	6803      	ldr	r3, [r0, #0]
{
 8000ba6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000baa:	07d9      	lsls	r1, r3, #31
{
 8000bac:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000bae:	d520      	bpl.n	8000bf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bb0:	4c35      	ldr	r4, [pc, #212]	; (8000c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000bb2:	69e3      	ldr	r3, [r4, #28]
 8000bb4:	00da      	lsls	r2, r3, #3
 8000bb6:	d432      	bmi.n	8000c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000bb8:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	69e3      	ldr	r3, [r4, #28]
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	61e3      	str	r3, [r4, #28]
 8000bc2:	69e3      	ldr	r3, [r4, #28]
 8000bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bcc:	4e2f      	ldr	r6, [pc, #188]	; (8000c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000bce:	6833      	ldr	r3, [r6, #0]
 8000bd0:	05db      	lsls	r3, r3, #23
 8000bd2:	d526      	bpl.n	8000c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000bd4:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000bd6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000bda:	d136      	bne.n	8000c4a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000bdc:	6a23      	ldr	r3, [r4, #32]
 8000bde:	686a      	ldr	r2, [r5, #4]
 8000be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000be4:	4313      	orrs	r3, r2
 8000be6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000be8:	b11f      	cbz	r7, 8000bf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bea:	69e3      	ldr	r3, [r4, #28]
 8000bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000bf2:	6828      	ldr	r0, [r5, #0]
 8000bf4:	0783      	lsls	r3, r0, #30
 8000bf6:	d506      	bpl.n	8000c06 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000bf8:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000bfa:	68a9      	ldr	r1, [r5, #8]
 8000bfc:	6853      	ldr	r3, [r2, #4]
 8000bfe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c02:	430b      	orrs	r3, r1
 8000c04:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000c06:	f010 0010 	ands.w	r0, r0, #16
 8000c0a:	d01b      	beq.n	8000c44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000c0c:	4a1e      	ldr	r2, [pc, #120]	; (8000c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000c0e:	68e9      	ldr	r1, [r5, #12]
 8000c10:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000c12:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000c14:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c18:	430b      	orrs	r3, r1
 8000c1a:	6053      	str	r3, [r2, #4]
 8000c1c:	e012      	b.n	8000c44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000c1e:	2700      	movs	r7, #0
 8000c20:	e7d4      	b.n	8000bcc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c22:	6833      	ldr	r3, [r6, #0]
 8000c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c28:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c2a:	f7ff facf 	bl	80001cc <HAL_GetTick>
 8000c2e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c30:	6833      	ldr	r3, [r6, #0]
 8000c32:	05d8      	lsls	r0, r3, #23
 8000c34:	d4ce      	bmi.n	8000bd4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c36:	f7ff fac9 	bl	80001cc <HAL_GetTick>
 8000c3a:	eba0 0008 	sub.w	r0, r0, r8
 8000c3e:	2864      	cmp	r0, #100	; 0x64
 8000c40:	d9f6      	bls.n	8000c30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000c42:	2003      	movs	r0, #3
}
 8000c44:	b002      	add	sp, #8
 8000c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c4a:	686a      	ldr	r2, [r5, #4]
 8000c4c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d0c3      	beq.n	8000bdc <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c54:	2001      	movs	r0, #1
 8000c56:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c58:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c5a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c5c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c62:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000c64:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000c66:	07d9      	lsls	r1, r3, #31
 8000c68:	d5b8      	bpl.n	8000bdc <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000c6a:	f7ff faaf 	bl	80001cc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c6e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000c72:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c74:	6a23      	ldr	r3, [r4, #32]
 8000c76:	079a      	lsls	r2, r3, #30
 8000c78:	d4b0      	bmi.n	8000bdc <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c7a:	f7ff faa7 	bl	80001cc <HAL_GetTick>
 8000c7e:	1b80      	subs	r0, r0, r6
 8000c80:	4540      	cmp	r0, r8
 8000c82:	d9f7      	bls.n	8000c74 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000c84:	e7dd      	b.n	8000c42 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40007000 	.word	0x40007000
 8000c90:	42420440 	.word	0x42420440

08000c94 <humidity_Ini>:
//Prototypes
void enableADC(void);

void humidity_Ini(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <humidity_Ini+0x6c>)
{
 8000c96:	b530      	push	{r4, r5, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	699a      	ldr	r2, [r3, #24]
{
 8000c9a:	b097      	sub	sp, #92	; 0x5c
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9c:	f042 0204 	orr.w	r2, r2, #4
 8000ca0:	619a      	str	r2, [r3, #24]
 8000ca2:	699a      	ldr	r2, [r3, #24]

	GPIO_InitTypeDef analogPin;

	analogPin.Mode = GPIO_MODE_ANALOG;
	analogPin.Pin = GPIO_PIN_0;
	analogPin.Pull = GPIO_NOPULL;
 8000ca4:	2400      	movs	r4, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	f002 0204 	and.w	r2, r2, #4
 8000caa:	9201      	str	r2, [sp, #4]
 8000cac:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000cae:	699a      	ldr	r2, [r3, #24]
	analogPin.Pin = GPIO_PIN_0;
 8000cb0:	2501      	movs	r5, #1
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cb6:	619a      	str	r2, [r3, #24]
 8000cb8:	699b      	ldr	r3, [r3, #24]

	HAL_GPIO_Init(GPIOA, &analogPin);
 8000cba:	a906      	add	r1, sp, #24
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cc0:	9302      	str	r3, [sp, #8]
 8000cc2:	9b02      	ldr	r3, [sp, #8]
	analogPin.Mode = GPIO_MODE_ANALOG;
 8000cc4:	2303      	movs	r3, #3
	HAL_GPIO_Init(GPIOA, &analogPin);
 8000cc6:	480f      	ldr	r0, [pc, #60]	; (8000d04 <humidity_Ini+0x70>)
	analogPin.Mode = GPIO_MODE_ANALOG;
 8000cc8:	9307      	str	r3, [sp, #28]
	analogPin.Pin = GPIO_PIN_0;
 8000cca:	9506      	str	r5, [sp, #24]
	analogPin.Pull = GPIO_NOPULL;
 8000ccc:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &analogPin);
 8000cce:	f7ff fc17 	bl	8000500 <HAL_GPIO_Init>


	ADC_ChannelConfTypeDef sConfig;
	ADC_HandleTypeDef hadc1;

	hadc1.Instance = ADC1;
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <humidity_Ini+0x74>)
	hadc1.Init.ContinuousConvMode = ENABLE;
	hadc1.Init.DiscontinuousConvMode = DISABLE;
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc1.Init.NbrOfConversion = 1;
	HAL_ADC_Init(&hadc1);
 8000cd4:	a80a      	add	r0, sp, #40	; 0x28
	hadc1.Instance = ADC1;
 8000cd6:	930a      	str	r3, [sp, #40]	; 0x28
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd8:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cdc:	940c      	str	r4, [sp, #48]	; 0x30
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cde:	9311      	str	r3, [sp, #68]	; 0x44
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000ce0:	950d      	str	r5, [sp, #52]	; 0x34
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ce2:	940f      	str	r4, [sp, #60]	; 0x3c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce4:	940b      	str	r4, [sp, #44]	; 0x2c
	hadc1.Init.NbrOfConversion = 1;
 8000ce6:	950e      	str	r5, [sp, #56]	; 0x38
	HAL_ADC_Init(&hadc1);
 8000ce8:	f7ff fb1c 	bl	8000324 <HAL_ADC_Init>
	/**Configure Regular Channel
	*/
	sConfig.Channel = ADC_CHANNEL_0;
	sConfig.Rank = ADC_REGULAR_RANK_1;
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000cec:	2307      	movs	r3, #7
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000cee:	a903      	add	r1, sp, #12
 8000cf0:	a80a      	add	r0, sp, #40	; 0x28
	sConfig.Channel = ADC_CHANNEL_0;
 8000cf2:	9403      	str	r4, [sp, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cf4:	9504      	str	r5, [sp, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000cf6:	9305      	str	r3, [sp, #20]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000cf8:	f7ff fa6e 	bl	80001d8 <HAL_ADC_ConfigChannel>


}
 8000cfc:	b017      	add	sp, #92	; 0x5c
 8000cfe:	bd30      	pop	{r4, r5, pc}
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010800 	.word	0x40010800
 8000d08:	40012400 	.word	0x40012400

08000d0c <enableADC>:

void enableADC()
{
	ADC1->CR2 |= ADC_CR2_ADON | ADC_CR2_CONT;
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <enableADC+0x14>)
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	f042 0203 	orr.w	r2, r2, #3
 8000d14:	609a      	str	r2, [r3, #8]
	ADC1->CR2 |= ADC_CR2_ADON; //Start Continous Reading
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	f042 0201 	orr.w	r2, r2, #1
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	4770      	bx	lr
 8000d20:	40012400 	.word	0x40012400

08000d24 <humidity_readHumidity>:

uint16_t humidity_readHumidity(void)
{
	//enableADC(); //WAKEUP
	//ADC1->CR2 |= ADC_CR2_SWSTART;
	while(!(ADC1->SR & ADC_SR_EOC)); //Wait until reading has finished
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <humidity_readHumidity+0x10>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	0792      	lsls	r2, r2, #30
 8000d2a:	d5fc      	bpl.n	8000d26 <humidity_readHumidity+0x2>
	return (uint16_t)ADC1->DR;
 8000d2c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000d2e:	b280      	uxth	r0, r0
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40012400 	.word	0x40012400

08000d38 <humidity_estaminateHumidity>:
{
 8000d38:	b538      	push	{r3, r4, r5, lr}
	for(uint32_t cnt = 0; cnt < numMes; cnt++)
 8000d3a:	2400      	movs	r4, #0
{
 8000d3c:	4605      	mov	r5, r0
	enableADC(); //WAKEUP
 8000d3e:	f7ff ffe5 	bl	8000d0c <enableADC>
	uint32_t mes_all = 0;
 8000d42:	4621      	mov	r1, r4
	for(uint32_t cnt = 0; cnt < numMes; cnt++)
 8000d44:	42ac      	cmp	r4, r5
 8000d46:	d110      	bne.n	8000d6a <humidity_estaminateHumidity+0x32>
	ADC1->CR2 &= ~(ADC_CR2_CONT | ADC_CR2_ADON); //Disable
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <humidity_estaminateHumidity+0x3c>)
	return 100 - (((mes_all/numMes)*100)/0xFFF);
 8000d4a:	fbb1 f1f4 	udiv	r1, r1, r4
 8000d4e:	2064      	movs	r0, #100	; 0x64
	ADC1->CR2 &= ~(ADC_CR2_CONT | ADC_CR2_ADON); //Disable
 8000d50:	6893      	ldr	r3, [r2, #8]
	return 100 - (((mes_all/numMes)*100)/0xFFF);
 8000d52:	4348      	muls	r0, r1
	ADC1->CR2 &= ~(ADC_CR2_CONT | ADC_CR2_ADON); //Disable
 8000d54:	f023 0303 	bic.w	r3, r3, #3
 8000d58:	6093      	str	r3, [r2, #8]
	return 100 - (((mes_all/numMes)*100)/0xFFF);
 8000d5a:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000d5e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d62:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
}
 8000d66:	b2c0      	uxtb	r0, r0
 8000d68:	bd38      	pop	{r3, r4, r5, pc}
		mes_all += humidity_readHumidity();
 8000d6a:	f7ff ffdb 	bl	8000d24 <humidity_readHumidity>
	for(uint32_t cnt = 0; cnt < numMes; cnt++)
 8000d6e:	3401      	adds	r4, #1
		mes_all += humidity_readHumidity();
 8000d70:	4401      	add	r1, r0
 8000d72:	e7e7      	b.n	8000d44 <humidity_estaminateHumidity+0xc>
 8000d74:	40012400 	.word	0x40012400

08000d78 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d78:	2301      	movs	r3, #1
{
 8000d7a:	b510      	push	{r4, lr}
 8000d7c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000d80:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d82:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000d84:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d86:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d8a:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d8c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8e:	f7ff fc97 	bl	80006c0 <HAL_RCC_OscConfig>
 8000d92:	4601      	mov	r1, r0
 8000d94:	b100      	cbz	r0, 8000d98 <SystemClock_Config+0x20>
 8000d96:	e7fe      	b.n	8000d96 <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d9a:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9c:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d9e:	9008      	str	r0, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da0:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000da2:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da4:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000da6:	f7ff fe53 	bl	8000a50 <HAL_RCC_ClockConfig>
 8000daa:	b100      	cbz	r0, 8000dae <SystemClock_Config+0x36>
 8000dac:	e7fe      	b.n	8000dac <SystemClock_Config+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000dae:	9003      	str	r0, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db0:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000db2:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db4:	f7ff fef6 	bl	8000ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000db8:	4604      	mov	r4, r0
 8000dba:	b100      	cbz	r0, 8000dbe <SystemClock_Config+0x46>
 8000dbc:	e7fe      	b.n	8000dbc <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000dbe:	f7ff feeb 	bl	8000b98 <HAL_RCC_GetHCLKFreq>
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dca:	f7ff fb71 	bl	80004b0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000dce:	2004      	movs	r0, #4
 8000dd0:	f7ff fb84 	bl	80004dc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000dd4:	4622      	mov	r2, r4
 8000dd6:	4621      	mov	r1, r4
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f7ff fb34 	bl	8000448 <HAL_NVIC_SetPriority>
}
 8000de0:	b014      	add	sp, #80	; 0x50
 8000de2:	bd10      	pop	{r4, pc}

08000de4 <main>:
{
 8000de4:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8000de6:	f7ff f9d5 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8000dea:	f7ff ffc5 	bl	8000d78 <SystemClock_Config>
  humidity_Ini();
 8000dee:	f7ff ff51 	bl	8000c94 <humidity_Ini>
  volatile int i = 0;
 8000df2:	2300      	movs	r3, #0
	  hum_dig = humidity_estaminateHumidity(100);
 8000df4:	2064      	movs	r0, #100	; 0x64
  volatile int i = 0;
 8000df6:	9301      	str	r3, [sp, #4]
	  hum_dig = humidity_estaminateHumidity(100);
 8000df8:	f7ff ff9e 	bl	8000d38 <humidity_estaminateHumidity>
 8000dfc:	b280      	uxth	r0, r0
 8000dfe:	f8ad 0002 	strh.w	r0, [sp, #2]
	  i++;
 8000e02:	9b01      	ldr	r3, [sp, #4]
 8000e04:	3301      	adds	r3, #1
 8000e06:	e7f5      	b.n	8000df4 <main+0x10>

08000e08 <HAL_ADC_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8000e0a:	6802      	ldr	r2, [r0, #0]
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_ADC_MspInit+0x38>)
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d112      	bne.n	8000e38 <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e12:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8000e16:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e1e:	619a      	str	r2, [r3, #24]
 8000e20:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	4808      	ldr	r0, [pc, #32]	; (8000e44 <HAL_ADC_MspInit+0x3c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e30:	2303      	movs	r3, #3
 8000e32:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f7ff fb64 	bl	8000500 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e38:	b007      	add	sp, #28
 8000e3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e3e:	bf00      	nop
 8000e40:	40012400 	.word	0x40012400
 8000e44:	40010800 	.word	0x40010800

08000e48 <NMI_Handler>:
 8000e48:	4770      	bx	lr

08000e4a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler>

08000e4c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000e4c:	e7fe      	b.n	8000e4c <MemManage_Handler>

08000e4e <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000e4e:	e7fe      	b.n	8000e4e <BusFault_Handler>

08000e50 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000e50:	e7fe      	b.n	8000e50 <UsageFault_Handler>

08000e52 <SVC_Handler>:
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:
 8000e54:	4770      	bx	lr

08000e56 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000e58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5a:	f7ff f9ab 	bl	80001b4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000e62:	f7ff bb48 	b.w	80004f6 <HAL_SYSTICK_IRQHandler>
	...

08000e68 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <SystemInit+0x40>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	f042 0201 	orr.w	r2, r2, #1
 8000e70:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000e72:	6859      	ldr	r1, [r3, #4]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <SystemInit+0x44>)
 8000e76:	400a      	ands	r2, r1
 8000e78:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000e80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e84:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e8c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000e8e:	685a      	ldr	r2, [r3, #4]
 8000e90:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000e94:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000e96:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e9a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <SystemInit+0x48>)
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	f8ff0000 	.word	0xf8ff0000
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000eb4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000eb6:	e003      	b.n	8000ec0 <LoopCopyDataInit>

08000eb8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000eba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ebc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ebe:	3104      	adds	r1, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ec0:	480a      	ldr	r0, [pc, #40]	; (8000eec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ec4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ec6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ec8:	d3f6      	bcc.n	8000eb8 <CopyDataInit>
  ldr r2, =_sbss
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ecc:	e002      	b.n	8000ed4 <LoopFillZerobss>

08000ece <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ed0:	f842 3b04 	str.w	r3, [r2], #4

08000ed4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ed6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ed8:	d3f9      	bcc.n	8000ece <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eda:	f7ff ffc5 	bl	8000e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ede:	f000 f80f 	bl	8000f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ee2:	f7ff ff7f 	bl	8000de4 <main>
  bx lr
 8000ee6:	4770      	bx	lr
  ldr r3, =_sidata
 8000ee8:	08000f88 	.word	0x08000f88
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ef0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000ef4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000ef8:	2000002c 	.word	0x2000002c

08000efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC1_2_IRQHandler>
	...

08000f00 <__libc_init_array>:
 8000f00:	b570      	push	{r4, r5, r6, lr}
 8000f02:	2500      	movs	r5, #0
 8000f04:	4e0c      	ldr	r6, [pc, #48]	; (8000f38 <__libc_init_array+0x38>)
 8000f06:	4c0d      	ldr	r4, [pc, #52]	; (8000f3c <__libc_init_array+0x3c>)
 8000f08:	1ba4      	subs	r4, r4, r6
 8000f0a:	10a4      	asrs	r4, r4, #2
 8000f0c:	42a5      	cmp	r5, r4
 8000f0e:	d109      	bne.n	8000f24 <__libc_init_array+0x24>
 8000f10:	f000 f81a 	bl	8000f48 <_init>
 8000f14:	2500      	movs	r5, #0
 8000f16:	4e0a      	ldr	r6, [pc, #40]	; (8000f40 <__libc_init_array+0x40>)
 8000f18:	4c0a      	ldr	r4, [pc, #40]	; (8000f44 <__libc_init_array+0x44>)
 8000f1a:	1ba4      	subs	r4, r4, r6
 8000f1c:	10a4      	asrs	r4, r4, #2
 8000f1e:	42a5      	cmp	r5, r4
 8000f20:	d105      	bne.n	8000f2e <__libc_init_array+0x2e>
 8000f22:	bd70      	pop	{r4, r5, r6, pc}
 8000f24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f28:	4798      	blx	r3
 8000f2a:	3501      	adds	r5, #1
 8000f2c:	e7ee      	b.n	8000f0c <__libc_init_array+0xc>
 8000f2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f32:	4798      	blx	r3
 8000f34:	3501      	adds	r5, #1
 8000f36:	e7f2      	b.n	8000f1e <__libc_init_array+0x1e>
 8000f38:	08000f80 	.word	0x08000f80
 8000f3c:	08000f80 	.word	0x08000f80
 8000f40:	08000f80 	.word	0x08000f80
 8000f44:	08000f84 	.word	0x08000f84

08000f48 <_init>:
 8000f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4a:	bf00      	nop
 8000f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f4e:	bc08      	pop	{r3}
 8000f50:	469e      	mov	lr, r3
 8000f52:	4770      	bx	lr

08000f54 <_fini>:
 8000f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f56:	bf00      	nop
 8000f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5a:	bc08      	pop	{r3}
 8000f5c:	469e      	mov	lr, r3
 8000f5e:	4770      	bx	lr
