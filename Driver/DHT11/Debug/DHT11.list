
DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001934  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001a40  08001a40  00011a40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a78  08001a78  00011a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a7c  08001a7c  00011a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  2000000c  08001a8c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000078  08001a8c  00020078  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f3d0  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000217e  00000000  00000000  0002f405  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000048d2  00000000  00000000  00031583  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006d8  00000000  00000000  00035e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008c0  00000000  00000000  00036530  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003ea8  00000000  00000000  00036df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002c8a  00000000  00000000  0003ac98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003d922  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001448  00000000  00000000  0003d9a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a28 	.word	0x08001a28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001a28 	.word	0x08001a28

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	bf14      	ite	ne
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800044c:	e720      	b.n	8000290 <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_ul2d>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	b530      	push	{r4, r5, lr}
 800045a:	f04f 0500 	mov.w	r5, #0
 800045e:	e00a      	b.n	8000476 <__aeabi_l2d+0x16>

08000460 <__aeabi_l2d>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800046e:	d502      	bpl.n	8000476 <__aeabi_l2d+0x16>
 8000470:	4240      	negs	r0, r0
 8000472:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000476:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000482:	f43f aedc 	beq.w	800023e <__adddf3+0xe6>
 8000486:	f04f 0203 	mov.w	r2, #3
 800048a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800048e:	bf18      	it	ne
 8000490:	3203      	addne	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800049e:	f1c2 0320 	rsb	r3, r2, #32
 80004a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ae:	ea40 000e 	orr.w	r0, r0, lr
 80004b2:	fa21 f102 	lsr.w	r1, r1, r2
 80004b6:	4414      	add	r4, r2
 80004b8:	e6c1      	b.n	800023e <__adddf3+0xe6>
 80004ba:	bf00      	nop

080004bc <__aeabi_dmul>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ca:	bf1d      	ittte	ne
 80004cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d0:	ea94 0f0c 	teqne	r4, ip
 80004d4:	ea95 0f0c 	teqne	r5, ip
 80004d8:	f000 f8de 	bleq	8000698 <__aeabi_dmul+0x1dc>
 80004dc:	442c      	add	r4, r5
 80004de:	ea81 0603 	eor.w	r6, r1, r3
 80004e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004ee:	bf18      	it	ne
 80004f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004fc:	d038      	beq.n	8000570 <__aeabi_dmul+0xb4>
 80004fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800050e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000512:	f04f 0600 	mov.w	r6, #0
 8000516:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051a:	f09c 0f00 	teq	ip, #0
 800051e:	bf18      	it	ne
 8000520:	f04e 0e01 	orrne.w	lr, lr, #1
 8000524:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000528:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800052c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000530:	d204      	bcs.n	800053c <__aeabi_dmul+0x80>
 8000532:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000536:	416d      	adcs	r5, r5
 8000538:	eb46 0606 	adc.w	r6, r6, r6
 800053c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000540:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000544:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000548:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800054c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000550:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000554:	bf88      	it	hi
 8000556:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055a:	d81e      	bhi.n	800059a <__aeabi_dmul+0xde>
 800055c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000574:	ea46 0101 	orr.w	r1, r6, r1
 8000578:	ea40 0002 	orr.w	r0, r0, r2
 800057c:	ea81 0103 	eor.w	r1, r1, r3
 8000580:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000584:	bfc2      	ittt	gt
 8000586:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800058e:	bd70      	popgt	{r4, r5, r6, pc}
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f04f 0e00 	mov.w	lr, #0
 8000598:	3c01      	subs	r4, #1
 800059a:	f300 80ab 	bgt.w	80006f4 <__aeabi_dmul+0x238>
 800059e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a2:	bfde      	ittt	le
 80005a4:	2000      	movle	r0, #0
 80005a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd70      	pople	{r4, r5, r6, pc}
 80005ac:	f1c4 0400 	rsb	r4, r4, #0
 80005b0:	3c20      	subs	r4, #32
 80005b2:	da35      	bge.n	8000620 <__aeabi_dmul+0x164>
 80005b4:	340c      	adds	r4, #12
 80005b6:	dc1b      	bgt.n	80005f0 <__aeabi_dmul+0x134>
 80005b8:	f104 0414 	add.w	r4, r4, #20
 80005bc:	f1c4 0520 	rsb	r5, r4, #32
 80005c0:	fa00 f305 	lsl.w	r3, r0, r5
 80005c4:	fa20 f004 	lsr.w	r0, r0, r4
 80005c8:	fa01 f205 	lsl.w	r2, r1, r5
 80005cc:	ea40 0002 	orr.w	r0, r0, r2
 80005d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005dc:	fa21 f604 	lsr.w	r6, r1, r4
 80005e0:	eb42 0106 	adc.w	r1, r2, r6
 80005e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005e8:	bf08      	it	eq
 80005ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	f1c4 040c 	rsb	r4, r4, #12
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f304 	lsl.w	r3, r0, r4
 80005fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000600:	fa01 f204 	lsl.w	r2, r1, r4
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	f141 0100 	adc.w	r1, r1, #0
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f205 	lsl.w	r2, r0, r5
 8000628:	ea4e 0e02 	orr.w	lr, lr, r2
 800062c:	fa20 f304 	lsr.w	r3, r0, r4
 8000630:	fa01 f205 	lsl.w	r2, r1, r5
 8000634:	ea43 0302 	orr.w	r3, r3, r2
 8000638:	fa21 f004 	lsr.w	r0, r1, r4
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	fa21 f204 	lsr.w	r2, r1, r4
 8000644:	ea20 0002 	bic.w	r0, r0, r2
 8000648:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f094 0f00 	teq	r4, #0
 800065c:	d10f      	bne.n	800067e <__aeabi_dmul+0x1c2>
 800065e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000662:	0040      	lsls	r0, r0, #1
 8000664:	eb41 0101 	adc.w	r1, r1, r1
 8000668:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800066c:	bf08      	it	eq
 800066e:	3c01      	subeq	r4, #1
 8000670:	d0f7      	beq.n	8000662 <__aeabi_dmul+0x1a6>
 8000672:	ea41 0106 	orr.w	r1, r1, r6
 8000676:	f095 0f00 	teq	r5, #0
 800067a:	bf18      	it	ne
 800067c:	4770      	bxne	lr
 800067e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	eb43 0303 	adc.w	r3, r3, r3
 8000688:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3d01      	subeq	r5, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1c6>
 8000692:	ea43 0306 	orr.w	r3, r3, r6
 8000696:	4770      	bx	lr
 8000698:	ea94 0f0c 	teq	r4, ip
 800069c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a0:	bf18      	it	ne
 80006a2:	ea95 0f0c 	teqne	r5, ip
 80006a6:	d00c      	beq.n	80006c2 <__aeabi_dmul+0x206>
 80006a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ac:	bf18      	it	ne
 80006ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b2:	d1d1      	bne.n	8000658 <__aeabi_dmul+0x19c>
 80006b4:	ea81 0103 	eor.w	r1, r1, r3
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c6:	bf06      	itte	eq
 80006c8:	4610      	moveq	r0, r2
 80006ca:	4619      	moveq	r1, r3
 80006cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d0:	d019      	beq.n	8000706 <__aeabi_dmul+0x24a>
 80006d2:	ea94 0f0c 	teq	r4, ip
 80006d6:	d102      	bne.n	80006de <__aeabi_dmul+0x222>
 80006d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006dc:	d113      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006de:	ea95 0f0c 	teq	r5, ip
 80006e2:	d105      	bne.n	80006f0 <__aeabi_dmul+0x234>
 80006e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006e8:	bf1c      	itt	ne
 80006ea:	4610      	movne	r0, r2
 80006ec:	4619      	movne	r1, r3
 80006ee:	d10a      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800070e:	bd70      	pop	{r4, r5, r6, pc}

08000710 <__aeabi_ddiv>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800071e:	bf1d      	ittte	ne
 8000720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000724:	ea94 0f0c 	teqne	r4, ip
 8000728:	ea95 0f0c 	teqne	r5, ip
 800072c:	f000 f8a7 	bleq	800087e <__aeabi_ddiv+0x16e>
 8000730:	eba4 0405 	sub.w	r4, r4, r5
 8000734:	ea81 0e03 	eor.w	lr, r1, r3
 8000738:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800073c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000740:	f000 8088 	beq.w	8000854 <__aeabi_ddiv+0x144>
 8000744:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000748:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800074c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000750:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000754:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000758:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800075c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000760:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000764:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000768:	429d      	cmp	r5, r3
 800076a:	bf08      	it	eq
 800076c:	4296      	cmpeq	r6, r2
 800076e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000772:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000776:	d202      	bcs.n	800077e <__aeabi_ddiv+0x6e>
 8000778:	085b      	lsrs	r3, r3, #1
 800077a:	ea4f 0232 	mov.w	r2, r2, rrx
 800077e:	1ab6      	subs	r6, r6, r2
 8000780:	eb65 0503 	sbc.w	r5, r5, r3
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800078e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000792:	ebb6 0e02 	subs.w	lr, r6, r2
 8000796:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079a:	bf22      	ittt	cs
 800079c:	1ab6      	subcs	r6, r6, r2
 800079e:	4675      	movcs	r5, lr
 80007a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f0:	d018      	beq.n	8000824 <__aeabi_ddiv+0x114>
 80007f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000802:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000806:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800080e:	d1c0      	bne.n	8000792 <__aeabi_ddiv+0x82>
 8000810:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000814:	d10b      	bne.n	800082e <__aeabi_ddiv+0x11e>
 8000816:	ea41 0100 	orr.w	r1, r1, r0
 800081a:	f04f 0000 	mov.w	r0, #0
 800081e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000822:	e7b6      	b.n	8000792 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	bf04      	itt	eq
 800082a:	4301      	orreq	r1, r0
 800082c:	2000      	moveq	r0, #0
 800082e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000832:	bf88      	it	hi
 8000834:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000838:	f63f aeaf 	bhi.w	800059a <__aeabi_dmul+0xde>
 800083c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000840:	bf04      	itt	eq
 8000842:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000846:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084a:	f150 0000 	adcs.w	r0, r0, #0
 800084e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000858:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800085c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000860:	bfc2      	ittt	gt
 8000862:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086a:	bd70      	popgt	{r4, r5, r6, pc}
 800086c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000870:	f04f 0e00 	mov.w	lr, #0
 8000874:	3c01      	subs	r4, #1
 8000876:	e690      	b.n	800059a <__aeabi_dmul+0xde>
 8000878:	ea45 0e06 	orr.w	lr, r5, r6
 800087c:	e68d      	b.n	800059a <__aeabi_dmul+0xde>
 800087e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000882:	ea94 0f0c 	teq	r4, ip
 8000886:	bf08      	it	eq
 8000888:	ea95 0f0c 	teqeq	r5, ip
 800088c:	f43f af3b 	beq.w	8000706 <__aeabi_dmul+0x24a>
 8000890:	ea94 0f0c 	teq	r4, ip
 8000894:	d10a      	bne.n	80008ac <__aeabi_ddiv+0x19c>
 8000896:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089a:	f47f af34 	bne.w	8000706 <__aeabi_dmul+0x24a>
 800089e:	ea95 0f0c 	teq	r5, ip
 80008a2:	f47f af25 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008a6:	4610      	mov	r0, r2
 80008a8:	4619      	mov	r1, r3
 80008aa:	e72c      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008ac:	ea95 0f0c 	teq	r5, ip
 80008b0:	d106      	bne.n	80008c0 <__aeabi_ddiv+0x1b0>
 80008b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b6:	f43f aefd 	beq.w	80006b4 <__aeabi_dmul+0x1f8>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e722      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c4:	bf18      	it	ne
 80008c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ca:	f47f aec5 	bne.w	8000658 <__aeabi_dmul+0x19c>
 80008ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d2:	f47f af0d 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008da:	f47f aeeb 	bne.w	80006b4 <__aeabi_dmul+0x1f8>
 80008de:	e712      	b.n	8000706 <__aeabi_dmul+0x24a>

080008e0 <__aeabi_d2f>:
 80008e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008e8:	bf24      	itt	cs
 80008ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008f2:	d90d      	bls.n	8000910 <__aeabi_d2f+0x30>
 80008f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000900:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000904:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000908:	bf08      	it	eq
 800090a:	f020 0001 	biceq.w	r0, r0, #1
 800090e:	4770      	bx	lr
 8000910:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000914:	d121      	bne.n	800095a <__aeabi_d2f+0x7a>
 8000916:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800091a:	bfbc      	itt	lt
 800091c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000920:	4770      	bxlt	lr
 8000922:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000926:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800092a:	f1c2 0218 	rsb	r2, r2, #24
 800092e:	f1c2 0c20 	rsb	ip, r2, #32
 8000932:	fa10 f30c 	lsls.w	r3, r0, ip
 8000936:	fa20 f002 	lsr.w	r0, r0, r2
 800093a:	bf18      	it	ne
 800093c:	f040 0001 	orrne.w	r0, r0, #1
 8000940:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000944:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000948:	fa03 fc0c 	lsl.w	ip, r3, ip
 800094c:	ea40 000c 	orr.w	r0, r0, ip
 8000950:	fa23 f302 	lsr.w	r3, r3, r2
 8000954:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000958:	e7cc      	b.n	80008f4 <__aeabi_d2f+0x14>
 800095a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800095e:	d107      	bne.n	8000970 <__aeabi_d2f+0x90>
 8000960:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000964:	bf1e      	ittt	ne
 8000966:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800096a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800096e:	4770      	bxne	lr
 8000970:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000974:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000978:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_InitTick+0x3c>)
{
 8000984:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000986:	7818      	ldrb	r0, [r3, #0]
 8000988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000990:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <HAL_InitTick+0x40>)
 8000992:	6810      	ldr	r0, [r2, #0]
 8000994:	fbb0 f0f3 	udiv	r0, r0, r3
 8000998:	f000 f890 	bl	8000abc <HAL_SYSTICK_Config>
 800099c:	4604      	mov	r4, r0
 800099e:	b958      	cbnz	r0, 80009b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a0:	2d0f      	cmp	r5, #15
 80009a2:	d809      	bhi.n	80009b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a4:	4602      	mov	r2, r0
 80009a6:	4629      	mov	r1, r5
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f000 f852 	bl	8000a54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <HAL_InitTick+0x44>)
 80009b2:	4620      	mov	r0, r4
 80009b4:	601d      	str	r5, [r3, #0]
 80009b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80009b8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80009ba:	bd38      	pop	{r3, r4, r5, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <HAL_Init+0x1c>)
{
 80009ca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ce:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	f043 0310 	orr.w	r3, r3, #16
 80009d4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d6:	f000 f82b 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff ffd0 	bl	8000980 <HAL_InitTick>
}
 80009e0:	2000      	movs	r0, #0
 80009e2:	bd08      	pop	{r3, pc}
 80009e4:	40022000 	.word	0x40022000

080009e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009e8:	4a03      	ldr	r2, [pc, #12]	; (80009f8 <HAL_IncTick+0x10>)
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <HAL_IncTick+0x14>)
 80009ec:	6811      	ldr	r1, [r2, #0]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	440b      	add	r3, r1
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000028 	.word	0x20000028
 80009fc:	20000000 	.word	0x20000000

08000a00 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a00:	4b01      	ldr	r3, [pc, #4]	; (8000a08 <HAL_GetTick+0x8>)
 8000a02:	6818      	ldr	r0, [r3, #0]
}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000028 	.word	0x20000028

08000a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b538      	push	{r3, r4, r5, lr}
 8000a0e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a10:	f7ff fff6 	bl	8000a00 <HAL_GetTick>
 8000a14:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a16:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000a18:	bf1e      	ittt	ne
 8000a1a:	4b04      	ldrne	r3, [pc, #16]	; (8000a2c <HAL_Delay+0x20>)
 8000a1c:	781b      	ldrbne	r3, [r3, #0]
 8000a1e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a20:	f7ff ffee 	bl	8000a00 <HAL_GetTick>
 8000a24:	1b40      	subs	r0, r0, r5
 8000a26:	4284      	cmp	r4, r0
 8000a28:	d8fa      	bhi.n	8000a20 <HAL_Delay+0x14>
  {
  }
}
 8000a2a:	bd38      	pop	{r3, r4, r5, pc}
 8000a2c:	20000000 	.word	0x20000000

08000a30 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a32:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a34:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a36:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a3e:	041b      	lsls	r3, r3, #16
 8000a40:	0c1b      	lsrs	r3, r3, #16
 8000a42:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000a4a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a4c:	60d3      	str	r3, [r2, #12]
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a56:	b530      	push	{r4, r5, lr}
 8000a58:	68dc      	ldr	r4, [r3, #12]
 8000a5a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a62:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	bf28      	it	cs
 8000a68:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a70:	bf98      	it	ls
 8000a72:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	fa05 f303 	lsl.w	r3, r5, r3
 8000a78:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7c:	bf88      	it	hi
 8000a7e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	4019      	ands	r1, r3
 8000a82:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	fa05 f404 	lsl.w	r4, r5, r4
 8000a88:	3c01      	subs	r4, #1
 8000a8a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000a8c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8e:	ea42 0201 	orr.w	r2, r2, r1
 8000a92:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	bfaf      	iteee	ge
 8000a98:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	4b06      	ldrlt	r3, [pc, #24]	; (8000ab8 <HAL_NVIC_SetPriority+0x64>)
 8000a9e:	f000 000f 	andlt.w	r0, r0, #15
 8000aa2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	bfa5      	ittet	ge
 8000aa6:	b2d2      	uxtbge	r2, r2
 8000aa8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aac:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ab2:	bd30      	pop	{r4, r5, pc}
 8000ab4:	e000ed00 	.word	0xe000ed00
 8000ab8:	e000ed14 	.word	0xe000ed14

08000abc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	3801      	subs	r0, #1
 8000abe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ac2:	d20a      	bcs.n	8000ada <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aca:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000e010 	.word	0xe000e010
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000aea:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	bf0c      	ite	eq
 8000af0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000af4:	f022 0204 	bicne.w	r2, r2, #4
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	4770      	bx	lr
 8000afc:	e000e010 	.word	0xe000e010

08000b00 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b00:	4770      	bx	lr

08000b02 <HAL_SYSTICK_IRQHandler>:
{
 8000b02:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000b04:	f7ff fffc 	bl	8000b00 <HAL_SYSTICK_Callback>
 8000b08:	bd08      	pop	{r3, pc}
	...

08000b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000b10:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000b12:	4616      	mov	r6, r2
 8000b14:	4b65      	ldr	r3, [pc, #404]	; (8000cac <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b16:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000cbc <HAL_GPIO_Init+0x1b0>
 8000b1a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000cc0 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000b1e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b22:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000b24:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b28:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d17f      	bne.n	8000c30 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000b30:	684d      	ldr	r5, [r1, #4]
 8000b32:	2d12      	cmp	r5, #18
 8000b34:	f000 80af 	beq.w	8000c96 <HAL_GPIO_Init+0x18a>
 8000b38:	f200 8088 	bhi.w	8000c4c <HAL_GPIO_Init+0x140>
 8000b3c:	2d02      	cmp	r5, #2
 8000b3e:	f000 80a7 	beq.w	8000c90 <HAL_GPIO_Init+0x184>
 8000b42:	d87c      	bhi.n	8000c3e <HAL_GPIO_Init+0x132>
 8000b44:	2d00      	cmp	r5, #0
 8000b46:	f000 808e 	beq.w	8000c66 <HAL_GPIO_Init+0x15a>
 8000b4a:	2d01      	cmp	r5, #1
 8000b4c:	f000 809e 	beq.w	8000c8c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b50:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b54:	2cff      	cmp	r4, #255	; 0xff
 8000b56:	bf93      	iteet	ls
 8000b58:	4682      	movls	sl, r0
 8000b5a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000b5e:	3d08      	subhi	r5, #8
 8000b60:	f8d0 b000 	ldrls.w	fp, [r0]
 8000b64:	bf92      	itee	ls
 8000b66:	00b5      	lslls	r5, r6, #2
 8000b68:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000b6c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b6e:	fa09 f805 	lsl.w	r8, r9, r5
 8000b72:	ea2b 0808 	bic.w	r8, fp, r8
 8000b76:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b7a:	bf88      	it	hi
 8000b7c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b80:	ea48 0505 	orr.w	r5, r8, r5
 8000b84:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b88:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000b8c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000b90:	d04e      	beq.n	8000c30 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b92:	4d47      	ldr	r5, [pc, #284]	; (8000cb0 <HAL_GPIO_Init+0x1a4>)
 8000b94:	4f46      	ldr	r7, [pc, #280]	; (8000cb0 <HAL_GPIO_Init+0x1a4>)
 8000b96:	69ad      	ldr	r5, [r5, #24]
 8000b98:	f026 0803 	bic.w	r8, r6, #3
 8000b9c:	f045 0501 	orr.w	r5, r5, #1
 8000ba0:	61bd      	str	r5, [r7, #24]
 8000ba2:	69bd      	ldr	r5, [r7, #24]
 8000ba4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000ba8:	f005 0501 	and.w	r5, r5, #1
 8000bac:	9501      	str	r5, [sp, #4]
 8000bae:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bb2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bb8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000bbc:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bc0:	fa09 f90b 	lsl.w	r9, r9, fp
 8000bc4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bc8:	4d3a      	ldr	r5, [pc, #232]	; (8000cb4 <HAL_GPIO_Init+0x1a8>)
 8000bca:	42a8      	cmp	r0, r5
 8000bcc:	d068      	beq.n	8000ca0 <HAL_GPIO_Init+0x194>
 8000bce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bd2:	42a8      	cmp	r0, r5
 8000bd4:	d066      	beq.n	8000ca4 <HAL_GPIO_Init+0x198>
 8000bd6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bda:	42a8      	cmp	r0, r5
 8000bdc:	d064      	beq.n	8000ca8 <HAL_GPIO_Init+0x19c>
 8000bde:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000be2:	42a8      	cmp	r0, r5
 8000be4:	bf0c      	ite	eq
 8000be6:	2503      	moveq	r5, #3
 8000be8:	2504      	movne	r5, #4
 8000bea:	fa05 f50b 	lsl.w	r5, r5, fp
 8000bee:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000bf2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bf6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000bfc:	bf14      	ite	ne
 8000bfe:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c00:	43a5      	biceq	r5, r4
 8000c02:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c04:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c06:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000c0a:	bf14      	ite	ne
 8000c0c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c0e:	43a5      	biceq	r5, r4
 8000c10:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c12:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c14:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c18:	bf14      	ite	ne
 8000c1a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c1c:	43a5      	biceq	r5, r4
 8000c1e:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c20:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c22:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c26:	bf14      	ite	ne
 8000c28:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c2a:	ea25 0404 	biceq.w	r4, r5, r4
 8000c2e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000c30:	3601      	adds	r6, #1
 8000c32:	2e10      	cmp	r6, #16
 8000c34:	f47f af73 	bne.w	8000b1e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000c38:	b003      	add	sp, #12
 8000c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000c3e:	2d03      	cmp	r5, #3
 8000c40:	d022      	beq.n	8000c88 <HAL_GPIO_Init+0x17c>
 8000c42:	2d11      	cmp	r5, #17
 8000c44:	d184      	bne.n	8000b50 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c46:	68ca      	ldr	r2, [r1, #12]
 8000c48:	3204      	adds	r2, #4
          break;
 8000c4a:	e781      	b.n	8000b50 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000c4c:	4f1a      	ldr	r7, [pc, #104]	; (8000cb8 <HAL_GPIO_Init+0x1ac>)
 8000c4e:	42bd      	cmp	r5, r7
 8000c50:	d009      	beq.n	8000c66 <HAL_GPIO_Init+0x15a>
 8000c52:	d812      	bhi.n	8000c7a <HAL_GPIO_Init+0x16e>
 8000c54:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000cc4 <HAL_GPIO_Init+0x1b8>
 8000c58:	454d      	cmp	r5, r9
 8000c5a:	d004      	beq.n	8000c66 <HAL_GPIO_Init+0x15a>
 8000c5c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000c60:	454d      	cmp	r5, r9
 8000c62:	f47f af75 	bne.w	8000b50 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c66:	688a      	ldr	r2, [r1, #8]
 8000c68:	b1c2      	cbz	r2, 8000c9c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c6a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000c6c:	bf0c      	ite	eq
 8000c6e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000c72:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c76:	2208      	movs	r2, #8
 8000c78:	e76a      	b.n	8000b50 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000c7a:	4575      	cmp	r5, lr
 8000c7c:	d0f3      	beq.n	8000c66 <HAL_GPIO_Init+0x15a>
 8000c7e:	4565      	cmp	r5, ip
 8000c80:	d0f1      	beq.n	8000c66 <HAL_GPIO_Init+0x15a>
 8000c82:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000cc8 <HAL_GPIO_Init+0x1bc>
 8000c86:	e7eb      	b.n	8000c60 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e761      	b.n	8000b50 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c8c:	68ca      	ldr	r2, [r1, #12]
          break;
 8000c8e:	e75f      	b.n	8000b50 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c90:	68ca      	ldr	r2, [r1, #12]
 8000c92:	3208      	adds	r2, #8
          break;
 8000c94:	e75c      	b.n	8000b50 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c96:	68ca      	ldr	r2, [r1, #12]
 8000c98:	320c      	adds	r2, #12
          break;
 8000c9a:	e759      	b.n	8000b50 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	e757      	b.n	8000b50 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ca0:	2500      	movs	r5, #0
 8000ca2:	e7a2      	b.n	8000bea <HAL_GPIO_Init+0xde>
 8000ca4:	2501      	movs	r5, #1
 8000ca6:	e7a0      	b.n	8000bea <HAL_GPIO_Init+0xde>
 8000ca8:	2502      	movs	r5, #2
 8000caa:	e79e      	b.n	8000bea <HAL_GPIO_Init+0xde>
 8000cac:	40010400 	.word	0x40010400
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010800 	.word	0x40010800
 8000cb8:	10210000 	.word	0x10210000
 8000cbc:	10310000 	.word	0x10310000
 8000cc0:	10320000 	.word	0x10320000
 8000cc4:	10110000 	.word	0x10110000
 8000cc8:	10220000 	.word	0x10220000

08000ccc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ccc:	6883      	ldr	r3, [r0, #8]
 8000cce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000cd0:	bf14      	ite	ne
 8000cd2:	2001      	movne	r0, #1
 8000cd4:	2000      	moveq	r0, #0
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cd8:	b10a      	cbz	r2, 8000cde <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cda:	6101      	str	r1, [r0, #16]
 8000cdc:	4770      	bx	lr
 8000cde:	0409      	lsls	r1, r1, #16
 8000ce0:	e7fb      	b.n	8000cda <HAL_GPIO_WritePin+0x2>
	...

08000ce4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce4:	6803      	ldr	r3, [r0, #0]
{
 8000ce6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cea:	07db      	lsls	r3, r3, #31
{
 8000cec:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cee:	d410      	bmi.n	8000d12 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cf0:	682b      	ldr	r3, [r5, #0]
 8000cf2:	079f      	lsls	r7, r3, #30
 8000cf4:	d45e      	bmi.n	8000db4 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cf6:	682b      	ldr	r3, [r5, #0]
 8000cf8:	0719      	lsls	r1, r3, #28
 8000cfa:	f100 8095 	bmi.w	8000e28 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cfe:	682b      	ldr	r3, [r5, #0]
 8000d00:	075a      	lsls	r2, r3, #29
 8000d02:	f100 80bf 	bmi.w	8000e84 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d06:	69ea      	ldr	r2, [r5, #28]
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 812d 	bne.w	8000f68 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000d0e:	2000      	movs	r0, #0
 8000d10:	e014      	b.n	8000d3c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d12:	4c90      	ldr	r4, [pc, #576]	; (8000f54 <HAL_RCC_OscConfig+0x270>)
 8000d14:	6863      	ldr	r3, [r4, #4]
 8000d16:	f003 030c 	and.w	r3, r3, #12
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	d007      	beq.n	8000d2e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d1e:	6863      	ldr	r3, [r4, #4]
 8000d20:	f003 030c 	and.w	r3, r3, #12
 8000d24:	2b08      	cmp	r3, #8
 8000d26:	d10c      	bne.n	8000d42 <HAL_RCC_OscConfig+0x5e>
 8000d28:	6863      	ldr	r3, [r4, #4]
 8000d2a:	03de      	lsls	r6, r3, #15
 8000d2c:	d509      	bpl.n	8000d42 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d2e:	6823      	ldr	r3, [r4, #0]
 8000d30:	039c      	lsls	r4, r3, #14
 8000d32:	d5dd      	bpl.n	8000cf0 <HAL_RCC_OscConfig+0xc>
 8000d34:	686b      	ldr	r3, [r5, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1da      	bne.n	8000cf0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000d3a:	2001      	movs	r0, #1
}
 8000d3c:	b002      	add	sp, #8
 8000d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d42:	686b      	ldr	r3, [r5, #4]
 8000d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d48:	d110      	bne.n	8000d6c <HAL_RCC_OscConfig+0x88>
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d50:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d52:	f7ff fe55 	bl	8000a00 <HAL_GetTick>
 8000d56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	0398      	lsls	r0, r3, #14
 8000d5c:	d4c8      	bmi.n	8000cf0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d5e:	f7ff fe4f 	bl	8000a00 <HAL_GetTick>
 8000d62:	1b80      	subs	r0, r0, r6
 8000d64:	2864      	cmp	r0, #100	; 0x64
 8000d66:	d9f7      	bls.n	8000d58 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000d68:	2003      	movs	r0, #3
 8000d6a:	e7e7      	b.n	8000d3c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d6c:	b99b      	cbnz	r3, 8000d96 <HAL_RCC_OscConfig+0xb2>
 8000d6e:	6823      	ldr	r3, [r4, #0]
 8000d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d74:	6023      	str	r3, [r4, #0]
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d7e:	f7ff fe3f 	bl	8000a00 <HAL_GetTick>
 8000d82:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	0399      	lsls	r1, r3, #14
 8000d88:	d5b2      	bpl.n	8000cf0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d8a:	f7ff fe39 	bl	8000a00 <HAL_GetTick>
 8000d8e:	1b80      	subs	r0, r0, r6
 8000d90:	2864      	cmp	r0, #100	; 0x64
 8000d92:	d9f7      	bls.n	8000d84 <HAL_RCC_OscConfig+0xa0>
 8000d94:	e7e8      	b.n	8000d68 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	d103      	bne.n	8000da6 <HAL_RCC_OscConfig+0xc2>
 8000d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da2:	6023      	str	r3, [r4, #0]
 8000da4:	e7d1      	b.n	8000d4a <HAL_RCC_OscConfig+0x66>
 8000da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000daa:	6023      	str	r3, [r4, #0]
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db2:	e7cd      	b.n	8000d50 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000db4:	4c67      	ldr	r4, [pc, #412]	; (8000f54 <HAL_RCC_OscConfig+0x270>)
 8000db6:	6863      	ldr	r3, [r4, #4]
 8000db8:	f013 0f0c 	tst.w	r3, #12
 8000dbc:	d007      	beq.n	8000dce <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dbe:	6863      	ldr	r3, [r4, #4]
 8000dc0:	f003 030c 	and.w	r3, r3, #12
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d110      	bne.n	8000dea <HAL_RCC_OscConfig+0x106>
 8000dc8:	6863      	ldr	r3, [r4, #4]
 8000dca:	03da      	lsls	r2, r3, #15
 8000dcc:	d40d      	bmi.n	8000dea <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dce:	6823      	ldr	r3, [r4, #0]
 8000dd0:	079b      	lsls	r3, r3, #30
 8000dd2:	d502      	bpl.n	8000dda <HAL_RCC_OscConfig+0xf6>
 8000dd4:	692b      	ldr	r3, [r5, #16]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d1af      	bne.n	8000d3a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	696a      	ldr	r2, [r5, #20]
 8000dde:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000de2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000de6:	6023      	str	r3, [r4, #0]
 8000de8:	e785      	b.n	8000cf6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dea:	692a      	ldr	r2, [r5, #16]
 8000dec:	4b5a      	ldr	r3, [pc, #360]	; (8000f58 <HAL_RCC_OscConfig+0x274>)
 8000dee:	b16a      	cbz	r2, 8000e0c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000df0:	2201      	movs	r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000df4:	f7ff fe04 	bl	8000a00 <HAL_GetTick>
 8000df8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	079f      	lsls	r7, r3, #30
 8000dfe:	d4ec      	bmi.n	8000dda <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e00:	f7ff fdfe 	bl	8000a00 <HAL_GetTick>
 8000e04:	1b80      	subs	r0, r0, r6
 8000e06:	2802      	cmp	r0, #2
 8000e08:	d9f7      	bls.n	8000dfa <HAL_RCC_OscConfig+0x116>
 8000e0a:	e7ad      	b.n	8000d68 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000e0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e0e:	f7ff fdf7 	bl	8000a00 <HAL_GetTick>
 8000e12:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	0798      	lsls	r0, r3, #30
 8000e18:	f57f af6d 	bpl.w	8000cf6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fdf0 	bl	8000a00 <HAL_GetTick>
 8000e20:	1b80      	subs	r0, r0, r6
 8000e22:	2802      	cmp	r0, #2
 8000e24:	d9f6      	bls.n	8000e14 <HAL_RCC_OscConfig+0x130>
 8000e26:	e79f      	b.n	8000d68 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e28:	69aa      	ldr	r2, [r5, #24]
 8000e2a:	4c4a      	ldr	r4, [pc, #296]	; (8000f54 <HAL_RCC_OscConfig+0x270>)
 8000e2c:	4b4b      	ldr	r3, [pc, #300]	; (8000f5c <HAL_RCC_OscConfig+0x278>)
 8000e2e:	b1da      	cbz	r2, 8000e68 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000e30:	2201      	movs	r2, #1
 8000e32:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e34:	f7ff fde4 	bl	8000a00 <HAL_GetTick>
 8000e38:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e3c:	079b      	lsls	r3, r3, #30
 8000e3e:	d50d      	bpl.n	8000e5c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000e40:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000e44:	4b46      	ldr	r3, [pc, #280]	; (8000f60 <HAL_RCC_OscConfig+0x27c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e4c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000e4e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000e50:	9b01      	ldr	r3, [sp, #4]
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	9201      	str	r2, [sp, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f9      	bne.n	8000e4e <HAL_RCC_OscConfig+0x16a>
 8000e5a:	e750      	b.n	8000cfe <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e5c:	f7ff fdd0 	bl	8000a00 <HAL_GetTick>
 8000e60:	1b80      	subs	r0, r0, r6
 8000e62:	2802      	cmp	r0, #2
 8000e64:	d9e9      	bls.n	8000e3a <HAL_RCC_OscConfig+0x156>
 8000e66:	e77f      	b.n	8000d68 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000e68:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fdc9 	bl	8000a00 <HAL_GetTick>
 8000e6e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e72:	079f      	lsls	r7, r3, #30
 8000e74:	f57f af43 	bpl.w	8000cfe <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e78:	f7ff fdc2 	bl	8000a00 <HAL_GetTick>
 8000e7c:	1b80      	subs	r0, r0, r6
 8000e7e:	2802      	cmp	r0, #2
 8000e80:	d9f6      	bls.n	8000e70 <HAL_RCC_OscConfig+0x18c>
 8000e82:	e771      	b.n	8000d68 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e84:	4c33      	ldr	r4, [pc, #204]	; (8000f54 <HAL_RCC_OscConfig+0x270>)
 8000e86:	69e3      	ldr	r3, [r4, #28]
 8000e88:	00d8      	lsls	r0, r3, #3
 8000e8a:	d424      	bmi.n	8000ed6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000e8c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	69e3      	ldr	r3, [r4, #28]
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	61e3      	str	r3, [r4, #28]
 8000e96:	69e3      	ldr	r3, [r4, #28]
 8000e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea0:	4e30      	ldr	r6, [pc, #192]	; (8000f64 <HAL_RCC_OscConfig+0x280>)
 8000ea2:	6833      	ldr	r3, [r6, #0]
 8000ea4:	05d9      	lsls	r1, r3, #23
 8000ea6:	d518      	bpl.n	8000eda <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea8:	68eb      	ldr	r3, [r5, #12]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d126      	bne.n	8000efc <HAL_RCC_OscConfig+0x218>
 8000eae:	6a23      	ldr	r3, [r4, #32]
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000eb6:	f7ff fda3 	bl	8000a00 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eba:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ebe:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec0:	6a23      	ldr	r3, [r4, #32]
 8000ec2:	079b      	lsls	r3, r3, #30
 8000ec4:	d53f      	bpl.n	8000f46 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000ec6:	2f00      	cmp	r7, #0
 8000ec8:	f43f af1d 	beq.w	8000d06 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ecc:	69e3      	ldr	r3, [r4, #28]
 8000ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	61e3      	str	r3, [r4, #28]
 8000ed4:	e717      	b.n	8000d06 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000ed6:	2700      	movs	r7, #0
 8000ed8:	e7e2      	b.n	8000ea0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eda:	6833      	ldr	r3, [r6, #0]
 8000edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ee2:	f7ff fd8d 	bl	8000a00 <HAL_GetTick>
 8000ee6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee8:	6833      	ldr	r3, [r6, #0]
 8000eea:	05da      	lsls	r2, r3, #23
 8000eec:	d4dc      	bmi.n	8000ea8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eee:	f7ff fd87 	bl	8000a00 <HAL_GetTick>
 8000ef2:	eba0 0008 	sub.w	r0, r0, r8
 8000ef6:	2864      	cmp	r0, #100	; 0x64
 8000ef8:	d9f6      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x204>
 8000efa:	e735      	b.n	8000d68 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000efc:	b9ab      	cbnz	r3, 8000f2a <HAL_RCC_OscConfig+0x246>
 8000efe:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f00:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f04:	f023 0301 	bic.w	r3, r3, #1
 8000f08:	6223      	str	r3, [r4, #32]
 8000f0a:	6a23      	ldr	r3, [r4, #32]
 8000f0c:	f023 0304 	bic.w	r3, r3, #4
 8000f10:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f12:	f7ff fd75 	bl	8000a00 <HAL_GetTick>
 8000f16:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f18:	6a23      	ldr	r3, [r4, #32]
 8000f1a:	0798      	lsls	r0, r3, #30
 8000f1c:	d5d3      	bpl.n	8000ec6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f1e:	f7ff fd6f 	bl	8000a00 <HAL_GetTick>
 8000f22:	1b80      	subs	r0, r0, r6
 8000f24:	4540      	cmp	r0, r8
 8000f26:	d9f7      	bls.n	8000f18 <HAL_RCC_OscConfig+0x234>
 8000f28:	e71e      	b.n	8000d68 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f2a:	2b05      	cmp	r3, #5
 8000f2c:	6a23      	ldr	r3, [r4, #32]
 8000f2e:	d103      	bne.n	8000f38 <HAL_RCC_OscConfig+0x254>
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6223      	str	r3, [r4, #32]
 8000f36:	e7ba      	b.n	8000eae <HAL_RCC_OscConfig+0x1ca>
 8000f38:	f023 0301 	bic.w	r3, r3, #1
 8000f3c:	6223      	str	r3, [r4, #32]
 8000f3e:	6a23      	ldr	r3, [r4, #32]
 8000f40:	f023 0304 	bic.w	r3, r3, #4
 8000f44:	e7b6      	b.n	8000eb4 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f46:	f7ff fd5b 	bl	8000a00 <HAL_GetTick>
 8000f4a:	eba0 0008 	sub.w	r0, r0, r8
 8000f4e:	42b0      	cmp	r0, r6
 8000f50:	d9b6      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x1dc>
 8000f52:	e709      	b.n	8000d68 <HAL_RCC_OscConfig+0x84>
 8000f54:	40021000 	.word	0x40021000
 8000f58:	42420000 	.word	0x42420000
 8000f5c:	42420480 	.word	0x42420480
 8000f60:	20000008 	.word	0x20000008
 8000f64:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f68:	4c22      	ldr	r4, [pc, #136]	; (8000ff4 <HAL_RCC_OscConfig+0x310>)
 8000f6a:	6863      	ldr	r3, [r4, #4]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	2b08      	cmp	r3, #8
 8000f72:	f43f aee2 	beq.w	8000d3a <HAL_RCC_OscConfig+0x56>
 8000f76:	2300      	movs	r3, #0
 8000f78:	4e1f      	ldr	r6, [pc, #124]	; (8000ff8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f7a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f7c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f7e:	d12b      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000f80:	f7ff fd3e 	bl	8000a00 <HAL_GetTick>
 8000f84:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	0199      	lsls	r1, r3, #6
 8000f8a:	d41f      	bmi.n	8000fcc <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f8c:	6a2b      	ldr	r3, [r5, #32]
 8000f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f92:	d105      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f94:	6862      	ldr	r2, [r4, #4]
 8000f96:	68a9      	ldr	r1, [r5, #8]
 8000f98:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fa0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000fa2:	6862      	ldr	r2, [r4, #4]
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000faa:	4313      	orrs	r3, r2
 8000fac:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fae:	2301      	movs	r3, #1
 8000fb0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fd25 	bl	8000a00 <HAL_GetTick>
 8000fb6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fb8:	6823      	ldr	r3, [r4, #0]
 8000fba:	019a      	lsls	r2, r3, #6
 8000fbc:	f53f aea7 	bmi.w	8000d0e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc0:	f7ff fd1e 	bl	8000a00 <HAL_GetTick>
 8000fc4:	1b40      	subs	r0, r0, r5
 8000fc6:	2802      	cmp	r0, #2
 8000fc8:	d9f6      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x2d4>
 8000fca:	e6cd      	b.n	8000d68 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fcc:	f7ff fd18 	bl	8000a00 <HAL_GetTick>
 8000fd0:	1bc0      	subs	r0, r0, r7
 8000fd2:	2802      	cmp	r0, #2
 8000fd4:	d9d7      	bls.n	8000f86 <HAL_RCC_OscConfig+0x2a2>
 8000fd6:	e6c7      	b.n	8000d68 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fd12 	bl	8000a00 <HAL_GetTick>
 8000fdc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fde:	6823      	ldr	r3, [r4, #0]
 8000fe0:	019b      	lsls	r3, r3, #6
 8000fe2:	f57f ae94 	bpl.w	8000d0e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe6:	f7ff fd0b 	bl	8000a00 <HAL_GetTick>
 8000fea:	1b40      	subs	r0, r0, r5
 8000fec:	2802      	cmp	r0, #2
 8000fee:	d9f6      	bls.n	8000fde <HAL_RCC_OscConfig+0x2fa>
 8000ff0:	e6ba      	b.n	8000d68 <HAL_RCC_OscConfig+0x84>
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	42420060 	.word	0x42420060

08000ffc <HAL_RCC_GetSysClockFreq>:
{
 8000ffc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001000:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001002:	ac02      	add	r4, sp, #8
 8001004:	f103 0510 	add.w	r5, r3, #16
 8001008:	4622      	mov	r2, r4
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	6859      	ldr	r1, [r3, #4]
 800100e:	3308      	adds	r3, #8
 8001010:	c203      	stmia	r2!, {r0, r1}
 8001012:	42ab      	cmp	r3, r5
 8001014:	4614      	mov	r4, r2
 8001016:	d1f7      	bne.n	8001008 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001018:	2301      	movs	r3, #1
 800101a:	f88d 3004 	strb.w	r3, [sp, #4]
 800101e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001020:	4911      	ldr	r1, [pc, #68]	; (8001068 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001022:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001026:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001028:	f003 020c 	and.w	r2, r3, #12
 800102c:	2a08      	cmp	r2, #8
 800102e:	d117      	bne.n	8001060 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001030:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001034:	a806      	add	r0, sp, #24
 8001036:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001038:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800103a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800103e:	d50c      	bpl.n	800105a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001040:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001044:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001048:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800104a:	aa06      	add	r2, sp, #24
 800104c:	4413      	add	r3, r2
 800104e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001052:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001056:	b007      	add	sp, #28
 8001058:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_RCC_GetSysClockFreq+0x74>)
 800105c:	4350      	muls	r0, r2
 800105e:	e7fa      	b.n	8001056 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001062:	e7f8      	b.n	8001056 <HAL_RCC_GetSysClockFreq+0x5a>
 8001064:	08001a40 	.word	0x08001a40
 8001068:	40021000 	.word	0x40021000
 800106c:	007a1200 	.word	0x007a1200
 8001070:	003d0900 	.word	0x003d0900

08001074 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001074:	4a4d      	ldr	r2, [pc, #308]	; (80011ac <HAL_RCC_ClockConfig+0x138>)
{
 8001076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800107a:	6813      	ldr	r3, [r2, #0]
{
 800107c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	428b      	cmp	r3, r1
{
 8001084:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001086:	d328      	bcc.n	80010da <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001088:	682a      	ldr	r2, [r5, #0]
 800108a:	0791      	lsls	r1, r2, #30
 800108c:	d432      	bmi.n	80010f4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800108e:	07d2      	lsls	r2, r2, #31
 8001090:	d438      	bmi.n	8001104 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001092:	4a46      	ldr	r2, [pc, #280]	; (80011ac <HAL_RCC_ClockConfig+0x138>)
 8001094:	6813      	ldr	r3, [r2, #0]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	429e      	cmp	r6, r3
 800109c:	d373      	bcc.n	8001186 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800109e:	682a      	ldr	r2, [r5, #0]
 80010a0:	4c43      	ldr	r4, [pc, #268]	; (80011b0 <HAL_RCC_ClockConfig+0x13c>)
 80010a2:	f012 0f04 	tst.w	r2, #4
 80010a6:	d179      	bne.n	800119c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a8:	0713      	lsls	r3, r2, #28
 80010aa:	d506      	bpl.n	80010ba <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010ac:	6863      	ldr	r3, [r4, #4]
 80010ae:	692a      	ldr	r2, [r5, #16]
 80010b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010b8:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010ba:	f7ff ff9f 	bl	8000ffc <HAL_RCC_GetSysClockFreq>
 80010be:	6863      	ldr	r3, [r4, #4]
 80010c0:	4a3c      	ldr	r2, [pc, #240]	; (80011b4 <HAL_RCC_ClockConfig+0x140>)
 80010c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010c6:	5cd3      	ldrb	r3, [r2, r3]
 80010c8:	40d8      	lsrs	r0, r3
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <HAL_RCC_ClockConfig+0x144>)
 80010cc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff fc56 	bl	8000980 <HAL_InitTick>
  return HAL_OK;
 80010d4:	2000      	movs	r0, #0
}
 80010d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010da:	6813      	ldr	r3, [r2, #0]
 80010dc:	f023 0307 	bic.w	r3, r3, #7
 80010e0:	430b      	orrs	r3, r1
 80010e2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010e4:	6813      	ldr	r3, [r2, #0]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d0cc      	beq.n	8001088 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80010ee:	2001      	movs	r0, #1
 80010f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010f4:	492e      	ldr	r1, [pc, #184]	; (80011b0 <HAL_RCC_ClockConfig+0x13c>)
 80010f6:	68a8      	ldr	r0, [r5, #8]
 80010f8:	684b      	ldr	r3, [r1, #4]
 80010fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010fe:	4303      	orrs	r3, r0
 8001100:	604b      	str	r3, [r1, #4]
 8001102:	e7c4      	b.n	800108e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001104:	686a      	ldr	r2, [r5, #4]
 8001106:	4c2a      	ldr	r4, [pc, #168]	; (80011b0 <HAL_RCC_ClockConfig+0x13c>)
 8001108:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800110c:	d11c      	bne.n	8001148 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001112:	d0ec      	beq.n	80010ee <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001114:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001116:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800111a:	f023 0303 	bic.w	r3, r3, #3
 800111e:	4313      	orrs	r3, r2
 8001120:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001122:	f7ff fc6d 	bl	8000a00 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001126:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001128:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112a:	2b01      	cmp	r3, #1
 800112c:	d114      	bne.n	8001158 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800112e:	6863      	ldr	r3, [r4, #4]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b04      	cmp	r3, #4
 8001136:	d0ac      	beq.n	8001092 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001138:	f7ff fc62 	bl	8000a00 <HAL_GetTick>
 800113c:	1bc0      	subs	r0, r0, r7
 800113e:	4540      	cmp	r0, r8
 8001140:	d9f5      	bls.n	800112e <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001142:	2003      	movs	r0, #3
 8001144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001148:	2a02      	cmp	r2, #2
 800114a:	d102      	bne.n	8001152 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001150:	e7df      	b.n	8001112 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001152:	f013 0f02 	tst.w	r3, #2
 8001156:	e7dc      	b.n	8001112 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001158:	2b02      	cmp	r3, #2
 800115a:	d10f      	bne.n	800117c <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800115c:	6863      	ldr	r3, [r4, #4]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	2b08      	cmp	r3, #8
 8001164:	d095      	beq.n	8001092 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001166:	f7ff fc4b 	bl	8000a00 <HAL_GetTick>
 800116a:	1bc0      	subs	r0, r0, r7
 800116c:	4540      	cmp	r0, r8
 800116e:	d9f5      	bls.n	800115c <HAL_RCC_ClockConfig+0xe8>
 8001170:	e7e7      	b.n	8001142 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001172:	f7ff fc45 	bl	8000a00 <HAL_GetTick>
 8001176:	1bc0      	subs	r0, r0, r7
 8001178:	4540      	cmp	r0, r8
 800117a:	d8e2      	bhi.n	8001142 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800117c:	6863      	ldr	r3, [r4, #4]
 800117e:	f013 0f0c 	tst.w	r3, #12
 8001182:	d1f6      	bne.n	8001172 <HAL_RCC_ClockConfig+0xfe>
 8001184:	e785      	b.n	8001092 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	6813      	ldr	r3, [r2, #0]
 8001188:	f023 0307 	bic.w	r3, r3, #7
 800118c:	4333      	orrs	r3, r6
 800118e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001190:	6813      	ldr	r3, [r2, #0]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	429e      	cmp	r6, r3
 8001198:	d1a9      	bne.n	80010ee <HAL_RCC_ClockConfig+0x7a>
 800119a:	e780      	b.n	800109e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800119c:	6863      	ldr	r3, [r4, #4]
 800119e:	68e9      	ldr	r1, [r5, #12]
 80011a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011a4:	430b      	orrs	r3, r1
 80011a6:	6063      	str	r3, [r4, #4]
 80011a8:	e77e      	b.n	80010a8 <HAL_RCC_ClockConfig+0x34>
 80011aa:	bf00      	nop
 80011ac:	40022000 	.word	0x40022000
 80011b0:	40021000 	.word	0x40021000
 80011b4:	08001a66 	.word	0x08001a66
 80011b8:	20000008 	.word	0x20000008

080011bc <HAL_RCC_GetHCLKFreq>:
}
 80011bc:	4b01      	ldr	r3, [pc, #4]	; (80011c4 <HAL_RCC_GetHCLKFreq+0x8>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008

080011c8 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 80011c8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80011cc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	f04f 0302 	mov.w	r3, #2
 80011d4:	d01c      	beq.n	8001210 <HAL_TIM_ConfigClockSource+0x48>
 80011d6:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 80011d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80011dc:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80011de:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80011e2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80011e4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80011e8:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80011ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80011ee:	680a      	ldr	r2, [r1, #0]
 80011f0:	2a40      	cmp	r2, #64	; 0x40
 80011f2:	d079      	beq.n	80012e8 <HAL_TIM_ConfigClockSource+0x120>
 80011f4:	d819      	bhi.n	800122a <HAL_TIM_ConfigClockSource+0x62>
 80011f6:	2a10      	cmp	r2, #16
 80011f8:	f000 8093 	beq.w	8001322 <HAL_TIM_ConfigClockSource+0x15a>
 80011fc:	d80a      	bhi.n	8001214 <HAL_TIM_ConfigClockSource+0x4c>
 80011fe:	2a00      	cmp	r2, #0
 8001200:	f000 8089 	beq.w	8001316 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001204:	2301      	movs	r3, #1
 8001206:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800120a:	2300      	movs	r3, #0
 800120c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001210:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001212:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001214:	2a20      	cmp	r2, #32
 8001216:	f000 808a 	beq.w	800132e <HAL_TIM_ConfigClockSource+0x166>
 800121a:	2a30      	cmp	r2, #48	; 0x30
 800121c:	d1f2      	bne.n	8001204 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800121e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001220:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001224:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001228:	e036      	b.n	8001298 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800122a:	2a70      	cmp	r2, #112	; 0x70
 800122c:	d036      	beq.n	800129c <HAL_TIM_ConfigClockSource+0xd4>
 800122e:	d81b      	bhi.n	8001268 <HAL_TIM_ConfigClockSource+0xa0>
 8001230:	2a50      	cmp	r2, #80	; 0x50
 8001232:	d042      	beq.n	80012ba <HAL_TIM_ConfigClockSource+0xf2>
 8001234:	2a60      	cmp	r2, #96	; 0x60
 8001236:	d1e5      	bne.n	8001204 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001238:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800123a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800123c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001240:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001242:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001244:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001246:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001248:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800124c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001250:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001254:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001258:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800125a:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800125c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800125e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001262:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001266:	e017      	b.n	8001298 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001268:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800126c:	d011      	beq.n	8001292 <HAL_TIM_ConfigClockSource+0xca>
 800126e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001272:	d1c7      	bne.n	8001204 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001274:	688a      	ldr	r2, [r1, #8]
 8001276:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001278:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800127a:	68c9      	ldr	r1, [r1, #12]
 800127c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800127e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001282:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001286:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001288:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001290:	e002      	b.n	8001298 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	e7b3      	b.n	8001204 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800129c:	688a      	ldr	r2, [r1, #8]
 800129e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80012a0:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012a2:	68c9      	ldr	r1, [r1, #12]
 80012a4:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012a6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012ae:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80012b0:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80012b2:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80012b4:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80012b8:	e7ee      	b.n	8001298 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80012ba:	684c      	ldr	r4, [r1, #4]
 80012bc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80012be:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012c0:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80012c2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012c6:	f025 0501 	bic.w	r5, r5, #1
 80012ca:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012cc:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80012ce:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80012d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80012d4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80012d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80012da:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80012dc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80012de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80012e2:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80012e6:	e7d7      	b.n	8001298 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80012e8:	684c      	ldr	r4, [r1, #4]
 80012ea:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80012ec:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012ee:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80012f0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012f4:	f025 0501 	bic.w	r5, r5, #1
 80012f8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012fa:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80012fc:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80012fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001302:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001308:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800130a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800130c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001310:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001314:	e7c0      	b.n	8001298 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001316:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001318:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800131c:	f042 0207 	orr.w	r2, r2, #7
 8001320:	e7ba      	b.n	8001298 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001322:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001324:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001328:	f042 0217 	orr.w	r2, r2, #23
 800132c:	e7b4      	b.n	8001298 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800132e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001330:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001334:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001338:	e7ae      	b.n	8001298 <HAL_TIM_ConfigClockSource+0xd0>
	...

0800133c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800133c:	4a1a      	ldr	r2, [pc, #104]	; (80013a8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800133e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001340:	4290      	cmp	r0, r2
 8001342:	d00a      	beq.n	800135a <TIM_Base_SetConfig+0x1e>
 8001344:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001348:	d007      	beq.n	800135a <TIM_Base_SetConfig+0x1e>
 800134a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800134e:	4290      	cmp	r0, r2
 8001350:	d003      	beq.n	800135a <TIM_Base_SetConfig+0x1e>
 8001352:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001356:	4290      	cmp	r0, r2
 8001358:	d115      	bne.n	8001386 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800135a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800135c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001360:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001362:	4a11      	ldr	r2, [pc, #68]	; (80013a8 <TIM_Base_SetConfig+0x6c>)
 8001364:	4290      	cmp	r0, r2
 8001366:	d00a      	beq.n	800137e <TIM_Base_SetConfig+0x42>
 8001368:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800136c:	d007      	beq.n	800137e <TIM_Base_SetConfig+0x42>
 800136e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001372:	4290      	cmp	r0, r2
 8001374:	d003      	beq.n	800137e <TIM_Base_SetConfig+0x42>
 8001376:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800137a:	4290      	cmp	r0, r2
 800137c:	d103      	bne.n	8001386 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800137e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001384:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001386:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800138c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800138e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001390:	688b      	ldr	r3, [r1, #8]
 8001392:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001394:	680b      	ldr	r3, [r1, #0]
 8001396:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <TIM_Base_SetConfig+0x6c>)
 800139a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800139c:	bf04      	itt	eq
 800139e:	690b      	ldreq	r3, [r1, #16]
 80013a0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80013a2:	2301      	movs	r3, #1
 80013a4:	6143      	str	r3, [r0, #20]
 80013a6:	4770      	bx	lr
 80013a8:	40012c00 	.word	0x40012c00

080013ac <HAL_TIM_Base_Init>:
{
 80013ac:	b510      	push	{r4, lr}
  if(htim == NULL)
 80013ae:	4604      	mov	r4, r0
 80013b0:	b1a0      	cbz	r0, 80013dc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80013b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80013b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013ba:	b91b      	cbnz	r3, 80013c4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80013bc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80013c0:	f000 fad4 	bl	800196c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80013c4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013c6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80013c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013cc:	1d21      	adds	r1, r4, #4
 80013ce:	f7ff ffb5 	bl	800133c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80013d2:	2301      	movs	r3, #1
  return HAL_OK;
 80013d4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80013d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80013da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80013dc:	2001      	movs	r0, #1
}
 80013de:	bd10      	pop	{r4, pc}

080013e0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80013e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80013e4:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	f04f 0302 	mov.w	r3, #2
 80013ec:	d018      	beq.n	8001420 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80013ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80013f2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80013f4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80013f6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80013f8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80013fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013fe:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4322      	orrs	r2, r4
 8001404:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800140c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	430a      	orrs	r2, r1
 8001412:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001414:	2301      	movs	r3, #1
 8001416:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800141a:	2300      	movs	r3, #0
 800141c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001420:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001422:	bd10      	pop	{r4, pc}

08001424 <startWatch>:
	}
}

void startWatch()
{
	timer->CNT = 0; //Reset Counter
 8001424:	2200      	movs	r2, #0
 8001426:	4b02      	ldr	r3, [pc, #8]	; (8001430 <startWatch+0xc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	625a      	str	r2, [r3, #36]	; 0x24
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	2000002c 	.word	0x2000002c

08001434 <dht11_ini>:
{
	return timer->CNT;
}

void dht11_ini(GPIO_TypeDef *gpio_port, uint16_t gpio_pin, TIM_TypeDef *tim)
{
 8001434:	b570      	push	{r4, r5, r6, lr}
	/* GPIO CONFIGURATION */
	port = gpio_port;
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <dht11_ini+0x98>)
{
 8001438:	b08a      	sub	sp, #40	; 0x28
	port = gpio_port;
 800143a:	6018      	str	r0, [r3, #0]
	pin = gpio_pin;
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <dht11_ini+0x9c>)
{
 800143e:	4614      	mov	r4, r2

	GPIO_InitTypeDef GPIO_InitStruct;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
{
 8001442:	460e      	mov	r6, r1
	pin = gpio_pin;
 8001444:	8019      	strh	r1, [r3, #0]
{
 8001446:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_SET);
 8001448:	f7ff fc46 	bl	8000cd8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin */
	GPIO_InitStruct.Pin = gpio_pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001450:	2303      	movs	r3, #3
	HAL_GPIO_Init(gpio_port, &GPIO_InitStruct);
 8001452:	4628      	mov	r0, r5
 8001454:	a902      	add	r1, sp, #8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001456:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pin = gpio_pin;
 8001458:	9602      	str	r6, [sp, #8]
	HAL_GPIO_Init(gpio_port, &GPIO_InitStruct);
 800145a:	f7ff fb57 	bl	8000b0c <HAL_GPIO_Init>

	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim1.Instance = TIM1;
	htim1.Init.Prescaler = 7;
 800145e:	f04f 0c07 	mov.w	ip, #7
	timer = tim;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <dht11_ini+0xa0>)
	htim1.Instance = TIM1;
 8001464:	481c      	ldr	r0, [pc, #112]	; (80014d8 <dht11_ini+0xa4>)
	timer = tim;
 8001466:	601c      	str	r4, [r3, #0]
	htim1.Init.Prescaler = 7;
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <dht11_ini+0xa8>)
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim1.Init.Period = 0xFFFF;
 800146a:	f64f 72ff 	movw	r2, #65535	; 0xffff
	htim1.Init.Prescaler = 7;
 800146e:	e880 1008 	stmia.w	r0, {r3, ip}
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	2300      	movs	r3, #0
	htim1.Init.Period = 0xFFFF;
 8001474:	60c2      	str	r2, [r0, #12]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	6083      	str	r3, [r0, #8]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001478:	6103      	str	r3, [r0, #16]
	htim1.Init.RepetitionCounter = 0;
 800147a:	6143      	str	r3, [r0, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147c:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800147e:	f7ff ff95 	bl	80013ac <HAL_TIM_Base_Init>
 8001482:	b118      	cbz	r0, 800148c <dht11_ini+0x58>
	{
	_Error_Handler(__FILE__, __LINE__);
 8001484:	213f      	movs	r1, #63	; 0x3f
 8001486:	4816      	ldr	r0, [pc, #88]	; (80014e0 <dht11_ini+0xac>)
 8001488:	f000 fa3a 	bl	8001900 <_Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001490:	a90a      	add	r1, sp, #40	; 0x28
 8001492:	f841 3d10 	str.w	r3, [r1, #-16]!
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001496:	4810      	ldr	r0, [pc, #64]	; (80014d8 <dht11_ini+0xa4>)
 8001498:	f7ff fe96 	bl	80011c8 <HAL_TIM_ConfigClockSource>
 800149c:	b118      	cbz	r0, 80014a6 <dht11_ini+0x72>
	{
	_Error_Handler(__FILE__, __LINE__);
 800149e:	2145      	movs	r1, #69	; 0x45
 80014a0:	480f      	ldr	r0, [pc, #60]	; (80014e0 <dht11_ini+0xac>)
 80014a2:	f000 fa2d 	bl	8001900 <_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014a8:	4669      	mov	r1, sp
 80014aa:	480b      	ldr	r0, [pc, #44]	; (80014d8 <dht11_ini+0xa4>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ac:	9300      	str	r3, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	9301      	str	r3, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014b0:	f7ff ff96 	bl	80013e0 <HAL_TIMEx_MasterConfigSynchronization>
 80014b4:	b118      	cbz	r0, 80014be <dht11_ini+0x8a>
	{
	_Error_Handler(__FILE__, __LINE__);
 80014b6:	214c      	movs	r1, #76	; 0x4c
 80014b8:	4809      	ldr	r0, [pc, #36]	; (80014e0 <dht11_ini+0xac>)
 80014ba:	f000 fa21 	bl	8001900 <_Error_Handler>
	}

	//Enable
	tim->CR1 |= TIM_CR1_CEN;
 80014be:	6823      	ldr	r3, [r4, #0]
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6023      	str	r3, [r4, #0]

}
 80014c6:	b00a      	add	sp, #40	; 0x28
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
 80014ca:	bf00      	nop
 80014cc:	20000034 	.word	0x20000034
 80014d0:	20000030 	.word	0x20000030
 80014d4:	2000002c 	.word	0x2000002c
 80014d8:	20000038 	.word	0x20000038
 80014dc:	40012c00 	.word	0x40012c00
 80014e0:	08001a50 	.word	0x08001a50

080014e4 <checkResponse>:


}

uint8_t checkResponse()
{
 80014e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	//Configure Pin as Input
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = pin;
 80014e8:	4d2a      	ldr	r5, [pc, #168]	; (8001594 <checkResponse+0xb0>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ea:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = pin;
 80014ec:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(port, &GPIO_InitStruct); //Now configured as Input
 80014ee:	4e2a      	ldr	r6, [pc, #168]	; (8001598 <checkResponse+0xb4>)
	GPIO_InitStruct.Pin = pin;
 80014f0:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f2:	2301      	movs	r3, #1
	HAL_GPIO_Init(port, &GPIO_InitStruct); //Now configured as Input
 80014f4:	4669      	mov	r1, sp
 80014f6:	6830      	ldr	r0, [r6, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f8:	9401      	str	r4, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fa:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(port, &GPIO_InitStruct); //Now configured as Input
 80014fc:	f7ff fb06 	bl	8000b0c <HAL_GPIO_Init>
	uint32_t timeOut = 0;
	while((HAL_GPIO_ReadPin(port, pin) == 1) && (timeOut++ < TIMEOUT));
 8001500:	4f26      	ldr	r7, [pc, #152]	; (800159c <checkResponse+0xb8>)
 8001502:	8829      	ldrh	r1, [r5, #0]
 8001504:	6830      	ldr	r0, [r6, #0]
 8001506:	f7ff fbe1 	bl	8000ccc <HAL_GPIO_ReadPin>
 800150a:	2801      	cmp	r0, #1
 800150c:	d031      	beq.n	8001572 <checkResponse+0x8e>
	if(timeOut >= TIMEOUT)
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <checkResponse+0xbc>)
 8001510:	429c      	cmp	r4, r3
 8001512:	d03d      	beq.n	8001590 <checkResponse+0xac>
		//ERROR: No Answer
		return RESPONSE_NO_ACTION;
	}

	//Pin is now Pulled LOW
	startWatch();
 8001514:	f7ff ff86 	bl	8001424 <startWatch>
	timeOut = 0;
 8001518:	2400      	movs	r4, #0
	while((HAL_GPIO_ReadPin(port, pin) == 0) && (timeOut++ < TIMEOUT));
 800151a:	4f20      	ldr	r7, [pc, #128]	; (800159c <checkResponse+0xb8>)
 800151c:	8829      	ldrh	r1, [r5, #0]
 800151e:	6830      	ldr	r0, [r6, #0]
 8001520:	f7ff fbd4 	bl	8000ccc <HAL_GPIO_ReadPin>
 8001524:	b358      	cbz	r0, 800157e <checkResponse+0x9a>
	if(timeOut >= TIMEOUT || readWatch() < 80-TOLLERANCE || readWatch() > 80+TOLLERANCE)
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <checkResponse+0xbc>)
 8001528:	429c      	cmp	r4, r3
 800152a:	d02b      	beq.n	8001584 <checkResponse+0xa0>
	return timer->CNT;
 800152c:	4f1d      	ldr	r7, [pc, #116]	; (80015a4 <checkResponse+0xc0>)
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	6a53      	ldr	r3, [r2, #36]	; 0x24
	if(timeOut >= TIMEOUT || readWatch() < 80-TOLLERANCE || readWatch() > 80+TOLLERANCE)
 8001532:	b29b      	uxth	r3, r3
 8001534:	2b31      	cmp	r3, #49	; 0x31
 8001536:	d925      	bls.n	8001584 <checkResponse+0xa0>
	return timer->CNT;
 8001538:	6a53      	ldr	r3, [r2, #36]	; 0x24
	if(timeOut >= TIMEOUT || readWatch() < 80-TOLLERANCE || readWatch() > 80+TOLLERANCE)
 800153a:	b29b      	uxth	r3, r3
 800153c:	2b6e      	cmp	r3, #110	; 0x6e
 800153e:	d821      	bhi.n	8001584 <checkResponse+0xa0>
	{
		//ERROR: Wrong Answer
		return RESPONSE_WRONG_ANSWER;
	}
	//Pin is now Pulled HIGH
	startWatch();
 8001540:	f7ff ff70 	bl	8001424 <startWatch>
	//Wait for LOW
	timeOut = 0;
 8001544:	2400      	movs	r4, #0
	while((HAL_GPIO_ReadPin(port, pin) == 1) && (timeOut++ < TIMEOUT));
 8001546:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800159c <checkResponse+0xb8>
 800154a:	8829      	ldrh	r1, [r5, #0]
 800154c:	6830      	ldr	r0, [r6, #0]
 800154e:	f7ff fbbd 	bl	8000ccc <HAL_GPIO_ReadPin>
 8001552:	2801      	cmp	r0, #1
 8001554:	d018      	beq.n	8001588 <checkResponse+0xa4>
	if(timeOut >= TIMEOUT || readWatch() < 80-TOLLERANCE || readWatch() > 80+TOLLERANCE)
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <checkResponse+0xbc>)
 8001558:	429c      	cmp	r4, r3
 800155a:	d013      	beq.n	8001584 <checkResponse+0xa0>
	return timer->CNT;
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	6a53      	ldr	r3, [r2, #36]	; 0x24
	if(timeOut >= TIMEOUT || readWatch() < 80-TOLLERANCE || readWatch() > 80+TOLLERANCE)
 8001560:	b29b      	uxth	r3, r3
 8001562:	2b31      	cmp	r3, #49	; 0x31
 8001564:	d90e      	bls.n	8001584 <checkResponse+0xa0>
	return timer->CNT;
 8001566:	6a53      	ldr	r3, [r2, #36]	; 0x24
	if(timeOut >= TIMEOUT || readWatch() < 80-TOLLERANCE || readWatch() > 80+TOLLERANCE)
 8001568:	b29b      	uxth	r3, r3
 800156a:	2b6e      	cmp	r3, #110	; 0x6e
 800156c:	d80a      	bhi.n	8001584 <checkResponse+0xa0>
	{
		//ERROR: Wrong Answer
		return RESPONSE_WRONG_ANSWER;
	}
	//Pin is now Pulled LOW
	return RESPONSE_CORRECT; //Answer is correct!
 800156e:	2000      	movs	r0, #0
 8001570:	e002      	b.n	8001578 <checkResponse+0x94>
	while((HAL_GPIO_ReadPin(port, pin) == 1) && (timeOut++ < TIMEOUT));
 8001572:	3401      	adds	r4, #1
 8001574:	42bc      	cmp	r4, r7
 8001576:	d1c4      	bne.n	8001502 <checkResponse+0x1e>
}
 8001578:	b004      	add	sp, #16
 800157a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while((HAL_GPIO_ReadPin(port, pin) == 0) && (timeOut++ < TIMEOUT));
 800157e:	3401      	adds	r4, #1
 8001580:	42bc      	cmp	r4, r7
 8001582:	d1cb      	bne.n	800151c <checkResponse+0x38>
		return RESPONSE_WRONG_ANSWER;
 8001584:	2002      	movs	r0, #2
 8001586:	e7f7      	b.n	8001578 <checkResponse+0x94>
	while((HAL_GPIO_ReadPin(port, pin) == 1) && (timeOut++ < TIMEOUT));
 8001588:	3401      	adds	r4, #1
 800158a:	4544      	cmp	r4, r8
 800158c:	d1dd      	bne.n	800154a <checkResponse+0x66>
 800158e:	e7f9      	b.n	8001584 <checkResponse+0xa0>
		return RESPONSE_NO_ACTION;
 8001590:	2001      	movs	r0, #1
 8001592:	e7f1      	b.n	8001578 <checkResponse+0x94>
 8001594:	20000030 	.word	0x20000030
 8001598:	20000034 	.word	0x20000034
 800159c:	000186a1 	.word	0x000186a1
 80015a0:	000186a0 	.word	0x000186a0
 80015a4:	2000002c 	.word	0x2000002c

080015a8 <dht11_read>:
{
 80015a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	GPIO_InitStruct.Pin = pin;
 80015ac:	4d55      	ldr	r5, [pc, #340]	; (8001704 <dht11_read+0x15c>)
{
 80015ae:	b08a      	sub	sp, #40	; 0x28
	GPIO_InitStruct.Pin = pin;
 80015b0:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2401      	movs	r4, #1
	GPIO_InitStruct.Pin = pin;
 80015b4:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2700      	movs	r7, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b8:	2303      	movs	r3, #3
	HAL_GPIO_Init(port, &GPIO_InitStruct); //Now configured as Output
 80015ba:	4e53      	ldr	r6, [pc, #332]	; (8001708 <dht11_read+0x160>)
{
 80015bc:	4681      	mov	r9, r0
 80015be:	4688      	mov	r8, r1
	HAL_GPIO_Init(port, &GPIO_InitStruct); //Now configured as Output
 80015c0:	6830      	ldr	r0, [r6, #0]
 80015c2:	a906      	add	r1, sp, #24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c4:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	9708      	str	r7, [sp, #32]
	HAL_GPIO_Init(port, &GPIO_InitStruct); //Now configured as Output
 80015ca:	f7ff fa9f 	bl	8000b0c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Pull to LOW
 80015ce:	463a      	mov	r2, r7
 80015d0:	8829      	ldrh	r1, [r5, #0]
 80015d2:	6830      	ldr	r0, [r6, #0]
 80015d4:	f7ff fb80 	bl	8000cd8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80015d8:	2014      	movs	r0, #20
 80015da:	f7ff fa17 	bl	8000a0c <HAL_Delay>
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET); //Pull to HIGH
 80015de:	4622      	mov	r2, r4
 80015e0:	8829      	ldrh	r1, [r5, #0]
 80015e2:	6830      	ldr	r0, [r6, #0]
 80015e4:	f7ff fb78 	bl	8000cd8 <HAL_GPIO_WritePin>
	if((res = checkResponse()) != RESPONSE_CORRECT)
 80015e8:	f7ff ff7c 	bl	80014e4 <checkResponse>
 80015ec:	f88d 0006 	strb.w	r0, [sp, #6]
 80015f0:	b118      	cbz	r0, 80015fa <dht11_read+0x52>
		return DHT11_RESULT_ERROR;
 80015f2:	2001      	movs	r0, #1
}
 80015f4:	b00a      	add	sp, #40	; 0x28
 80015f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	volatile uint64_t message = 0;
 80015fa:	2200      	movs	r2, #0
 80015fc:	2300      	movs	r3, #0
 80015fe:	2427      	movs	r4, #39	; 0x27
 8001600:	e9cd 2304 	strd	r2, r3, [sp, #16]
		while((HAL_GPIO_ReadPin(port, pin) == 0) && (timeout++ < TIMEOUT));
 8001604:	4f41      	ldr	r7, [pc, #260]	; (800170c <dht11_read+0x164>)
	return timer->CNT;
 8001606:	f8df a108 	ldr.w	sl, [pc, #264]	; 8001710 <dht11_read+0x168>
		timeout = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	9303      	str	r3, [sp, #12]
		while((HAL_GPIO_ReadPin(port, pin) == 0) && (timeout++ < TIMEOUT));
 800160e:	8829      	ldrh	r1, [r5, #0]
 8001610:	6830      	ldr	r0, [r6, #0]
 8001612:	f7ff fb5b 	bl	8000ccc <HAL_GPIO_ReadPin>
 8001616:	b130      	cbz	r0, 8001626 <dht11_read+0x7e>
		startWatch(); //Start Watch while rising Edge
 8001618:	f7ff ff04 	bl	8001424 <startWatch>
		if(timeout >= TIMEOUT)
 800161c:	9b03      	ldr	r3, [sp, #12]
 800161e:	42bb      	cmp	r3, r7
 8001620:	d907      	bls.n	8001632 <dht11_read+0x8a>
			return DHT11_RESULT_TIMEOUT;
 8001622:	2002      	movs	r0, #2
 8001624:	e7e6      	b.n	80015f4 <dht11_read+0x4c>
		while((HAL_GPIO_ReadPin(port, pin) == 0) && (timeout++ < TIMEOUT));
 8001626:	9b03      	ldr	r3, [sp, #12]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	42bb      	cmp	r3, r7
 800162c:	9203      	str	r2, [sp, #12]
 800162e:	d9ee      	bls.n	800160e <dht11_read+0x66>
 8001630:	e7f2      	b.n	8001618 <dht11_read+0x70>
		timeout = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	9303      	str	r3, [sp, #12]
		while((HAL_GPIO_ReadPin(port, pin) == 1) && (timeout++ < TIMEOUT));
 8001636:	8829      	ldrh	r1, [r5, #0]
 8001638:	6830      	ldr	r0, [r6, #0]
 800163a:	f7ff fb47 	bl	8000ccc <HAL_GPIO_ReadPin>
 800163e:	2801      	cmp	r0, #1
 8001640:	d053      	beq.n	80016ea <dht11_read+0x142>
	return timer->CNT;
 8001642:	f8da 3000 	ldr.w	r3, [sl]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		if(timeout >= TIMEOUT)
 8001648:	9a03      	ldr	r2, [sp, #12]
	return timer->CNT;
 800164a:	b29b      	uxth	r3, r3
		if(timeout >= TIMEOUT)
 800164c:	42ba      	cmp	r2, r7
 800164e:	d8e8      	bhi.n	8001622 <dht11_read+0x7a>
		if(puls_len < 45) 	//Short Pulse
 8001650:	2b2c      	cmp	r3, #44	; 0x2c
			message = (message << 1) + 0;
 8001652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if(puls_len < 45) 	//Short Pulse
 8001656:	d84e      	bhi.n	80016f6 <dht11_read+0x14e>
			message = (message << 1) + 0;
 8001658:	1892      	adds	r2, r2, r2
 800165a:	415b      	adcs	r3, r3
 800165c:	3c01      	subs	r4, #1
	for(uint8_t bitCnt = 0; bitCnt < 39; bitCnt++)
 800165e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
			message = (message << 1) + 1;
 8001662:	e9cd 2304 	strd	r2, r3, [sp, #16]
	for(uint8_t bitCnt = 0; bitCnt < 39; bitCnt++)
 8001666:	d1d0      	bne.n	800160a <dht11_read+0x62>
	volatile uint8_t humidity_H = (message>>32) & 0xFF;
 8001668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f88d 3007 	strb.w	r3, [sp, #7]
	volatile uint8_t humidity_L = (message>>24) & 0xFF;
 8001672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001676:	0e12      	lsrs	r2, r2, #24
 8001678:	f88d 2008 	strb.w	r2, [sp, #8]
	volatile uint8_t temp_H = (message>>16) & 0xFF;
 800167c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001680:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001684:	f88d 2009 	strb.w	r2, [sp, #9]
	volatile uint8_t temp_L = (message>>8) & 0xFF;
 8001688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800168c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001690:	f88d 200a 	strb.w	r2, [sp, #10]
	volatile uint8_t parity = message & 0xFF;
 8001694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	f88d 200b 	strb.w	r2, [sp, #11]
	if(humidity_L && temp_L)
 800169e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80016a2:	b123      	cbz	r3, 80016ae <dht11_read+0x106>
 80016a4:	f89d 400a 	ldrb.w	r4, [sp, #10]
 80016a8:	3400      	adds	r4, #0
 80016aa:	bf18      	it	ne
 80016ac:	2401      	movne	r4, #1
	if(humidity_H + temp_H + decimal == parity)
 80016ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80016b2:	f89d 1009 	ldrb.w	r1, [sp, #9]
 80016b6:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80016ba:	440b      	add	r3, r1
 80016bc:	441c      	add	r4, r3
 80016be:	4294      	cmp	r4, r2
 80016c0:	d197      	bne.n	80015f2 <dht11_read+0x4a>
		*temp = (temp_H<<1) + (temp_L>>7);
 80016c2:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80016c6:	f89d 300a 	ldrb.w	r3, [sp, #10]
		return DHT11_RESULT_CORRECT; // Parity Bit is correct
 80016ca:	2000      	movs	r0, #0
		*temp = (temp_H<<1) + (temp_L>>7);
 80016cc:	09db      	lsrs	r3, r3, #7
 80016ce:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80016d2:	f889 3000 	strb.w	r3, [r9]
		*humidity = (humidity_H<<1) + (humidity_L>>7);
 80016d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80016da:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80016de:	09db      	lsrs	r3, r3, #7
 80016e0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80016e4:	f888 3000 	strb.w	r3, [r8]
 80016e8:	e784      	b.n	80015f4 <dht11_read+0x4c>
		while((HAL_GPIO_ReadPin(port, pin) == 1) && (timeout++ < TIMEOUT));
 80016ea:	9b03      	ldr	r3, [sp, #12]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	42bb      	cmp	r3, r7
 80016f0:	9203      	str	r2, [sp, #12]
 80016f2:	d9a0      	bls.n	8001636 <dht11_read+0x8e>
 80016f4:	e7a5      	b.n	8001642 <dht11_read+0x9a>
			message = (message << 1) + 1;
 80016f6:	1892      	adds	r2, r2, r2
 80016f8:	415b      	adcs	r3, r3
 80016fa:	3201      	adds	r2, #1
 80016fc:	f143 0300 	adc.w	r3, r3, #0
 8001700:	e7ac      	b.n	800165c <dht11_read+0xb4>
 8001702:	bf00      	nop
 8001704:	20000030 	.word	0x20000030
 8001708:	20000034 	.word	0x20000034
 800170c:	0001869f 	.word	0x0001869f
 8001710:	2000002c 	.word	0x2000002c

08001714 <dht11_measure>:

DHT11_RESULT dht11_measure(uint8_t *temp, uint8_t *humidity)
{
 8001714:	b570      	push	{r4, r5, r6, lr}
 8001716:	4605      	mov	r5, r0
 8001718:	460e      	mov	r6, r1
	uint8_t attempts = 0;

	while(dht11_read(temp, humidity))
 800171a:	2407      	movs	r4, #7
 800171c:	4631      	mov	r1, r6
 800171e:	4628      	mov	r0, r5
 8001720:	f7ff ff42 	bl	80015a8 <dht11_read>
 8001724:	b900      	cbnz	r0, 8001728 <dht11_measure+0x14>
 8001726:	bd70      	pop	{r4, r5, r6, pc}
 8001728:	3c01      	subs	r4, #1
	{
		if(attempts++ > 5)
 800172a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800172e:	d004      	beq.n	800173a <dht11_measure+0x26>
			return DHT11_RESULT_ERROR;
		HAL_Delay(2000);
 8001730:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001734:	f7ff f96a 	bl	8000a0c <HAL_Delay>
 8001738:	e7f0      	b.n	800171c <dht11_measure+0x8>
			return DHT11_RESULT_ERROR;
 800173a:	2001      	movs	r0, #1
	}
	return DHT11_RESULT_CORRECT;
}
 800173c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001740 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <MX_GPIO_Init+0x74>)
{
 8001742:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	699a      	ldr	r2, [r3, #24]
{
 8001746:	b088      	sub	sp, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	f042 0204 	orr.w	r2, r2, #4
 800174c:	619a      	str	r2, [r3, #24]
 800174e:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_TIM1_CLK_ENABLE();


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001750:	4c19      	ldr	r4, [pc, #100]	; (80017b8 <MX_GPIO_Init+0x78>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	f002 0204 	and.w	r2, r2, #4
 8001756:	9201      	str	r2, [sp, #4]
 8001758:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800175c:	4620      	mov	r0, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175e:	f042 0208 	orr.w	r2, r2, #8
 8001762:	619a      	str	r2, [r3, #24]
 8001764:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001766:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	f002 0208 	and.w	r2, r2, #8
 800176c:	9202      	str	r2, [sp, #8]
 800176e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001770:	699a      	ldr	r2, [r3, #24]
 8001772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001776:	619a      	str	r2, [r3, #24]
 8001778:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
  __HAL_RCC_TIM1_CLK_ENABLE();
 800177c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001780:	9303      	str	r3, [sp, #12]
 8001782:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001784:	f7ff faa8 	bl	8000cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001788:	2304      	movs	r3, #4
 800178a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178c:	2300      	movs	r3, #0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	a904      	add	r1, sp, #16
 8001790:	4620      	mov	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001792:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f7ff f9b9 	bl	8000b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800179a:	2308      	movs	r3, #8
 800179c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179e:	2301      	movs	r3, #1
 80017a0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a2:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	a904      	add	r1, sp, #16
 80017a6:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	f7ff f9af 	bl	8000b0c <HAL_GPIO_Init>

}
 80017ae:	b008      	add	sp, #32
 80017b0:	bd10      	pop	{r4, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010800 	.word	0x40010800

080017bc <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017bc:	2302      	movs	r3, #2
{
 80017be:	b510      	push	{r4, lr}
 80017c0:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017c2:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c4:	2301      	movs	r3, #1
 80017c6:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80017c8:	2310      	movs	r3, #16
 80017ca:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017cc:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ce:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017d0:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d2:	f7ff fa87 	bl	8000ce4 <HAL_RCC_OscConfig>
 80017d6:	4601      	mov	r1, r0
 80017d8:	b100      	cbz	r0, 80017dc <SystemClock_Config+0x20>
 80017da:	e7fe      	b.n	80017da <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017dc:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017de:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e0:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e4:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017e6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e8:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ea:	f7ff fc43 	bl	8001074 <HAL_RCC_ClockConfig>
 80017ee:	4604      	mov	r4, r0
 80017f0:	b100      	cbz	r0, 80017f4 <SystemClock_Config+0x38>
 80017f2:	e7fe      	b.n	80017f2 <SystemClock_Config+0x36>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80017f4:	f7ff fce2 	bl	80011bc <HAL_RCC_GetHCLKFreq>
 80017f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001800:	f7ff f95c 	bl	8000abc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001804:	2004      	movs	r0, #4
 8001806:	f7ff f96f 	bl	8000ae8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800180a:	4622      	mov	r2, r4
 800180c:	4621      	mov	r1, r4
 800180e:	f04f 30ff 	mov.w	r0, #4294967295
 8001812:	f7ff f91f 	bl	8000a54 <HAL_NVIC_SetPriority>
}
 8001816:	b010      	add	sp, #64	; 0x40
 8001818:	bd10      	pop	{r4, pc}
	...

0800181c <main>:
{
 800181c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001820:	b085      	sub	sp, #20
  HAL_Init();
 8001822:	f7ff f8d1 	bl	80009c8 <HAL_Init>
  SystemClock_Config();
 8001826:	f7ff ffc9 	bl	80017bc <SystemClock_Config>
  MX_GPIO_Init();
 800182a:	f7ff ff89 	bl	8001740 <MX_GPIO_Init>
  dht11_ini(GPIOB, GPIO_PIN_0, TIM1);
 800182e:	4a31      	ldr	r2, [pc, #196]	; (80018f4 <main+0xd8>)
 8001830:	2101      	movs	r1, #1
 8001832:	4831      	ldr	r0, [pc, #196]	; (80018f8 <main+0xdc>)
 8001834:	f7ff fdfe 	bl	8001434 <dht11_ini>
  volatile uint8_t suc = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	f88d 3004 	strb.w	r3, [sp, #4]
  volatile uint8_t unsuc = 0;
 800183e:	f88d 3005 	strb.w	r3, [sp, #5]
  volatile uint8_t temp = 0, humidity = 0;
 8001842:	f88d 3006 	strb.w	r3, [sp, #6]
 8001846:	f88d 3007 	strb.w	r3, [sp, #7]
  volatile float f_temp = 0.0, f_humidity = 0.0;
 800184a:	2300      	movs	r3, #0
		  f_temp = (temp>>1) + (0.5* (temp&1));
 800184c:	2400      	movs	r4, #0
 800184e:	4d2b      	ldr	r5, [pc, #172]	; (80018fc <main+0xe0>)
  volatile float f_temp = 0.0, f_humidity = 0.0;
 8001850:	9302      	str	r3, [sp, #8]
 8001852:	9303      	str	r3, [sp, #12]
{
 8001854:	f242 760f 	movw	r6, #9999	; 0x270f
		  if(DHT11_RESULT_CORRECT == dht11_measure(&temp, &humidity))
 8001858:	f10d 0107 	add.w	r1, sp, #7
 800185c:	f10d 0006 	add.w	r0, sp, #6
 8001860:	f7ff ff58 	bl	8001714 <dht11_measure>
 8001864:	2800      	cmp	r0, #0
 8001866:	d13e      	bne.n	80018e6 <main+0xca>
			  suc++;
 8001868:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800186c:	3301      	adds	r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f88d 3004 	strb.w	r3, [sp, #4]
		  f_temp = (temp>>1) + (0.5* (temp&1));
 8001874:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8001878:	f89d 0006 	ldrb.w	r0, [sp, #6]
 800187c:	b2ff      	uxtb	r7, r7
 800187e:	f000 0001 	and.w	r0, r0, #1
 8001882:	f7fe fdb5 	bl	80003f0 <__aeabi_i2d>
 8001886:	4622      	mov	r2, r4
 8001888:	462b      	mov	r3, r5
 800188a:	f7fe fe17 	bl	80004bc <__aeabi_dmul>
 800188e:	4680      	mov	r8, r0
 8001890:	0878      	lsrs	r0, r7, #1
 8001892:	4689      	mov	r9, r1
 8001894:	f7fe fdac 	bl	80003f0 <__aeabi_i2d>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4640      	mov	r0, r8
 800189e:	4649      	mov	r1, r9
 80018a0:	f7fe fc5a 	bl	8000158 <__adddf3>
 80018a4:	f7ff f81c 	bl	80008e0 <__aeabi_d2f>
 80018a8:	9002      	str	r0, [sp, #8]
		  f_humidity = (humidity>>1) + (0.5* (humidity&1));
 80018aa:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80018ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80018b2:	b2ff      	uxtb	r7, r7
 80018b4:	f000 0001 	and.w	r0, r0, #1
 80018b8:	f7fe fd9a 	bl	80003f0 <__aeabi_i2d>
 80018bc:	4622      	mov	r2, r4
 80018be:	462b      	mov	r3, r5
 80018c0:	f7fe fdfc 	bl	80004bc <__aeabi_dmul>
 80018c4:	4680      	mov	r8, r0
 80018c6:	0878      	lsrs	r0, r7, #1
 80018c8:	4689      	mov	r9, r1
 80018ca:	f7fe fd91 	bl	80003f0 <__aeabi_i2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4640      	mov	r0, r8
 80018d4:	4649      	mov	r1, r9
 80018d6:	f7fe fc3f 	bl	8000158 <__adddf3>
 80018da:	f7ff f801 	bl	80008e0 <__aeabi_d2f>
	  for(int i = 0; i < 9999; i++)
 80018de:	3e01      	subs	r6, #1
		  f_humidity = (humidity>>1) + (0.5* (humidity&1));
 80018e0:	9003      	str	r0, [sp, #12]
	  for(int i = 0; i < 9999; i++)
 80018e2:	d1b9      	bne.n	8001858 <main+0x3c>
 80018e4:	e7b6      	b.n	8001854 <main+0x38>
			  unsuc++;
 80018e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80018ea:	3301      	adds	r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f88d 3005 	strb.w	r3, [sp, #5]
 80018f2:	e7bf      	b.n	8001874 <main+0x58>
 80018f4:	40012c00 	.word	0x40012c00
 80018f8:	40010c00 	.word	0x40010c00
 80018fc:	3fe00000 	.word	0x3fe00000

08001900 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001900:	e7fe      	b.n	8001900 <_Error_Handler>

08001902 <NMI_Handler>:
 8001902:	4770      	bx	lr

08001904 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001904:	e7fe      	b.n	8001904 <HardFault_Handler>

08001906 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001906:	e7fe      	b.n	8001906 <MemManage_Handler>

08001908 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001908:	e7fe      	b.n	8001908 <BusFault_Handler>

0800190a <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800190a:	e7fe      	b.n	800190a <UsageFault_Handler>

0800190c <SVC_Handler>:
 800190c:	4770      	bx	lr

0800190e <DebugMon_Handler>:
 800190e:	4770      	bx	lr

08001910 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001910:	4770      	bx	lr

08001912 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001912:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001914:	f7ff f868 	bl	80009e8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001918:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800191c:	f7ff b8f1 	b.w	8000b02 <HAL_SYSTICK_IRQHandler>

08001920 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <SystemInit+0x40>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	f042 0201 	orr.w	r2, r2, #1
 8001928:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <SystemInit+0x44>)
 800192e:	400a      	ands	r2, r1
 8001930:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001938:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800193c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001944:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800194c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800194e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001952:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001954:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <SystemInit+0x48>)
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000
 8001964:	f8ff0000 	.word	0xf8ff0000
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 800196c:	6802      	ldr	r2, [r0, #0]
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_TIM_Base_MspInit+0x24>)
{
 8001970:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8001972:	429a      	cmp	r2, r3
 8001974:	d10a      	bne.n	800198c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001976:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800197a:	699a      	ldr	r2, [r3, #24]
 800197c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001980:	619a      	str	r2, [r3, #24]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800198c:	b002      	add	sp, #8
 800198e:	4770      	bx	lr
 8001990:	40012c00 	.word	0x40012c00

08001994 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001994:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001996:	e003      	b.n	80019a0 <LoopCopyDataInit>

08001998 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800199a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800199c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800199e:	3104      	adds	r1, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019a0:	480a      	ldr	r0, [pc, #40]	; (80019cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80019a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80019a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80019a8:	d3f6      	bcc.n	8001998 <CopyDataInit>
  ldr r2, =_sbss
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80019ac:	e002      	b.n	80019b4 <LoopFillZerobss>

080019ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80019b0:	f842 3b04 	str.w	r3, [r2], #4

080019b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80019b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019b8:	d3f9      	bcc.n	80019ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019ba:	f7ff ffb1 	bl	8001920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019be:	f000 f80f 	bl	80019e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019c2:	f7ff ff2b 	bl	800181c <main>
  bx lr
 80019c6:	4770      	bx	lr
  ldr r3, =_sidata
 80019c8:	08001a80 	.word	0x08001a80
  ldr r0, =_sdata
 80019cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80019d4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80019d8:	20000078 	.word	0x20000078

080019dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC1_2_IRQHandler>
	...

080019e0 <__libc_init_array>:
 80019e0:	b570      	push	{r4, r5, r6, lr}
 80019e2:	2500      	movs	r5, #0
 80019e4:	4e0c      	ldr	r6, [pc, #48]	; (8001a18 <__libc_init_array+0x38>)
 80019e6:	4c0d      	ldr	r4, [pc, #52]	; (8001a1c <__libc_init_array+0x3c>)
 80019e8:	1ba4      	subs	r4, r4, r6
 80019ea:	10a4      	asrs	r4, r4, #2
 80019ec:	42a5      	cmp	r5, r4
 80019ee:	d109      	bne.n	8001a04 <__libc_init_array+0x24>
 80019f0:	f000 f81a 	bl	8001a28 <_init>
 80019f4:	2500      	movs	r5, #0
 80019f6:	4e0a      	ldr	r6, [pc, #40]	; (8001a20 <__libc_init_array+0x40>)
 80019f8:	4c0a      	ldr	r4, [pc, #40]	; (8001a24 <__libc_init_array+0x44>)
 80019fa:	1ba4      	subs	r4, r4, r6
 80019fc:	10a4      	asrs	r4, r4, #2
 80019fe:	42a5      	cmp	r5, r4
 8001a00:	d105      	bne.n	8001a0e <__libc_init_array+0x2e>
 8001a02:	bd70      	pop	{r4, r5, r6, pc}
 8001a04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a08:	4798      	blx	r3
 8001a0a:	3501      	adds	r5, #1
 8001a0c:	e7ee      	b.n	80019ec <__libc_init_array+0xc>
 8001a0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a12:	4798      	blx	r3
 8001a14:	3501      	adds	r5, #1
 8001a16:	e7f2      	b.n	80019fe <__libc_init_array+0x1e>
 8001a18:	08001a78 	.word	0x08001a78
 8001a1c:	08001a78 	.word	0x08001a78
 8001a20:	08001a78 	.word	0x08001a78
 8001a24:	08001a7c 	.word	0x08001a7c

08001a28 <_init>:
 8001a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a2a:	bf00      	nop
 8001a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a2e:	bc08      	pop	{r3}
 8001a30:	469e      	mov	lr, r3
 8001a32:	4770      	bx	lr

08001a34 <_fini>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	bf00      	nop
 8001a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a3a:	bc08      	pop	{r3}
 8001a3c:	469e      	mov	lr, r3
 8001a3e:	4770      	bx	lr
