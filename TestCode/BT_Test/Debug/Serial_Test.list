
Serial_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080039bc  080039bc  000139bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003a48  08003a48  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08003a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000160  2000000c  08003a5c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000016c  08003a5c  0002016c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016ad2  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002f3a  00000000  00000000  00036b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000dc0  00000000  00000000  00039a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c90  00000000  00000000  0003a808  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006e61  00000000  00000000  0003b498  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000040f8  00000000  00000000  000422f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000463f1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003768  00000000  00000000  00046470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080039a4 	.word	0x080039a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080039a4 	.word	0x080039a4

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fdaf 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 fa8c 	bl	8003684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fdc7 	bl	8000d2a <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fd8f 	bl	8000cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000002c 	.word	0x2000002c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000002c 	.word	0x2000002c

08000210 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000218:	2300      	movs	r3, #0
 800021a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000220:	2300      	movs	r3, #0
 8000222:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d101      	bne.n	8000232 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800022e:	2301      	movs	r3, #1
 8000230:	e0be      	b.n	80003b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800023c:	2b00      	cmp	r3, #0
 800023e:	d109      	bne.n	8000254 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2200      	movs	r2, #0
 800024a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f8b6 	bl	80003c0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 fbc3 	bl	80009e0 <ADC_ConversionStop_Disable>
 800025a:	4603      	mov	r3, r0
 800025c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000262:	f003 0310 	and.w	r3, r3, #16
 8000266:	2b00      	cmp	r3, #0
 8000268:	f040 8099 	bne.w	800039e <HAL_ADC_Init+0x18e>
 800026c:	7dfb      	ldrb	r3, [r7, #23]
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 8095 	bne.w	800039e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000278:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800027c:	f023 0302 	bic.w	r3, r3, #2
 8000280:	f043 0202 	orr.w	r2, r3, #2
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000290:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	68db      	ldr	r3, [r3, #12]
 8000296:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000298:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	4313      	orrs	r3, r2
 800029e:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002a8:	d003      	beq.n	80002b2 <HAL_ADC_Init+0xa2>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d102      	bne.n	80002b8 <HAL_ADC_Init+0xa8>
 80002b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b6:	e000      	b.n	80002ba <HAL_ADC_Init+0xaa>
 80002b8:	2300      	movs	r3, #0
 80002ba:	693a      	ldr	r2, [r7, #16]
 80002bc:	4313      	orrs	r3, r2
 80002be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d119      	bne.n	80002fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d109      	bne.n	80002e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	035a      	lsls	r2, r3, #13
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	4313      	orrs	r3, r2
 80002dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002e0:	613b      	str	r3, [r7, #16]
 80002e2:	e00b      	b.n	80002fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002e8:	f043 0220 	orr.w	r2, r3, #32
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002f4:	f043 0201 	orr.w	r2, r3, #1
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6812      	ldr	r2, [r2, #0]
 8000304:	6852      	ldr	r2, [r2, #4]
 8000306:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 800030a:	693a      	ldr	r2, [r7, #16]
 800030c:	430a      	orrs	r2, r1
 800030e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	6899      	ldr	r1, [r3, #8]
 800031a:	4b27      	ldr	r3, [pc, #156]	; (80003b8 <HAL_ADC_Init+0x1a8>)
 800031c:	400b      	ands	r3, r1
 800031e:	68b9      	ldr	r1, [r7, #8]
 8000320:	430b      	orrs	r3, r1
 8000322:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800032c:	d003      	beq.n	8000336 <HAL_ADC_Init+0x126>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d104      	bne.n	8000340 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	3b01      	subs	r3, #1
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	6812      	ldr	r2, [r2, #0]
 8000348:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800034a:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	430a      	orrs	r2, r1
 8000352:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689a      	ldr	r2, [r3, #8]
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <HAL_ADC_Init+0x1ac>)
 800035c:	4013      	ands	r3, r2
 800035e:	68ba      	ldr	r2, [r7, #8]
 8000360:	4293      	cmp	r3, r2
 8000362:	d10b      	bne.n	800037c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2200      	movs	r2, #0
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800036e:	f023 0303 	bic.w	r3, r3, #3
 8000372:	f043 0201 	orr.w	r2, r3, #1
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800037a:	e018      	b.n	80003ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000380:	f023 0312 	bic.w	r3, r3, #18
 8000384:	f043 0210 	orr.w	r2, r3, #16
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000390:	f043 0201 	orr.w	r2, r3, #1
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000398:	2301      	movs	r3, #1
 800039a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800039c:	e007      	b.n	80003ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a2:	f043 0210 	orr.w	r2, r3, #16
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003aa:	2301      	movs	r3, #1
 80003ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3718      	adds	r7, #24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	ffe1f7fd 	.word	0xffe1f7fd
 80003bc:	ff1f0efe 	.word	0xff1f0efe

080003c0 <HAL_ADC_MspInit>:
  * @brief  Initializes the ADC MSP.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
	...

080003d4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003e0:	2300      	movs	r3, #0
 80003e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a64      	ldr	r2, [pc, #400]	; (800057c <HAL_ADC_Start_DMA+0x1a8>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d004      	beq.n	80003f8 <HAL_ADC_Start_DMA+0x24>
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a63      	ldr	r2, [pc, #396]	; (8000580 <HAL_ADC_Start_DMA+0x1ac>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <HAL_ADC_Start_DMA+0x32>
 80003f8:	4b60      	ldr	r3, [pc, #384]	; (800057c <HAL_ADC_Start_DMA+0x1a8>)
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000400:	2b00      	cmp	r3, #0
 8000402:	f040 80b3 	bne.w	800056c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800040c:	2b01      	cmp	r3, #1
 800040e:	d101      	bne.n	8000414 <HAL_ADC_Start_DMA+0x40>
 8000410:	2302      	movs	r3, #2
 8000412:	e0ae      	b.n	8000572 <HAL_ADC_Start_DMA+0x19e>
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	2201      	movs	r2, #1
 8000418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800041c:	68f8      	ldr	r0, [r7, #12]
 800041e:	f000 fa8d 	bl	800093c <ADC_Enable>
 8000422:	4603      	mov	r3, r0
 8000424:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000426:	7dfb      	ldrb	r3, [r7, #23]
 8000428:	2b00      	cmp	r3, #0
 800042a:	f040 809a 	bne.w	8000562 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000432:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000436:	f023 0301 	bic.w	r3, r3, #1
 800043a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a4e      	ldr	r2, [pc, #312]	; (8000580 <HAL_ADC_Start_DMA+0x1ac>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d105      	bne.n	8000458 <HAL_ADC_Start_DMA+0x84>
 800044c:	4b4b      	ldr	r3, [pc, #300]	; (800057c <HAL_ADC_Start_DMA+0x1a8>)
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000454:	2b00      	cmp	r3, #0
 8000456:	d115      	bne.n	8000484 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800045c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800046e:	2b00      	cmp	r3, #0
 8000470:	d026      	beq.n	80004c0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000476:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800047a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000482:	e01d      	b.n	80004c0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000488:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a39      	ldr	r2, [pc, #228]	; (800057c <HAL_ADC_Start_DMA+0x1a8>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d004      	beq.n	80004a4 <HAL_ADC_Start_DMA+0xd0>
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a38      	ldr	r2, [pc, #224]	; (8000580 <HAL_ADC_Start_DMA+0x1ac>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d10d      	bne.n	80004c0 <HAL_ADC_Start_DMA+0xec>
 80004a4:	4b35      	ldr	r3, [pc, #212]	; (800057c <HAL_ADC_Start_DMA+0x1a8>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d007      	beq.n	80004c0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d006      	beq.n	80004da <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d0:	f023 0206 	bic.w	r2, r3, #6
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80004d8:	e002      	b.n	80004e0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	2200      	movs	r2, #0
 80004de:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	2200      	movs	r2, #0
 80004e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	6a1b      	ldr	r3, [r3, #32]
 80004ec:	4a25      	ldr	r2, [pc, #148]	; (8000584 <HAL_ADC_Start_DMA+0x1b0>)
 80004ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	6a1b      	ldr	r3, [r3, #32]
 80004f4:	4a24      	ldr	r2, [pc, #144]	; (8000588 <HAL_ADC_Start_DMA+0x1b4>)
 80004f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	6a1b      	ldr	r3, [r3, #32]
 80004fc:	4a23      	ldr	r2, [pc, #140]	; (800058c <HAL_ADC_Start_DMA+0x1b8>)
 80004fe:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f06f 0202 	mvn.w	r2, #2
 8000508:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	6812      	ldr	r2, [r2, #0]
 8000512:	6892      	ldr	r2, [r2, #8]
 8000514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000518:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6a18      	ldr	r0, [r3, #32]
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	334c      	adds	r3, #76	; 0x4c
 8000524:	4619      	mov	r1, r3
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f000 fc99 	bl	8000e60 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000538:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800053c:	d108      	bne.n	8000550 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	6812      	ldr	r2, [r2, #0]
 8000546:	6892      	ldr	r2, [r2, #8]
 8000548:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800054c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800054e:	e00f      	b.n	8000570 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	68fa      	ldr	r2, [r7, #12]
 8000556:	6812      	ldr	r2, [r2, #0]
 8000558:	6892      	ldr	r2, [r2, #8]
 800055a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800055e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000560:	e006      	b.n	8000570 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800056a:	e001      	b.n	8000570 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800056c:	2301      	movs	r3, #1
 800056e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000570:	7dfb      	ldrb	r3, [r7, #23]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40012400 	.word	0x40012400
 8000580:	40012800 	.word	0x40012800
 8000584:	08000a55 	.word	0x08000a55
 8000588:	08000ad1 	.word	0x08000ad1
 800058c:	08000aed 	.word	0x08000aed

08000590 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	f003 0320 	and.w	r3, r3, #32
 80005a2:	2b20      	cmp	r3, #32
 80005a4:	d140      	bne.n	8000628 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f003 0302 	and.w	r3, r3, #2
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	d139      	bne.n	8000628 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005b8:	f003 0310 	and.w	r3, r3, #16
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d105      	bne.n	80005cc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80005d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80005da:	d11d      	bne.n	8000618 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	68db      	ldr	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d119      	bne.n	8000618 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	6812      	ldr	r2, [r2, #0]
 80005ec:	6852      	ldr	r2, [r2, #4]
 80005ee:	f022 0220 	bic.w	r2, r2, #32
 80005f2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000608:	2b00      	cmp	r3, #0
 800060a:	d105      	bne.n	8000618 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000610:	f043 0201 	orr.w	r2, r3, #1
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f003 f825 	bl	8003668 <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f06f 0212 	mvn.w	r2, #18
 8000626:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000632:	2b80      	cmp	r3, #128	; 0x80
 8000634:	d14f      	bne.n	80006d6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f003 0304 	and.w	r3, r3, #4
 8000640:	2b04      	cmp	r3, #4
 8000642:	d148      	bne.n	80006d6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000648:	f003 0310 	and.w	r3, r3, #16
 800064c:	2b00      	cmp	r3, #0
 800064e:	d105      	bne.n	800065c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000654:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000666:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800066a:	d012      	beq.n	8000692 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000676:	2b00      	cmp	r3, #0
 8000678:	d125      	bne.n	80006c6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000684:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000688:	d11d      	bne.n	80006c6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	68db      	ldr	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800068e:	2b00      	cmp	r3, #0
 8000690:	d119      	bne.n	80006c6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	6812      	ldr	r2, [r2, #0]
 800069a:	6852      	ldr	r2, [r2, #4]
 800069c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006a0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d105      	bne.n	80006c6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006be:	f043 0201 	orr.w	r2, r3, #1
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 fa2a 	bl	8000b20 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f06f 020c 	mvn.w	r2, #12
 80006d4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e0:	2b40      	cmp	r3, #64	; 0x40
 80006e2:	d114      	bne.n	800070e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d10d      	bne.n	800070e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f812 	bl	8000728 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f06f 0201 	mvn.w	r2, #1
 800070c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800073a:	b480      	push	{r7}
 800073c:	b083      	sub	sp, #12
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800074c:	b490      	push	{r4, r7}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000756:	2300      	movs	r3, #0
 8000758:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000764:	2b01      	cmp	r3, #1
 8000766:	d101      	bne.n	800076c <HAL_ADC_ConfigChannel+0x20>
 8000768:	2302      	movs	r3, #2
 800076a:	e0dc      	b.n	8000926 <HAL_ADC_ConfigChannel+0x1da>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2201      	movs	r2, #1
 8000770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	2b06      	cmp	r3, #6
 800077a:	d81c      	bhi.n	80007b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6819      	ldr	r1, [r3, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	685a      	ldr	r2, [r3, #4]
 800078a:	4613      	mov	r3, r2
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	4413      	add	r3, r2
 8000790:	3b05      	subs	r3, #5
 8000792:	221f      	movs	r2, #31
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	43db      	mvns	r3, r3
 800079a:	4018      	ands	r0, r3
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	681c      	ldr	r4, [r3, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	4613      	mov	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	3b05      	subs	r3, #5
 80007ac:	fa04 f303 	lsl.w	r3, r4, r3
 80007b0:	4303      	orrs	r3, r0
 80007b2:	634b      	str	r3, [r1, #52]	; 0x34
 80007b4:	e03c      	b.n	8000830 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	2b0c      	cmp	r3, #12
 80007bc:	d81c      	bhi.n	80007f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6819      	ldr	r1, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	685a      	ldr	r2, [r3, #4]
 80007cc:	4613      	mov	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	3b23      	subs	r3, #35	; 0x23
 80007d4:	221f      	movs	r2, #31
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43db      	mvns	r3, r3
 80007dc:	4018      	ands	r0, r3
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	681c      	ldr	r4, [r3, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	4613      	mov	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	3b23      	subs	r3, #35	; 0x23
 80007ee:	fa04 f303 	lsl.w	r3, r4, r3
 80007f2:	4303      	orrs	r3, r0
 80007f4:	630b      	str	r3, [r1, #48]	; 0x30
 80007f6:	e01b      	b.n	8000830 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6819      	ldr	r1, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	3b41      	subs	r3, #65	; 0x41
 800080e:	221f      	movs	r2, #31
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	43db      	mvns	r3, r3
 8000816:	4018      	ands	r0, r3
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	681c      	ldr	r4, [r3, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685a      	ldr	r2, [r3, #4]
 8000820:	4613      	mov	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	3b41      	subs	r3, #65	; 0x41
 8000828:	fa04 f303 	lsl.w	r3, r4, r3
 800082c:	4303      	orrs	r3, r0
 800082e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b09      	cmp	r3, #9
 8000836:	d91c      	bls.n	8000872 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6819      	ldr	r1, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	68d8      	ldr	r0, [r3, #12]
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	3b1e      	subs	r3, #30
 800084e:	2207      	movs	r2, #7
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	43db      	mvns	r3, r3
 8000856:	4018      	ands	r0, r3
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	689c      	ldr	r4, [r3, #8]
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4613      	mov	r3, r2
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	4413      	add	r3, r2
 8000866:	3b1e      	subs	r3, #30
 8000868:	fa04 f303 	lsl.w	r3, r4, r3
 800086c:	4303      	orrs	r3, r0
 800086e:	60cb      	str	r3, [r1, #12]
 8000870:	e019      	b.n	80008a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6819      	ldr	r1, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	6918      	ldr	r0, [r3, #16]
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4613      	mov	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	4413      	add	r3, r2
 8000886:	2207      	movs	r2, #7
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	4018      	ands	r0, r3
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	689c      	ldr	r4, [r3, #8]
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	fa04 f303 	lsl.w	r3, r4, r3
 80008a2:	4303      	orrs	r3, r0
 80008a4:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b10      	cmp	r3, #16
 80008ac:	d003      	beq.n	80008b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008b2:	2b11      	cmp	r3, #17
 80008b4:	d132      	bne.n	800091c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a1d      	ldr	r2, [pc, #116]	; (8000930 <HAL_ADC_ConfigChannel+0x1e4>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d125      	bne.n	800090c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d126      	bne.n	800091c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	6812      	ldr	r2, [r2, #0]
 80008d6:	6892      	ldr	r2, [r2, #8]
 80008d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008dc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b10      	cmp	r3, #16
 80008e4:	d11a      	bne.n	800091c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <HAL_ADC_ConfigChannel+0x1e8>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a13      	ldr	r2, [pc, #76]	; (8000938 <HAL_ADC_ConfigChannel+0x1ec>)
 80008ec:	fba2 2303 	umull	r2, r3, r2, r3
 80008f0:	0c9a      	lsrs	r2, r3, #18
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008fc:	e002      	b.n	8000904 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	3b01      	subs	r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1f9      	bne.n	80008fe <HAL_ADC_ConfigChannel+0x1b2>
 800090a:	e007      	b.n	800091c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000910:	f043 0220 	orr.w	r2, r3, #32
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000924:	7bfb      	ldrb	r3, [r7, #15]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bc90      	pop	{r4, r7}
 800092e:	4770      	bx	lr
 8000930:	40012400 	.word	0x40012400
 8000934:	20000008 	.word	0x20000008
 8000938:	431bde83 	.word	0x431bde83

0800093c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	2b01      	cmp	r3, #1
 8000958:	d039      	beq.n	80009ce <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	6812      	ldr	r2, [r2, #0]
 8000962:	6892      	ldr	r2, [r2, #8]
 8000964:	f042 0201 	orr.w	r2, r2, #1
 8000968:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <ADC_Enable+0x9c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a1b      	ldr	r2, [pc, #108]	; (80009dc <ADC_Enable+0xa0>)
 8000970:	fba2 2303 	umull	r2, r3, r2, r3
 8000974:	0c9b      	lsrs	r3, r3, #18
 8000976:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000978:	e002      	b.n	8000980 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	3b01      	subs	r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1f9      	bne.n	800097a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000986:	f7ff fc39 	bl	80001fc <HAL_GetTick>
 800098a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800098c:	e018      	b.n	80009c0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800098e:	f7ff fc35 	bl	80001fc <HAL_GetTick>
 8000992:	4602      	mov	r2, r0
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	2b02      	cmp	r3, #2
 800099a:	d911      	bls.n	80009c0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a0:	f043 0210 	orr.w	r2, r3, #16
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ac:	f043 0201 	orr.w	r2, r3, #1
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	e007      	b.n	80009d0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d1df      	bne.n	800098e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000008 	.word	0x20000008
 80009dc:	431bde83 	.word	0x431bde83

080009e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d127      	bne.n	8000a4a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	6812      	ldr	r2, [r2, #0]
 8000a02:	6892      	ldr	r2, [r2, #8]
 8000a04:	f022 0201 	bic.w	r2, r2, #1
 8000a08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a0a:	f7ff fbf7 	bl	80001fc <HAL_GetTick>
 8000a0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a10:	e014      	b.n	8000a3c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000a12:	f7ff fbf3 	bl	80001fc <HAL_GetTick>
 8000a16:	4602      	mov	r2, r0
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d90d      	bls.n	8000a3c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a24:	f043 0210 	orr.w	r2, r3, #16
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a30:	f043 0201 	orr.w	r2, r3, #1
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e007      	b.n	8000a4c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d0e3      	beq.n	8000a12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a60:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d127      	bne.n	8000abe <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a84:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a88:	d115      	bne.n	8000ab6 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	68db      	ldr	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d111      	bne.n	8000ab6 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d105      	bne.n	8000ab6 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aae:	f043 0201 	orr.w	r2, r3, #1
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f002 fdd6 	bl	8003668 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000abc:	e004      	b.n	8000ac8 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6a1b      	ldr	r3, [r3, #32]
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	4798      	blx	r3
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000adc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff fe19 	bl	8000716 <HAL_ADC_ConvHalfCpltCallback>
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af8:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0a:	f043 0204 	orr.w	r2, r3, #4
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	f7ff fe11 	bl	800073a <HAL_ADC_ErrorCallback>
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
	...

08000b34 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ba2:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <NVIC_EnableIRQ+0x2c>)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	095b      	lsrs	r3, r3, #5
 8000baa:	79fa      	ldrb	r2, [r7, #7]
 8000bac:	f002 021f 	and.w	r2, r2, #31
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	da0b      	bge.n	8000bf4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	490d      	ldr	r1, [pc, #52]	; (8000c14 <NVIC_SetPriority+0x4c>)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 030f 	and.w	r3, r3, #15
 8000be4:	3b04      	subs	r3, #4
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf2:	e009      	b.n	8000c08 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	4908      	ldr	r1, [pc, #32]	; (8000c18 <NVIC_SetPriority+0x50>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	2201      	movs	r2, #1
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	1e5a      	subs	r2, r3, #1
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c62:	2101      	movs	r1, #1
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	1e59      	subs	r1, r3, #1
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	; 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c8c:	d301      	bcc.n	8000c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00f      	b.n	8000cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <SysTick_Config+0x40>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f7ff ff92 	bl	8000bc8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <SysTick_Config+0x40>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SysTick_Config+0x40>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff33 	bl	8000b34 <NVIC_SetPriorityGrouping>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff48 	bl	8000b7c <NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ff92 	bl	8000c1c <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff61 	bl	8000bc8 <NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff3b 	bl	8000b98 <NVIC_EnableIRQ>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffa2 	bl	8000c7c <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d106      	bne.n	8000d60 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d52:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000d5e:	e005      	b.n	8000d6c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d60:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f023 0304 	bic.w	r3, r3, #4
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d80:	f000 f802 	bl	8000d88 <HAL_SYSTICK_Callback>
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e04f      	b.n	8000e4a <HAL_DMA_Init+0xb6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <HAL_DMA_Init+0xc0>)
 8000db2:	4413      	add	r3, r2
 8000db4:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <HAL_DMA_Init+0xc4>)
 8000db6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	009a      	lsls	r2, r3, #2
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <HAL_DMA_Init+0xc8>)
 8000dc6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2202      	movs	r2, #2
 8000dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000dde:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000de2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	601a      	str	r2, [r3, #0]


  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	bffdfff8 	.word	0xbffdfff8
 8000e58:	cccccccd 	.word	0xcccccccd
 8000e5c:	40020000 	.word	0x40020000

08000e60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d101      	bne.n	8000e80 <HAL_DMA_Start_IT+0x20>
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	e04a      	b.n	8000f16 <HAL_DMA_Start_IT+0xb6>
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d13a      	bne.n	8000f08 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2202      	movs	r2, #2
 8000e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	f022 0201 	bic.w	r2, r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f000 f944 	bl	8001144 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d008      	beq.n	8000ed6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	6812      	ldr	r2, [r2, #0]
 8000ece:	f042 020e 	orr.w	r2, r2, #14
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	e00f      	b.n	8000ef6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	6812      	ldr	r2, [r2, #0]
 8000ee0:	f022 0204 	bic.w	r2, r2, #4
 8000ee4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	6812      	ldr	r2, [r2, #0]
 8000eee:	6812      	ldr	r2, [r2, #0]
 8000ef0:	f042 020a 	orr.w	r2, r2, #10
 8000ef4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	6812      	ldr	r2, [r2, #0]
 8000efe:	6812      	ldr	r2, [r2, #0]
 8000f00:	f042 0201 	orr.w	r2, r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	e005      	b.n	8000f14 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f10:	2302      	movs	r3, #2
 8000f12:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d055      	beq.n	8000ff4 <HAL_DMA_IRQHandler+0xd4>
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d050      	beq.n	8000ff4 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0320 	and.w	r3, r3, #32
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d107      	bne.n	8000f70 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	6812      	ldr	r2, [r2, #0]
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	f022 0204 	bic.w	r2, r2, #4
 8000f6e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f70:	4a6d      	ldr	r2, [pc, #436]	; (8001128 <HAL_DMA_IRQHandler+0x208>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	4b6c      	ldr	r3, [pc, #432]	; (800112c <HAL_DMA_IRQHandler+0x20c>)
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d02e      	beq.n	8000fdc <HAL_DMA_IRQHandler+0xbc>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4619      	mov	r1, r3
 8000f84:	4b6a      	ldr	r3, [pc, #424]	; (8001130 <HAL_DMA_IRQHandler+0x210>)
 8000f86:	4299      	cmp	r1, r3
 8000f88:	d026      	beq.n	8000fd8 <HAL_DMA_IRQHandler+0xb8>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4b68      	ldr	r3, [pc, #416]	; (8001134 <HAL_DMA_IRQHandler+0x214>)
 8000f92:	4299      	cmp	r1, r3
 8000f94:	d01d      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0xb2>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4b66      	ldr	r3, [pc, #408]	; (8001138 <HAL_DMA_IRQHandler+0x218>)
 8000f9e:	4299      	cmp	r1, r3
 8000fa0:	d014      	beq.n	8000fcc <HAL_DMA_IRQHandler+0xac>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4b64      	ldr	r3, [pc, #400]	; (800113c <HAL_DMA_IRQHandler+0x21c>)
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d00b      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0xa6>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4b62      	ldr	r3, [pc, #392]	; (8001140 <HAL_DMA_IRQHandler+0x220>)
 8000fb6:	4299      	cmp	r1, r3
 8000fb8:	d102      	bne.n	8000fc0 <HAL_DMA_IRQHandler+0xa0>
 8000fba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fbe:	e00e      	b.n	8000fde <HAL_DMA_IRQHandler+0xbe>
 8000fc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000fc4:	e00b      	b.n	8000fde <HAL_DMA_IRQHandler+0xbe>
 8000fc6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000fca:	e008      	b.n	8000fde <HAL_DMA_IRQHandler+0xbe>
 8000fcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fd0:	e005      	b.n	8000fde <HAL_DMA_IRQHandler+0xbe>
 8000fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd6:	e002      	b.n	8000fde <HAL_DMA_IRQHandler+0xbe>
 8000fd8:	2340      	movs	r3, #64	; 0x40
 8000fda:	e000      	b.n	8000fde <HAL_DMA_IRQHandler+0xbe>
 8000fdc:	2304      	movs	r3, #4
 8000fde:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 809a 	beq.w	800111e <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000ff2:	e094      	b.n	800111e <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4013      	ands	r3, r2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d05c      	beq.n	80010be <HAL_DMA_IRQHandler+0x19e>
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d057      	beq.n	80010be <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0320 	and.w	r3, r3, #32
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10b      	bne.n	8001034 <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	6812      	ldr	r2, [r2, #0]
 8001026:	f022 020a 	bic.w	r2, r2, #10
 800102a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001034:	4a3c      	ldr	r2, [pc, #240]	; (8001128 <HAL_DMA_IRQHandler+0x208>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4619      	mov	r1, r3
 800103c:	4b3b      	ldr	r3, [pc, #236]	; (800112c <HAL_DMA_IRQHandler+0x20c>)
 800103e:	4299      	cmp	r1, r3
 8001040:	d02e      	beq.n	80010a0 <HAL_DMA_IRQHandler+0x180>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	4b39      	ldr	r3, [pc, #228]	; (8001130 <HAL_DMA_IRQHandler+0x210>)
 800104a:	4299      	cmp	r1, r3
 800104c:	d026      	beq.n	800109c <HAL_DMA_IRQHandler+0x17c>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4619      	mov	r1, r3
 8001054:	4b37      	ldr	r3, [pc, #220]	; (8001134 <HAL_DMA_IRQHandler+0x214>)
 8001056:	4299      	cmp	r1, r3
 8001058:	d01d      	beq.n	8001096 <HAL_DMA_IRQHandler+0x176>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4619      	mov	r1, r3
 8001060:	4b35      	ldr	r3, [pc, #212]	; (8001138 <HAL_DMA_IRQHandler+0x218>)
 8001062:	4299      	cmp	r1, r3
 8001064:	d014      	beq.n	8001090 <HAL_DMA_IRQHandler+0x170>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4619      	mov	r1, r3
 800106c:	4b33      	ldr	r3, [pc, #204]	; (800113c <HAL_DMA_IRQHandler+0x21c>)
 800106e:	4299      	cmp	r1, r3
 8001070:	d00b      	beq.n	800108a <HAL_DMA_IRQHandler+0x16a>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4619      	mov	r1, r3
 8001078:	4b31      	ldr	r3, [pc, #196]	; (8001140 <HAL_DMA_IRQHandler+0x220>)
 800107a:	4299      	cmp	r1, r3
 800107c:	d102      	bne.n	8001084 <HAL_DMA_IRQHandler+0x164>
 800107e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001082:	e00e      	b.n	80010a2 <HAL_DMA_IRQHandler+0x182>
 8001084:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001088:	e00b      	b.n	80010a2 <HAL_DMA_IRQHandler+0x182>
 800108a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800108e:	e008      	b.n	80010a2 <HAL_DMA_IRQHandler+0x182>
 8001090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001094:	e005      	b.n	80010a2 <HAL_DMA_IRQHandler+0x182>
 8001096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800109a:	e002      	b.n	80010a2 <HAL_DMA_IRQHandler+0x182>
 800109c:	2320      	movs	r3, #32
 800109e:	e000      	b.n	80010a2 <HAL_DMA_IRQHandler+0x182>
 80010a0:	2302      	movs	r3, #2
 80010a2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d034      	beq.n	800111e <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80010bc:	e02f      	b.n	800111e <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	2208      	movs	r2, #8
 80010c4:	409a      	lsls	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d028      	beq.n	8001120 <HAL_DMA_IRQHandler+0x200>
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d023      	beq.n	8001120 <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	6812      	ldr	r2, [r2, #0]
 80010e2:	f022 020e 	bic.w	r2, r2, #14
 80010e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010f0:	2101      	movs	r1, #1
 80010f2:	fa01 f202 	lsl.w	r2, r1, r2
 80010f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	2b00      	cmp	r3, #0
 8001114:	d004      	beq.n	8001120 <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	4798      	blx	r3
    }
  }
  return;
 800111e:	bf00      	nop
 8001120:	bf00      	nop
}
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40020000 	.word	0x40020000
 800112c:	40020008 	.word	0x40020008
 8001130:	4002001c 	.word	0x4002001c
 8001134:	40020030 	.word	0x40020030
 8001138:	40020044 	.word	0x40020044
 800113c:	40020058 	.word	0x40020058
 8001140:	4002006c 	.word	0x4002006c

08001144 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800115a:	2101      	movs	r1, #1
 800115c:	fa01 f202 	lsl.w	r2, r1, r2
 8001160:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b10      	cmp	r3, #16
 8001170:	d108      	bne.n	8001184 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001182:	e007      	b.n	8001194 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	60da      	str	r2, [r3, #12]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
	...

080011a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b08b      	sub	sp, #44	; 0x2c
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
 80011c2:	e127      	b.n	8001414 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80011c4:	2201      	movs	r2, #1
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	429a      	cmp	r2, r3
 80011de:	f040 8116 	bne.w	800140e <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b12      	cmp	r3, #18
 80011e8:	d034      	beq.n	8001254 <HAL_GPIO_Init+0xb4>
 80011ea:	2b12      	cmp	r3, #18
 80011ec:	d80d      	bhi.n	800120a <HAL_GPIO_Init+0x6a>
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d02b      	beq.n	800124a <HAL_GPIO_Init+0xaa>
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d804      	bhi.n	8001200 <HAL_GPIO_Init+0x60>
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d031      	beq.n	800125e <HAL_GPIO_Init+0xbe>
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d01c      	beq.n	8001238 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011fe:	e048      	b.n	8001292 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001200:	2b03      	cmp	r3, #3
 8001202:	d043      	beq.n	800128c <HAL_GPIO_Init+0xec>
 8001204:	2b11      	cmp	r3, #17
 8001206:	d01b      	beq.n	8001240 <HAL_GPIO_Init+0xa0>
          break;
 8001208:	e043      	b.n	8001292 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800120a:	4a87      	ldr	r2, [pc, #540]	; (8001428 <HAL_GPIO_Init+0x288>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d026      	beq.n	800125e <HAL_GPIO_Init+0xbe>
 8001210:	4a85      	ldr	r2, [pc, #532]	; (8001428 <HAL_GPIO_Init+0x288>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d806      	bhi.n	8001224 <HAL_GPIO_Init+0x84>
 8001216:	4a85      	ldr	r2, [pc, #532]	; (800142c <HAL_GPIO_Init+0x28c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d020      	beq.n	800125e <HAL_GPIO_Init+0xbe>
 800121c:	4a84      	ldr	r2, [pc, #528]	; (8001430 <HAL_GPIO_Init+0x290>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d01d      	beq.n	800125e <HAL_GPIO_Init+0xbe>
          break;
 8001222:	e036      	b.n	8001292 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001224:	4a83      	ldr	r2, [pc, #524]	; (8001434 <HAL_GPIO_Init+0x294>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d019      	beq.n	800125e <HAL_GPIO_Init+0xbe>
 800122a:	4a83      	ldr	r2, [pc, #524]	; (8001438 <HAL_GPIO_Init+0x298>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d016      	beq.n	800125e <HAL_GPIO_Init+0xbe>
 8001230:	4a82      	ldr	r2, [pc, #520]	; (800143c <HAL_GPIO_Init+0x29c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0xbe>
          break;
 8001236:	e02c      	b.n	8001292 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	623b      	str	r3, [r7, #32]
          break;
 800123e:	e028      	b.n	8001292 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	3304      	adds	r3, #4
 8001246:	623b      	str	r3, [r7, #32]
          break;
 8001248:	e023      	b.n	8001292 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	3308      	adds	r3, #8
 8001250:	623b      	str	r3, [r7, #32]
          break;
 8001252:	e01e      	b.n	8001292 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	330c      	adds	r3, #12
 800125a:	623b      	str	r3, [r7, #32]
          break;
 800125c:	e019      	b.n	8001292 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d102      	bne.n	800126c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001266:	2304      	movs	r3, #4
 8001268:	623b      	str	r3, [r7, #32]
          break;
 800126a:	e012      	b.n	8001292 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d105      	bne.n	8001280 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001274:	2308      	movs	r3, #8
 8001276:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69fa      	ldr	r2, [r7, #28]
 800127c:	611a      	str	r2, [r3, #16]
          break;
 800127e:	e008      	b.n	8001292 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001280:	2308      	movs	r3, #8
 8001282:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69fa      	ldr	r2, [r7, #28]
 8001288:	615a      	str	r2, [r3, #20]
          break;
 800128a:	e002      	b.n	8001292 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
          break;
 8001290:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	2bff      	cmp	r3, #255	; 0xff
 8001296:	d801      	bhi.n	800129c <HAL_GPIO_Init+0xfc>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	e001      	b.n	80012a0 <HAL_GPIO_Init+0x100>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3304      	adds	r3, #4
 80012a0:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	2bff      	cmp	r3, #255	; 0xff
 80012a6:	d802      	bhi.n	80012ae <HAL_GPIO_Init+0x10e>
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	e002      	b.n	80012b4 <HAL_GPIO_Init+0x114>
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	3b08      	subs	r3, #8
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	210f      	movs	r1, #15
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	401a      	ands	r2, r3
 80012c6:	6a39      	ldr	r1, [r7, #32]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	431a      	orrs	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 8096 	beq.w	800140e <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012e2:	4a57      	ldr	r2, [pc, #348]	; (8001440 <HAL_GPIO_Init+0x2a0>)
 80012e4:	4b56      	ldr	r3, [pc, #344]	; (8001440 <HAL_GPIO_Init+0x2a0>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6193      	str	r3, [r2, #24]
 80012ee:	4b54      	ldr	r3, [pc, #336]	; (8001440 <HAL_GPIO_Init+0x2a0>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80012fa:	4a52      	ldr	r2, [pc, #328]	; (8001444 <HAL_GPIO_Init+0x2a4>)
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	4013      	ands	r3, r2
 800131c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a49      	ldr	r2, [pc, #292]	; (8001448 <HAL_GPIO_Init+0x2a8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x1ae>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a48      	ldr	r2, [pc, #288]	; (800144c <HAL_GPIO_Init+0x2ac>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x1aa>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a47      	ldr	r2, [pc, #284]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x1a6>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a46      	ldr	r2, [pc, #280]	; (8001454 <HAL_GPIO_Init+0x2b4>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x1a2>
 800133e:	2303      	movs	r3, #3
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x1b0>
 8001342:	2304      	movs	r3, #4
 8001344:	e004      	b.n	8001350 <HAL_GPIO_Init+0x1b0>
 8001346:	2302      	movs	r3, #2
 8001348:	e002      	b.n	8001350 <HAL_GPIO_Init+0x1b0>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x1b0>
 800134e:	2300      	movs	r3, #0
 8001350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001352:	f002 0203 	and.w	r2, r2, #3
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4093      	lsls	r3, r2
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4313      	orrs	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001360:	4938      	ldr	r1, [pc, #224]	; (8001444 <HAL_GPIO_Init+0x2a4>)
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d006      	beq.n	8001388 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800137a:	4937      	ldr	r1, [pc, #220]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 800137c:	4b36      	ldr	r3, [pc, #216]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
 8001386:	e006      	b.n	8001396 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001388:	4933      	ldr	r1, [pc, #204]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 800138a:	4b33      	ldr	r3, [pc, #204]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	43db      	mvns	r3, r3
 8001392:	4013      	ands	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d006      	beq.n	80013b0 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013a2:	492d      	ldr	r1, [pc, #180]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 80013a4:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	604b      	str	r3, [r1, #4]
 80013ae:	e006      	b.n	80013be <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013b0:	4929      	ldr	r1, [pc, #164]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 80013b2:	4b29      	ldr	r3, [pc, #164]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	4013      	ands	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d006      	beq.n	80013d8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013ca:	4923      	ldr	r1, [pc, #140]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 80013cc:	4b22      	ldr	r3, [pc, #136]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	608b      	str	r3, [r1, #8]
 80013d6:	e006      	b.n	80013e6 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013d8:	491f      	ldr	r1, [pc, #124]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	4013      	ands	r3, r2
 80013e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f2:	4919      	ldr	r1, [pc, #100]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60cb      	str	r3, [r1, #12]
 80013fe:	e006      	b.n	800140e <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001400:	4915      	ldr	r1, [pc, #84]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	43db      	mvns	r3, r3
 800140a:	4013      	ands	r3, r2
 800140c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	3301      	adds	r3, #1
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	2b0f      	cmp	r3, #15
 8001418:	f67f aed4 	bls.w	80011c4 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 800141c:	bf00      	nop
 800141e:	372c      	adds	r7, #44	; 0x2c
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	10210000 	.word	0x10210000
 800142c:	10110000 	.word	0x10110000
 8001430:	10120000 	.word	0x10120000
 8001434:	10310000 	.word	0x10310000
 8001438:	10320000 	.word	0x10320000
 800143c:	10220000 	.word	0x10220000
 8001440:	40021000 	.word	0x40021000
 8001444:	40010000 	.word	0x40010000
 8001448:	40010800 	.word	0x40010800
 800144c:	40010c00 	.word	0x40010c00
 8001450:	40011000 	.word	0x40011000
 8001454:	40011400 	.word	0x40011400
 8001458:	40010400 	.word	0x40010400

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	4613      	mov	r3, r2
 800146a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800146c:	787b      	ldrb	r3, [r7, #1]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001478:	e003      	b.n	8001482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	041a      	lsls	r2, r3, #16
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	611a      	str	r2, [r3, #16]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f806 	bl	80014bc <HAL_GPIO_EXTI_Callback>
  }
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40010400 	.word	0x40010400

080014bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 8087 	beq.w	80015f8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014ea:	4b92      	ldr	r3, [pc, #584]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d00c      	beq.n	8001510 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014f6:	4b8f      	ldr	r3, [pc, #572]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d112      	bne.n	8001528 <HAL_RCC_OscConfig+0x58>
 8001502:	4b8c      	ldr	r3, [pc, #560]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150e:	d10b      	bne.n	8001528 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	4b88      	ldr	r3, [pc, #544]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d06c      	beq.n	80015f6 <HAL_RCC_OscConfig+0x126>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d168      	bne.n	80015f6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e22d      	b.n	8001984 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001530:	d106      	bne.n	8001540 <HAL_RCC_OscConfig+0x70>
 8001532:	4a80      	ldr	r2, [pc, #512]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 8001534:	4b7f      	ldr	r3, [pc, #508]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e02e      	b.n	800159e <HAL_RCC_OscConfig+0xce>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x92>
 8001548:	4a7a      	ldr	r2, [pc, #488]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 800154a:	4b7a      	ldr	r3, [pc, #488]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4a77      	ldr	r2, [pc, #476]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 8001556:	4b77      	ldr	r3, [pc, #476]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	e01d      	b.n	800159e <HAL_RCC_OscConfig+0xce>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800156a:	d10c      	bne.n	8001586 <HAL_RCC_OscConfig+0xb6>
 800156c:	4a71      	ldr	r2, [pc, #452]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 800156e:	4b71      	ldr	r3, [pc, #452]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4a6e      	ldr	r2, [pc, #440]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 800157a:	4b6e      	ldr	r3, [pc, #440]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	e00b      	b.n	800159e <HAL_RCC_OscConfig+0xce>
 8001586:	4a6b      	ldr	r2, [pc, #428]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 8001588:	4b6a      	ldr	r3, [pc, #424]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4a68      	ldr	r2, [pc, #416]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 8001594:	4b67      	ldr	r3, [pc, #412]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d013      	beq.n	80015ce <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a6:	f7fe fe29 	bl	80001fc <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ae:	f7fe fe25 	bl	80001fc <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b64      	cmp	r3, #100	; 0x64
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e1e1      	b.n	8001984 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c0:	4b5c      	ldr	r3, [pc, #368]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0xde>
 80015cc:	e014      	b.n	80015f8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7fe fe15 	bl	80001fc <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d6:	f7fe fe11 	bl	80001fc <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b64      	cmp	r3, #100	; 0x64
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1cd      	b.n	8001984 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e8:	4b52      	ldr	r3, [pc, #328]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x106>
 80015f4:	e000      	b.n	80015f8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d063      	beq.n	80016cc <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001604:	4b4b      	ldr	r3, [pc, #300]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00b      	beq.n	8001628 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001610:	4b48      	ldr	r3, [pc, #288]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d11c      	bne.n	8001656 <HAL_RCC_OscConfig+0x186>
 800161c:	4b45      	ldr	r3, [pc, #276]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d116      	bne.n	8001656 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001628:	4b42      	ldr	r3, [pc, #264]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_OscConfig+0x170>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d001      	beq.n	8001640 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e1a1      	b.n	8001984 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001640:	493c      	ldr	r1, [pc, #240]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 8001642:	4b3c      	ldr	r3, [pc, #240]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001654:	e03a      	b.n	80016cc <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d020      	beq.n	80016a0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800165e:	4b36      	ldr	r3, [pc, #216]	; (8001738 <HAL_RCC_OscConfig+0x268>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7fe fdca 	bl	80001fc <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800166c:	f7fe fdc6 	bl	80001fc <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e182      	b.n	8001984 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167e:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168a:	492a      	ldr	r1, [pc, #168]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 800168c:	4b29      	ldr	r3, [pc, #164]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]
 800169e:	e015      	b.n	80016cc <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <HAL_RCC_OscConfig+0x268>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7fe fda9 	bl	80001fc <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ae:	f7fe fda5 	bl	80001fc <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e161      	b.n	8001984 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c0:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1f0      	bne.n	80016ae <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d039      	beq.n	800174c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d019      	beq.n	8001714 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7fe fd89 	bl	80001fc <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ee:	f7fe fd85 	bl	80001fc <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e141      	b.n	8001984 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_RCC_OscConfig+0x264>)
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800170c:	2001      	movs	r0, #1
 800170e:	f000 facb 	bl	8001ca8 <RCC_Delay>
 8001712:	e01b      	b.n	800174c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_RCC_OscConfig+0x26c>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171a:	f7fe fd6f 	bl	80001fc <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001720:	e00e      	b.n	8001740 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001722:	f7fe fd6b 	bl	80001fc <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d907      	bls.n	8001740 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e127      	b.n	8001984 <HAL_RCC_OscConfig+0x4b4>
 8001734:	40021000 	.word	0x40021000
 8001738:	42420000 	.word	0x42420000
 800173c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001740:	4b92      	ldr	r3, [pc, #584]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1ea      	bne.n	8001722 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80a6 	beq.w	80018a6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800175e:	4b8b      	ldr	r3, [pc, #556]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10d      	bne.n	8001786 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4a88      	ldr	r2, [pc, #544]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 800176c:	4b87      	ldr	r3, [pc, #540]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	61d3      	str	r3, [r2, #28]
 8001776:	4b85      	ldr	r3, [pc, #532]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001782:	2301      	movs	r3, #1
 8001784:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	4b82      	ldr	r3, [pc, #520]	; (8001990 <HAL_RCC_OscConfig+0x4c0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d118      	bne.n	80017c4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001792:	4a7f      	ldr	r2, [pc, #508]	; (8001990 <HAL_RCC_OscConfig+0x4c0>)
 8001794:	4b7e      	ldr	r3, [pc, #504]	; (8001990 <HAL_RCC_OscConfig+0x4c0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179e:	f7fe fd2d 	bl	80001fc <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a6:	f7fe fd29 	bl	80001fc <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b64      	cmp	r3, #100	; 0x64
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e0e5      	b.n	8001984 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b8:	4b75      	ldr	r3, [pc, #468]	; (8001990 <HAL_RCC_OscConfig+0x4c0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x30a>
 80017cc:	4a6f      	ldr	r2, [pc, #444]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 80017ce:	4b6f      	ldr	r3, [pc, #444]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6213      	str	r3, [r2, #32]
 80017d8:	e02d      	b.n	8001836 <HAL_RCC_OscConfig+0x366>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x32c>
 80017e2:	4a6a      	ldr	r2, [pc, #424]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 80017e4:	4b69      	ldr	r3, [pc, #420]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	f023 0301 	bic.w	r3, r3, #1
 80017ec:	6213      	str	r3, [r2, #32]
 80017ee:	4a67      	ldr	r2, [pc, #412]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 80017f0:	4b66      	ldr	r3, [pc, #408]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f023 0304 	bic.w	r3, r3, #4
 80017f8:	6213      	str	r3, [r2, #32]
 80017fa:	e01c      	b.n	8001836 <HAL_RCC_OscConfig+0x366>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b05      	cmp	r3, #5
 8001802:	d10c      	bne.n	800181e <HAL_RCC_OscConfig+0x34e>
 8001804:	4a61      	ldr	r2, [pc, #388]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 8001806:	4b61      	ldr	r3, [pc, #388]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	6213      	str	r3, [r2, #32]
 8001810:	4a5e      	ldr	r2, [pc, #376]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 8001812:	4b5e      	ldr	r3, [pc, #376]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6213      	str	r3, [r2, #32]
 800181c:	e00b      	b.n	8001836 <HAL_RCC_OscConfig+0x366>
 800181e:	4a5b      	ldr	r2, [pc, #364]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 8001820:	4b5a      	ldr	r3, [pc, #360]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6213      	str	r3, [r2, #32]
 800182a:	4a58      	ldr	r2, [pc, #352]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 800182c:	4b57      	ldr	r3, [pc, #348]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	f023 0304 	bic.w	r3, r3, #4
 8001834:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d015      	beq.n	800186a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183e:	f7fe fcdd 	bl	80001fc <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001844:	e00a      	b.n	800185c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7fe fcd9 	bl	80001fc <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f241 3288 	movw	r2, #5000	; 0x1388
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e093      	b.n	8001984 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185c:	4b4b      	ldr	r3, [pc, #300]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0ee      	beq.n	8001846 <HAL_RCC_OscConfig+0x376>
 8001868:	e014      	b.n	8001894 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186a:	f7fe fcc7 	bl	80001fc <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001870:	e00a      	b.n	8001888 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7fe fcc3 	bl	80001fc <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e07d      	b.n	8001984 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001888:	4b40      	ldr	r3, [pc, #256]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1ee      	bne.n	8001872 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d105      	bne.n	80018a6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800189a:	4a3c      	ldr	r2, [pc, #240]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 800189c:	4b3b      	ldr	r3, [pc, #236]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d069      	beq.n	8001982 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ae:	4b37      	ldr	r3, [pc, #220]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d061      	beq.n	800197e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d146      	bne.n	8001950 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c2:	4b34      	ldr	r3, [pc, #208]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7fe fc98 	bl	80001fc <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d0:	f7fe fc94 	bl	80001fc <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e050      	b.n	8001984 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e2:	4b2a      	ldr	r3, [pc, #168]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f6:	d108      	bne.n	800190a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018f8:	4924      	ldr	r1, [pc, #144]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 80018fa:	4b24      	ldr	r3, [pc, #144]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800190a:	4820      	ldr	r0, [pc, #128]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a19      	ldr	r1, [r3, #32]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	430b      	orrs	r3, r1
 800191e:	4313      	orrs	r3, r2
 8001920:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7fe fc68 	bl	80001fc <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001930:	f7fe fc64 	bl	80001fc <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e020      	b.n	8001984 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x460>
 800194e:	e018      	b.n	8001982 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_RCC_OscConfig+0x4c4>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7fe fc51 	bl	80001fc <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195e:	f7fe fc4d 	bl	80001fc <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e009      	b.n	8001984 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_RCC_OscConfig+0x4bc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x48e>
 800197c:	e001      	b.n	8001982 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40021000 	.word	0x40021000
 8001990:	40007000 	.word	0x40007000
 8001994:	42420060 	.word	0x42420060

08001998 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019a6:	4b72      	ldr	r3, [pc, #456]	; (8001b70 <HAL_RCC_ClockConfig+0x1d8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0207 	and.w	r2, r3, #7
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d210      	bcs.n	80019d6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b4:	496e      	ldr	r1, [pc, #440]	; (8001b70 <HAL_RCC_ClockConfig+0x1d8>)
 80019b6:	4b6e      	ldr	r3, [pc, #440]	; (8001b70 <HAL_RCC_ClockConfig+0x1d8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 0207 	bic.w	r2, r3, #7
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019c4:	4b6a      	ldr	r3, [pc, #424]	; (8001b70 <HAL_RCC_ClockConfig+0x1d8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0207 	and.w	r2, r3, #7
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d001      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0c8      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d008      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e2:	4964      	ldr	r1, [pc, #400]	; (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 80019e4:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d06a      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a08:	4b5a      	ldr	r3, [pc, #360]	; (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d115      	bne.n	8001a40 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0a7      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a20:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d109      	bne.n	8001a40 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e09b      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e093      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a40:	494c      	ldr	r1, [pc, #304]	; (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001a42:	4b4c      	ldr	r3, [pc, #304]	; (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f023 0203 	bic.w	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a52:	f7fe fbd3 	bl	80001fc <HAL_GetTick>
 8001a56:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d112      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a62:	f7fe fbcb 	bl	80001fc <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e077      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a78:	4b3e      	ldr	r3, [pc, #248]	; (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d1ee      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xca>
 8001a84:	e027      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d11d      	bne.n	8001aca <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a90:	f7fe fbb4 	bl	80001fc <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e060      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa6:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d1ee      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xf8>
 8001ab2:	e010      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab4:	f7fe fba2 	bl	80001fc <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e04e      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1ee      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_RCC_ClockConfig+0x1d8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0207 	and.w	r2, r3, #7
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d910      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae4:	4922      	ldr	r1, [pc, #136]	; (8001b70 <HAL_RCC_ClockConfig+0x1d8>)
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <HAL_RCC_ClockConfig+0x1d8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 0207 	bic.w	r2, r3, #7
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001af4:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <HAL_RCC_ClockConfig+0x1d8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0207 	and.w	r2, r3, #7
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e030      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d008      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b12:	4918      	ldr	r1, [pc, #96]	; (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001b14:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d009      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b30:	4910      	ldr	r1, [pc, #64]	; (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b44:	f000 f81c 	bl	8001b80 <HAL_RCC_GetSysClockFreq>
 8001b48:	4601      	mov	r1, r0
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_RCC_ClockConfig+0x1dc>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <HAL_RCC_ClockConfig+0x1e0>)
 8001b56:	5cd3      	ldrb	r3, [r2, r3]
 8001b58:	fa21 f303 	lsr.w	r3, r1, r3
 8001b5c:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <HAL_RCC_ClockConfig+0x1e4>)
 8001b5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f7fe fb09 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40022000 	.word	0x40022000
 8001b74:	40021000 	.word	0x40021000
 8001b78:	08003a30 	.word	0x08003a30
 8001b7c:	20000008 	.word	0x20000008

08001b80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b80:	b490      	push	{r4, r7}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b88:	1d3c      	adds	r4, r7, #4
 8001b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b90:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001baa:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d002      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d003      	beq.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x46>
 8001bbe:	e02d      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bc2:	623b      	str	r3, [r7, #32]
      break;
 8001bc4:	e02d      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	0c9b      	lsrs	r3, r3, #18
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bd8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d013      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	0c5b      	lsrs	r3, r3, #17
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bf8:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bfe:	fb02 f203 	mul.w	r2, r2, r3
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0a:	e004      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c10:	fb02 f303 	mul.w	r3, r2, r3
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	623b      	str	r3, [r7, #32]
      break;
 8001c1a:	e002      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c1e:	623b      	str	r3, [r7, #32]
      break;
 8001c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c22:	6a3b      	ldr	r3, [r7, #32]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc90      	pop	{r4, r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	080039bc 	.word	0x080039bc
 8001c34:	080039cc 	.word	0x080039cc
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	007a1200 	.word	0x007a1200
 8001c40:	003d0900 	.word	0x003d0900

08001c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c48:	4b02      	ldr	r3, [pc, #8]	; (8001c54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	20000008 	.word	0x20000008

08001c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c5c:	f7ff fff2 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c60:	4601      	mov	r1, r0
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	4a03      	ldr	r2, [pc, #12]	; (8001c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6e:	5cd3      	ldrb	r3, [r2, r3]
 8001c70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	08003a40 	.word	0x08003a40

08001c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c84:	f7ff ffde 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c88:	4601      	mov	r1, r0
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	0adb      	lsrs	r3, r3, #11
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c96:	5cd3      	ldrb	r3, [r2, r3]
 8001c98:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	08003a40 	.word	0x08003a40

08001ca8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <RCC_Delay+0x34>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <RCC_Delay+0x38>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	0a5b      	lsrs	r3, r3, #9
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	fb02 f303 	mul.w	r3, r2, r3
 8001cc2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001cc4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1e5a      	subs	r2, r3, #1
 8001cca:	60fa      	str	r2, [r7, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f9      	bne.n	8001cc4 <RCC_Delay+0x1c>
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	10624dd3 	.word	0x10624dd3

08001ce4 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e01d      	b.n	8001d32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f815 	bl	8001d3a <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3304      	adds	r3, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	4610      	mov	r0, r2
 8001d24:	f000 f9e8 	bl	80020f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e01d      	b.n	8001d9a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f815 	bl	8001da2 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3304      	adds	r3, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f000 f9b4 	bl	80020f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e0b4      	b.n	8001f38 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b0c      	cmp	r3, #12
 8001de2:	f200 809f 	bhi.w	8001f24 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001e21 	.word	0x08001e21
 8001df0:	08001f25 	.word	0x08001f25
 8001df4:	08001f25 	.word	0x08001f25
 8001df8:	08001f25 	.word	0x08001f25
 8001dfc:	08001e61 	.word	0x08001e61
 8001e00:	08001f25 	.word	0x08001f25
 8001e04:	08001f25 	.word	0x08001f25
 8001e08:	08001f25 	.word	0x08001f25
 8001e0c:	08001ea3 	.word	0x08001ea3
 8001e10:	08001f25 	.word	0x08001f25
 8001e14:	08001f25 	.word	0x08001f25
 8001e18:	08001f25 	.word	0x08001f25
 8001e1c:	08001ee3 	.word	0x08001ee3
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f9cc 	bl	80021c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	6992      	ldr	r2, [r2, #24]
 8001e36:	f042 0208 	orr.w	r2, r2, #8
 8001e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	6992      	ldr	r2, [r2, #24]
 8001e46:	f022 0204 	bic.w	r2, r2, #4
 8001e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	6991      	ldr	r1, [r2, #24]
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	6912      	ldr	r2, [r2, #16]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	619a      	str	r2, [r3, #24]
    }
    break;
 8001e5e:	e062      	b.n	8001f26 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fa18 	bl	800229c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	6992      	ldr	r2, [r2, #24]
 8001e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	6992      	ldr	r2, [r2, #24]
 8001e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	6991      	ldr	r1, [r2, #24]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	6912      	ldr	r2, [r2, #16]
 8001e9a:	0212      	lsls	r2, r2, #8
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	619a      	str	r2, [r3, #24]
    }
    break;
 8001ea0:	e041      	b.n	8001f26 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68b9      	ldr	r1, [r7, #8]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fa67 	bl	800237c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	69d2      	ldr	r2, [r2, #28]
 8001eb8:	f042 0208 	orr.w	r2, r2, #8
 8001ebc:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	69d2      	ldr	r2, [r2, #28]
 8001ec8:	f022 0204 	bic.w	r2, r2, #4
 8001ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	69d1      	ldr	r1, [r2, #28]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	6912      	ldr	r2, [r2, #16]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	61da      	str	r2, [r3, #28]
    }
    break;
 8001ee0:	e021      	b.n	8001f26 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fab7 	bl	800245c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	69d2      	ldr	r2, [r2, #28]
 8001ef8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001efc:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	69d2      	ldr	r2, [r2, #28]
 8001f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	69d1      	ldr	r1, [r2, #28]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	6912      	ldr	r2, [r2, #16]
 8001f1c:	0212      	lsls	r2, r2, #8
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	61da      	str	r2, [r3, #28]
    }
    break;
 8001f22:	e000      	b.n	8001f26 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8001f24:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_TIM_ConfigClockSource+0x1c>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e0c8      	b.n	80020ee <HAL_TIM_ConfigClockSource+0x1ae>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b40      	cmp	r3, #64	; 0x40
 8001f92:	d077      	beq.n	8002084 <HAL_TIM_ConfigClockSource+0x144>
 8001f94:	2b40      	cmp	r3, #64	; 0x40
 8001f96:	d80e      	bhi.n	8001fb6 <HAL_TIM_ConfigClockSource+0x76>
 8001f98:	2b10      	cmp	r3, #16
 8001f9a:	f000 808a 	beq.w	80020b2 <HAL_TIM_ConfigClockSource+0x172>
 8001f9e:	2b10      	cmp	r3, #16
 8001fa0:	d802      	bhi.n	8001fa8 <HAL_TIM_ConfigClockSource+0x68>
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d07e      	beq.n	80020a4 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001fa6:	e099      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001fa8:	2b20      	cmp	r3, #32
 8001faa:	f000 8089 	beq.w	80020c0 <HAL_TIM_ConfigClockSource+0x180>
 8001fae:	2b30      	cmp	r3, #48	; 0x30
 8001fb0:	f000 808d 	beq.w	80020ce <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8001fb4:	e092      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001fb6:	2b70      	cmp	r3, #112	; 0x70
 8001fb8:	d016      	beq.n	8001fe8 <HAL_TIM_ConfigClockSource+0xa8>
 8001fba:	2b70      	cmp	r3, #112	; 0x70
 8001fbc:	d804      	bhi.n	8001fc8 <HAL_TIM_ConfigClockSource+0x88>
 8001fbe:	2b50      	cmp	r3, #80	; 0x50
 8001fc0:	d040      	beq.n	8002044 <HAL_TIM_ConfigClockSource+0x104>
 8001fc2:	2b60      	cmp	r3, #96	; 0x60
 8001fc4:	d04e      	beq.n	8002064 <HAL_TIM_ConfigClockSource+0x124>
    break;
 8001fc6:	e089      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_ConfigClockSource+0x96>
 8001fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fd2:	d024      	beq.n	800201e <HAL_TIM_ConfigClockSource+0xde>
    break;
 8001fd4:	e082      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	6892      	ldr	r2, [r2, #8]
 8001fe0:	f022 0207 	bic.w	r2, r2, #7
 8001fe4:	609a      	str	r2, [r3, #8]
    break;
 8001fe6:	e079      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	6899      	ldr	r1, [r3, #8]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f000 fb08 	bl	800260c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800200a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002012:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	609a      	str	r2, [r3, #8]
    break;
 800201c:	e05e      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6899      	ldr	r1, [r3, #8]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f000 faed 	bl	800260c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	6892      	ldr	r2, [r2, #8]
 800203c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002040:	609a      	str	r2, [r3, #8]
    break;
 8002042:	e04b      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	461a      	mov	r2, r3
 8002052:	f000 fa57 	bl	8002504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2150      	movs	r1, #80	; 0x50
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fab6 	bl	80025ce <TIM_ITRx_SetConfig>
    break;
 8002062:	e03b      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	461a      	mov	r2, r3
 8002072:	f000 fa79 	bl	8002568 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2160      	movs	r1, #96	; 0x60
 800207c:	4618      	mov	r0, r3
 800207e:	f000 faa6 	bl	80025ce <TIM_ITRx_SetConfig>
    break;
 8002082:	e02b      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	461a      	mov	r2, r3
 8002092:	f000 fa37 	bl	8002504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2140      	movs	r1, #64	; 0x40
 800209c:	4618      	mov	r0, r3
 800209e:	f000 fa96 	bl	80025ce <TIM_ITRx_SetConfig>
    break;
 80020a2:	e01b      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fa8f 	bl	80025ce <TIM_ITRx_SetConfig>
    break;
 80020b0:	e014      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2110      	movs	r1, #16
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fa88 	bl	80025ce <TIM_ITRx_SetConfig>
    break;
 80020be:	e00d      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2120      	movs	r1, #32
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fa81 	bl	80025ce <TIM_ITRx_SetConfig>
    break;
 80020cc:	e006      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2130      	movs	r1, #48	; 0x30
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fa7a 	bl	80025ce <TIM_ITRx_SetConfig>
    break;
 80020da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a2a      	ldr	r2, [pc, #168]	; (80021b8 <TIM_Base_SetConfig+0xc0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00b      	beq.n	800212c <TIM_Base_SetConfig+0x34>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211a:	d007      	beq.n	800212c <TIM_Base_SetConfig+0x34>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a27      	ldr	r2, [pc, #156]	; (80021bc <TIM_Base_SetConfig+0xc4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d003      	beq.n	800212c <TIM_Base_SetConfig+0x34>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a26      	ldr	r2, [pc, #152]	; (80021c0 <TIM_Base_SetConfig+0xc8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d108      	bne.n	800213e <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <TIM_Base_SetConfig+0xc0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00b      	beq.n	800215e <TIM_Base_SetConfig+0x66>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214c:	d007      	beq.n	800215e <TIM_Base_SetConfig+0x66>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <TIM_Base_SetConfig+0xc4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d003      	beq.n	800215e <TIM_Base_SetConfig+0x66>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <TIM_Base_SetConfig+0xc8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d108      	bne.n	8002170 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002176:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <TIM_Base_SetConfig+0xc0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d103      	bne.n	80021a8 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	615a      	str	r2, [r3, #20]
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40012c00 	.word	0x40012c00
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40000800 	.word	0x40000800

080021c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	f023 0201 	bic.w	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 0303 	bic.w	r3, r3, #3
 8002206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f023 0302 	bic.w	r3, r3, #2
 8002218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4313      	orrs	r3, r2
 8002222:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a1c      	ldr	r2, [pc, #112]	; (8002298 <TIM_OC1_SetConfig+0xd4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d10c      	bne.n	8002246 <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f023 0308 	bic.w	r3, r3, #8
 8002232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f023 0304 	bic.w	r3, r3, #4
 8002244:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a13      	ldr	r2, [pc, #76]	; (8002298 <TIM_OC1_SetConfig+0xd4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d111      	bne.n	8002272 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800225c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	621a      	str	r2, [r3, #32]
}
 800228c:	bf00      	nop
 800228e:	371c      	adds	r7, #28
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40012c00 	.word	0x40012c00

0800229c <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	f023 0210 	bic.w	r2, r3, #16
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f023 0320 	bic.w	r3, r3, #32
 80022f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a1d      	ldr	r2, [pc, #116]	; (8002378 <TIM_OC2_SetConfig+0xdc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d10d      	bne.n	8002324 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800230e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002322:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a14      	ldr	r2, [pc, #80]	; (8002378 <TIM_OC2_SetConfig+0xdc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d113      	bne.n	8002354 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800233a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	621a      	str	r2, [r3, #32]
}
 800236e:	bf00      	nop
 8002370:	371c      	adds	r7, #28
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	40012c00 	.word	0x40012c00

0800237c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f023 0303 	bic.w	r3, r3, #3
 80023be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	4313      	orrs	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <TIM_OC3_SetConfig+0xdc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d10d      	bne.n	8002402 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002400:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a14      	ldr	r2, [pc, #80]	; (8002458 <TIM_OC3_SetConfig+0xdc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d113      	bne.n	8002432 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	621a      	str	r2, [r3, #32]
}
 800244c:	bf00      	nop
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40012c00 	.word	0x40012c00

0800245c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002496:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249e:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024b2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	031b      	lsls	r3, r3, #12
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a0f      	ldr	r2, [pc, #60]	; (8002500 <TIM_OC4_SetConfig+0xa4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d109      	bne.n	80024dc <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	019b      	lsls	r3, r3, #6
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	621a      	str	r2, [r3, #32]
}
 80024f6:	bf00      	nop
 80024f8:	371c      	adds	r7, #28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	40012c00 	.word	0x40012c00

08002504 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	f023 0201 	bic.w	r2, r3, #1
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002536:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f023 030a 	bic.w	r3, r3, #10
 8002548:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	621a      	str	r2, [r3, #32]
}
 800255e:	bf00      	nop
 8002560:	371c      	adds	r7, #28
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f023 0210 	bic.w	r2, r3, #16
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800259a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	031b      	lsls	r3, r3, #12
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	621a      	str	r2, [r3, #32]
}
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	460b      	mov	r3, r1
 80025d8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ea:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80025ec:	887b      	ldrh	r3, [r7, #2]
 80025ee:	f043 0307 	orr.w	r3, r3, #7
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	609a      	str	r2, [r3, #8]
}
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800262a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	021a      	lsls	r2, r3, #8
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	431a      	orrs	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	4313      	orrs	r3, r2
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	609a      	str	r2, [r3, #8]
}
 8002644:	bf00      	nop
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002662:	2302      	movs	r3, #2
 8002664:	e032      	b.n	80026cc <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2202      	movs	r2, #2
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	6852      	ldr	r2, [r2, #4]
 8002680:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002684:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	6851      	ldr	r1, [r2, #4]
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	6892      	ldr	r2, [r2, #8]
 80026a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026a6:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	6891      	ldr	r1, [r2, #8]
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	6852      	ldr	r2, [r2, #4]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e03f      	b.n	8002768 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d106      	bne.n	8002702 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f001 f8db 	bl	80038b8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2224      	movs	r2, #36	; 0x24
 8002706:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	68d2      	ldr	r2, [r2, #12]
 8002714:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002718:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f828 	bl	8002770 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	6912      	ldr	r2, [r2, #16]
 800272a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800272e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	6952      	ldr	r2, [r2, #20]
 800273a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800273e:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	68d2      	ldr	r2, [r2, #12]
 800274a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800274e:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	6912      	ldr	r2, [r2, #16]
 8002786:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68d2      	ldr	r2, [r2, #12]
 800278e:	430a      	orrs	r2, r1
 8002790:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027b6:	f023 030c 	bic.w	r3, r3, #12
 80027ba:	68f9      	ldr	r1, [r7, #12]
 80027bc:	430b      	orrs	r3, r1
 80027be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	6952      	ldr	r2, [r2, #20]
 80027ca:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6992      	ldr	r2, [r2, #24]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a6f      	ldr	r2, [pc, #444]	; (8002998 <UART_SetConfig+0x228>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d16b      	bne.n	80028b8 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681c      	ldr	r4, [r3, #0]
 80027e4:	f7ff fa4c 	bl	8001c80 <HAL_RCC_GetPCLK2Freq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	009a      	lsls	r2, r3, #2
 80027f2:	441a      	add	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	4a67      	ldr	r2, [pc, #412]	; (800299c <UART_SetConfig+0x22c>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	011d      	lsls	r5, r3, #4
 8002808:	f7ff fa3a 	bl	8001c80 <HAL_RCC_GetPCLK2Freq>
 800280c:	4602      	mov	r2, r0
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	009a      	lsls	r2, r3, #2
 8002816:	441a      	add	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002822:	f7ff fa2d 	bl	8001c80 <HAL_RCC_GetPCLK2Freq>
 8002826:	4602      	mov	r2, r0
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	009a      	lsls	r2, r3, #2
 8002830:	441a      	add	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	4a57      	ldr	r2, [pc, #348]	; (800299c <UART_SetConfig+0x22c>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	2264      	movs	r2, #100	; 0x64
 8002846:	fb02 f303 	mul.w	r3, r2, r3
 800284a:	1af3      	subs	r3, r6, r3
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	3332      	adds	r3, #50	; 0x32
 8002850:	4a52      	ldr	r2, [pc, #328]	; (800299c <UART_SetConfig+0x22c>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800285c:	441d      	add	r5, r3
 800285e:	f7ff fa0f 	bl	8001c80 <HAL_RCC_GetPCLK2Freq>
 8002862:	4602      	mov	r2, r0
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	009a      	lsls	r2, r3, #2
 800286c:	441a      	add	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	fbb2 f6f3 	udiv	r6, r2, r3
 8002878:	f7ff fa02 	bl	8001c80 <HAL_RCC_GetPCLK2Freq>
 800287c:	4602      	mov	r2, r0
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	009a      	lsls	r2, r3, #2
 8002886:	441a      	add	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002892:	4a42      	ldr	r2, [pc, #264]	; (800299c <UART_SetConfig+0x22c>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	2264      	movs	r2, #100	; 0x64
 800289c:	fb02 f303 	mul.w	r3, r2, r3
 80028a0:	1af3      	subs	r3, r6, r3
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	3332      	adds	r3, #50	; 0x32
 80028a6:	4a3d      	ldr	r2, [pc, #244]	; (800299c <UART_SetConfig+0x22c>)
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	442b      	add	r3, r5
 80028b4:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80028b6:	e06a      	b.n	800298e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681c      	ldr	r4, [r3, #0]
 80028bc:	f7ff f9cc 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	009a      	lsls	r2, r3, #2
 80028ca:	441a      	add	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d6:	4a31      	ldr	r2, [pc, #196]	; (800299c <UART_SetConfig+0x22c>)
 80028d8:	fba2 2303 	umull	r2, r3, r2, r3
 80028dc:	095b      	lsrs	r3, r3, #5
 80028de:	011d      	lsls	r5, r3, #4
 80028e0:	f7ff f9ba 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	009a      	lsls	r2, r3, #2
 80028ee:	441a      	add	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	fbb2 f6f3 	udiv	r6, r2, r3
 80028fa:	f7ff f9ad 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 80028fe:	4602      	mov	r2, r0
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	009a      	lsls	r2, r3, #2
 8002908:	441a      	add	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	4a21      	ldr	r2, [pc, #132]	; (800299c <UART_SetConfig+0x22c>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2264      	movs	r2, #100	; 0x64
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	1af3      	subs	r3, r6, r3
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	3332      	adds	r3, #50	; 0x32
 8002928:	4a1c      	ldr	r2, [pc, #112]	; (800299c <UART_SetConfig+0x22c>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002934:	441d      	add	r5, r3
 8002936:	f7ff f98f 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 800293a:	4602      	mov	r2, r0
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	009a      	lsls	r2, r3, #2
 8002944:	441a      	add	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002950:	f7ff f982 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 8002954:	4602      	mov	r2, r0
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	009a      	lsls	r2, r3, #2
 800295e:	441a      	add	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	fbb2 f3f3 	udiv	r3, r2, r3
 800296a:	4a0c      	ldr	r2, [pc, #48]	; (800299c <UART_SetConfig+0x22c>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	2264      	movs	r2, #100	; 0x64
 8002974:	fb02 f303 	mul.w	r3, r2, r3
 8002978:	1af3      	subs	r3, r6, r3
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	3332      	adds	r3, #50	; 0x32
 800297e:	4a07      	ldr	r2, [pc, #28]	; (800299c <UART_SetConfig+0x22c>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	442b      	add	r3, r5
 800298c:	60a3      	str	r3, [r4, #8]
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002996:	bf00      	nop
 8002998:	40013800 	.word	0x40013800
 800299c:	51eb851f 	.word	0x51eb851f

080029a0 <NVIC_EnableIRQ>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80029aa:	4908      	ldr	r1, [pc, #32]	; (80029cc <NVIC_EnableIRQ+0x2c>)
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	79fa      	ldrb	r2, [r7, #7]
 80029b4:	f002 021f 	and.w	r2, r2, #31
 80029b8:	2001      	movs	r0, #1
 80029ba:	fa00 f202 	lsl.w	r2, r0, r2
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	e000e100 	.word	0xe000e100

080029d0 <sendPDU>:
/**
 * Sends message to BT-Device, computes the checksum
 * @return err message, if busy
 */
err sendPDU(PDU* pdu)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	if(!(transferInProgress_BTS))
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <sendPDU+0x60>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	f083 0301 	eor.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01d      	beq.n	8002a22 <sendPDU+0x52>
	{
		transferInProgress_BTS = true;
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <sendPDU+0x60>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
		nextMessage_BTS = *pdu;
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <sendPDU+0x64>)
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6810      	ldr	r0, [r2, #0]
 80029f2:	6851      	ldr	r1, [r2, #4]
 80029f4:	6018      	str	r0, [r3, #0]
 80029f6:	6059      	str	r1, [r3, #4]
 80029f8:	8911      	ldrh	r1, [r2, #8]
 80029fa:	7a92      	ldrb	r2, [r2, #10]
 80029fc:	8119      	strh	r1, [r3, #8]
 80029fe:	729a      	strb	r2, [r3, #10]
		DMA1_Channel4->CCR &= ~(DMA_CCR_EN); //Channel disable
 8002a00:	4a0d      	ldr	r2, [pc, #52]	; (8002a38 <sendPDU+0x68>)
 8002a02:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <sendPDU+0x68>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	6013      	str	r3, [r2, #0]
		DMA1_Channel4->CNDTR = sizeof(PDU);
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <sendPDU+0x68>)
 8002a0e:	220b      	movs	r2, #11
 8002a10:	605a      	str	r2, [r3, #4]
		DMA1_Channel4->CCR |= (DMA_CCR_EN); //Channel enable
 8002a12:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <sendPDU+0x68>)
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <sendPDU+0x68>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6013      	str	r3, [r2, #0]
		return ERR_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <sendPDU+0x54>
	}else
	{
		return ERR_BTS_ALREADY_IN_PROGRESS;
 8002a22:	2301      	movs	r3, #1
	}
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	2000003b 	.word	0x2000003b
 8002a34:	20000030 	.word	0x20000030
 8002a38:	40020044 	.word	0x40020044

08002a3c <iniBT_Serial>:
 * __HAL_RCC_DMA1_CLK_ENABLE();
 *
 * Uses UART1 and DMA1_C4 & C5
 */
err iniBT_Serial(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b094      	sub	sp, #80	; 0x50
 8002a40:	af00      	add	r7, sp, #0
	UART_HandleTypeDef huart1;

  /* USART1 init function */
	huart1.Instance = USART1;
 8002a42:	4b3c      	ldr	r3, [pc, #240]	; (8002b34 <iniBT_Serial+0xf8>)
 8002a44:	613b      	str	r3, [r7, #16]
	huart1.Init.BaudRate = 9600;
 8002a46:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002a4a:	617b      	str	r3, [r7, #20]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61bb      	str	r3, [r7, #24]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61fb      	str	r3, [r7, #28]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	623b      	str	r3, [r7, #32]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002a58:	230c      	movs	r3, #12
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a60:	2300      	movs	r3, #0
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a64:	f107 0310 	add.w	r3, r7, #16
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fe34 	bl	80026d6 <HAL_UART_Init>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <iniBT_Serial+0x40>
	{
	  _Error_Handler(__FILE__, __LINE__);
 8002a74:	2137      	movs	r1, #55	; 0x37
 8002a76:	4830      	ldr	r0, [pc, #192]	; (8002b38 <iniBT_Serial+0xfc>)
 8002a78:	f000 fb5a 	bl	8003130 <_Error_Handler>
	}

	//Pin Config
	GPIO_InitTypeDef GPIO_InitStruct;
	/* PA9 = alternate function push/pull output */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a80:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2302      	movs	r3, #2
 8002a84:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8a:	463b      	mov	r3, r7
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	482b      	ldr	r0, [pc, #172]	; (8002b3c <iniBT_Serial+0x100>)
 8002a90:	f7fe fb86 	bl	80011a0 <HAL_GPIO_Init>
	/* PA10 = floating input */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a98:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_INPUT;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9e:	463b      	mov	r3, r7
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4826      	ldr	r0, [pc, #152]	; (8002b3c <iniBT_Serial+0x100>)
 8002aa4:	f7fe fb7c 	bl	80011a0 <HAL_GPIO_Init>

	USART1->CR3 |= USART_CR3_DMAT;
 8002aa8:	4a22      	ldr	r2, [pc, #136]	; (8002b34 <iniBT_Serial+0xf8>)
 8002aaa:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <iniBT_Serial+0xf8>)
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab2:	6153      	str	r3, [r2, #20]
	USART1->CR3 |= USART_CR3_DMAR;
 8002ab4:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <iniBT_Serial+0xf8>)
 8002ab6:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <iniBT_Serial+0xf8>)
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002abe:	6153      	str	r3, [r2, #20]

	/* --- DMA --- */
	//DMA1_C4 -> USART1_TX
	//DMA1_C5 -> USART1_RX
	DMA1_Channel4->CPAR = (uint32_t)&(USART1->DR); //Peripheral Address TX
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <iniBT_Serial+0x104>)
 8002ac2:	4a20      	ldr	r2, [pc, #128]	; (8002b44 <iniBT_Serial+0x108>)
 8002ac4:	609a      	str	r2, [r3, #8]
	DMA1_Channel5->CPAR = (uint32_t)&(USART1->DR); //Peripheral Address RX
 8002ac6:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <iniBT_Serial+0x10c>)
 8002ac8:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <iniBT_Serial+0x108>)
 8002aca:	609a      	str	r2, [r3, #8]

	DMA1_Channel4->CMAR = (uint32_t)&nextMessage_BTS; //Memory Address to store Data to be transmitted
 8002acc:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <iniBT_Serial+0x104>)
 8002ace:	4a1f      	ldr	r2, [pc, #124]	; (8002b4c <iniBT_Serial+0x110>)
 8002ad0:	60da      	str	r2, [r3, #12]
	DMA1_Channel5->CMAR = (uint32_t)&receiveBuffer_BTS; //Memory Address to store received Data
 8002ad2:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <iniBT_Serial+0x10c>)
 8002ad4:	4a1e      	ldr	r2, [pc, #120]	; (8002b50 <iniBT_Serial+0x114>)
 8002ad6:	60da      	str	r2, [r3, #12]

	DMA1_Channel4->CNDTR = sizeof(PDU); //8 transfers per Iteration
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <iniBT_Serial+0x104>)
 8002ada:	220b      	movs	r2, #11
 8002adc:	605a      	str	r2, [r3, #4]
	DMA1_Channel5->CNDTR = sizeof(PDU_fromSmart); //8 transfers per Iteration
 8002ade:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <iniBT_Serial+0x10c>)
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	605a      	str	r2, [r3, #4]

	DMA1_Channel4->CCR 	=  (0 << DMA_CCR_PL_Pos) | DMA_CCR_MINC | DMA_CCR_DIR | DMA_CCR_TCIE; //no Prio, MSIZE = 8b, PSIZE= 8b, MemInc, noCirc, ReadFromMem, TransferCompleteInterruptEnable
 8002ae4:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <iniBT_Serial+0x104>)
 8002ae6:	2292      	movs	r2, #146	; 0x92
 8002ae8:	601a      	str	r2, [r3, #0]
	DMA1_Channel5->CCR 	=  (3 << DMA_CCR_PL_Pos) | DMA_CCR_MINC | DMA_CCR_TCIE | DMA_CCR_CIRC; //high Prio, MSIZE = 8b, PSIZE= 8b, MemInc, Circ, ReadFromPer, TransferCompleteInterruptEnable
 8002aea:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <iniBT_Serial+0x10c>)
 8002aec:	f243 02a2 	movw	r2, #12450	; 0x30a2
 8002af0:	601a      	str	r2, [r3, #0]

	USART1->SR &= ~(USART_SR_TC);
 8002af2:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <iniBT_Serial+0xf8>)
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <iniBT_Serial+0xf8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002afc:	6013      	str	r3, [r2, #0]
	//DMA1_Channel4->CCR |= DMA_CCR_EN; //Channel transmit enable
	DMA1_Channel5->CCR |= DMA_CCR_EN; //Channel receive  enable
 8002afe:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <iniBT_Serial+0x10c>)
 8002b00:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <iniBT_Serial+0x10c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6013      	str	r3, [r2, #0]

	transferInProgress_BTS = false;
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <iniBT_Serial+0x118>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]

	//enable Interrupt
	NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002b10:	200e      	movs	r0, #14
 8002b12:	f7ff ff45 	bl	80029a0 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002b16:	200f      	movs	r0, #15
 8002b18:	f7ff ff42 	bl	80029a0 <NVIC_EnableIRQ>

	//Enable USART
	USART1->CR1 |= USART_CR1_UE;
 8002b1c:	4a05      	ldr	r2, [pc, #20]	; (8002b34 <iniBT_Serial+0xf8>)
 8002b1e:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <iniBT_Serial+0xf8>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b26:	60d3      	str	r3, [r2, #12]

	return ERR_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3750      	adds	r7, #80	; 0x50
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40013800 	.word	0x40013800
 8002b38:	080039d0 	.word	0x080039d0
 8002b3c:	40010800 	.word	0x40010800
 8002b40:	40020044 	.word	0x40020044
 8002b44:	40013804 	.word	0x40013804
 8002b48:	40020058 	.word	0x40020058
 8002b4c:	20000030 	.word	0x20000030
 8002b50:	20000048 	.word	0x20000048
 8002b54:	2000003b 	.word	0x2000003b

08002b58 <getBytesLeft>:

uint8_t getBytesLeft()
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
	return DMA1_Channel5->CNDTR;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <getBytesLeft+0x14>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	b2db      	uxtb	r3, r3
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40020058 	.word	0x40020058

08002b70 <resetReceiveBuffer>:



void resetReceiveBuffer()
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
	DMA1->IFCR |= DMA_IFCR_CTCIF5 | DMA_IFCR_CGIF5; //Reset Interrupt
 8002b74:	4a06      	ldr	r2, [pc, #24]	; (8002b90 <resetReceiveBuffer+0x20>)
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <resetReceiveBuffer+0x20>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002b7e:	6053      	str	r3, [r2, #4]
	DMA1_Channel5->CNDTR = sizeof(PDU_fromSmart); //jump to start of the buffer
 8002b80:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <resetReceiveBuffer+0x24>)
 8002b82:	2208      	movs	r2, #8
 8002b84:	605a      	str	r2, [r3, #4]
}
 8002b86:	bf00      	nop
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40020000 	.word	0x40020000
 8002b94:	40020058 	.word	0x40020058

08002b98 <bt_timeout>:

void bt_timeout()
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
	static bool MessageReceiving = false;
	static uint8_t lastPosition = 0;
	static uint8_t timeout = 0;

	uint8_t bytesLeft = getBytesLeft();
 8002b9e:	f7ff ffdb 	bl	8002b58 <getBytesLeft>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
	if(MessageReceiving)
 8002ba6:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <bt_timeout+0x90>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d02b      	beq.n	8002c06 <bt_timeout+0x6e>
	{

		if(lastPosition < bytesLeft || bytesLeft == 0)
 8002bae:	4b1f      	ldr	r3, [pc, #124]	; (8002c2c <bt_timeout+0x94>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	79fa      	ldrb	r2, [r7, #7]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d802      	bhi.n	8002bbe <bt_timeout+0x26>
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <bt_timeout+0x2e>
		{
			//Message transfer complete
			MessageReceiving = false;
 8002bbe:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <bt_timeout+0x90>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
	{
		MessageReceiving = true;
		lastPosition = sizeof(PDU_fromSmart) + 1;
		timeout = 0;
	}
}
 8002bc4:	e02b      	b.n	8002c1e <bt_timeout+0x86>
		}else if(lastPosition == bytesLeft)
 8002bc6:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <bt_timeout+0x94>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	79fa      	ldrb	r2, [r7, #7]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d113      	bne.n	8002bf8 <bt_timeout+0x60>
			if(timeout++ > 20)
 8002bd0:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <bt_timeout+0x98>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	b2d1      	uxtb	r1, r2
 8002bd8:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <bt_timeout+0x98>)
 8002bda:	7011      	strb	r1, [r2, #0]
 8002bdc:	2b14      	cmp	r3, #20
 8002bde:	d91e      	bls.n	8002c1e <bt_timeout+0x86>
				MessageReceiving = false;
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <bt_timeout+0x90>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
				timeout = 0;
 8002be6:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <bt_timeout+0x98>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
				lastPosition = sizeof(PDU_fromSmart) + 1;
 8002bec:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <bt_timeout+0x94>)
 8002bee:	2209      	movs	r2, #9
 8002bf0:	701a      	strb	r2, [r3, #0]
				resetReceiveBuffer();
 8002bf2:	f7ff ffbd 	bl	8002b70 <resetReceiveBuffer>
}
 8002bf6:	e012      	b.n	8002c1e <bt_timeout+0x86>
			lastPosition = bytesLeft;
 8002bf8:	4a0c      	ldr	r2, [pc, #48]	; (8002c2c <bt_timeout+0x94>)
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	7013      	strb	r3, [r2, #0]
			timeout = 0;
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <bt_timeout+0x98>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
}
 8002c04:	e00b      	b.n	8002c1e <bt_timeout+0x86>
	} else if(bytesLeft < sizeof(PDU_fromSmart))
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	2b07      	cmp	r3, #7
 8002c0a:	d808      	bhi.n	8002c1e <bt_timeout+0x86>
		MessageReceiving = true;
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <bt_timeout+0x90>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	701a      	strb	r2, [r3, #0]
		lastPosition = sizeof(PDU_fromSmart) + 1;
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <bt_timeout+0x94>)
 8002c14:	2209      	movs	r2, #9
 8002c16:	701a      	strb	r2, [r3, #0]
		timeout = 0;
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <bt_timeout+0x98>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000028 	.word	0x20000028
 8002c2c:	20000029 	.word	0x20000029
 8002c30:	2000002a 	.word	0x2000002a

08002c34 <computePDU>:
 * 1. Check Message
 * 2. Execute
 * 3. Reply
 */
err computePDU()
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
	if(checkChecksum_fromSmart(&receiveBuffer_BTS))
 8002c38:	4806      	ldr	r0, [pc, #24]	; (8002c54 <computePDU+0x20>)
 8002c3a:	f000 f84e 	bl	8002cda <checkChecksum_fromSmart>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <computePDU+0x1a>
	{
		//Message is fine
		//HAL_UART_Transmit(&huart2, receiveBuffer_BTS.PDU_fromSmart_byteStream, sizeof(receiveBuffer_BTS), 0xFFFF);
		newMessage(&receiveBuffer_BTS);
 8002c44:	4803      	ldr	r0, [pc, #12]	; (8002c54 <computePDU+0x20>)
 8002c46:	f000 fa87 	bl	8003158 <newMessage>
		return ERR_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e000      	b.n	8002c50 <computePDU+0x1c>
	{
		//Message is corrupted
		//HAL_UART_Transmit(&huart2, receiveBuffer_BTS.PDU_fromSmart_byteStream, sizeof(receiveBuffer_BTS), 0xFFFF);
		//HAL_UART_Transmit(&huart2, "\r\n Message corrupted, reinitialize... \r\n", 41, 0xFFFF);

		return ERR_BTS_CHECKSUM;
 8002c4e:	2302      	movs	r3, #2
//	  nextMessage.PDU_s.value6 = 8;
//	  nextMessage.PDU_s.value7 = 9;
//	  nextMessage.PDU_s.value8 = 10;
//	  nextMessage.PDU_s.value9 = 11;
//	  computeChecksum(&nextMessage);
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000048 	.word	0x20000048

08002c58 <generateChecksum>:

void generateChecksum(PDU *msg)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	//Compute simple Checksum
	msg->PDU_s.checksum = computeChecksum(msg);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f808 	bl	8002c76 <computeChecksum>
 8002c66:	4603      	mov	r3, r0
 8002c68:	461a      	mov	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	729a      	strb	r2, [r3, #10]
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <computeChecksum>:
	//Compute simple Checksum
	return (msg->PDU_s.checksum == computeChecksum(msg));
}

uint8_t computeChecksum(PDU *msg)
{
 8002c76:	b490      	push	{r4, r7}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
	register uint8_t sum = 0;
 8002c7e:	2400      	movs	r4, #0
	//Compute simple Checksum
	for(uint8_t cnt = 0; cnt < sizeof(PDU)-1; cnt++)
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]
 8002c84:	e007      	b.n	8002c96 <computeChecksum+0x20>
	{
		sum += msg->PDU_byteStream[cnt];
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	4423      	add	r3, r4
 8002c8e:	b2dc      	uxtb	r4, r3
	for(uint8_t cnt = 0; cnt < sizeof(PDU)-1; cnt++)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	3301      	adds	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	2b09      	cmp	r3, #9
 8002c9a:	d9f4      	bls.n	8002c86 <computeChecksum+0x10>
	}
	return sum;
 8002c9c:	4623      	mov	r3, r4
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc90      	pop	{r4, r7}
 8002ca6:	4770      	bx	lr

08002ca8 <computeChecksum_fromSmart>:

uint8_t computeChecksum_fromSmart(PDU_fromSmart *msg)
{
 8002ca8:	b490      	push	{r4, r7}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	register uint8_t sum = 0;
 8002cb0:	2400      	movs	r4, #0
	//Compute simple Checksum
	for(uint8_t cnt = 0; cnt < sizeof(PDU_fromSmart)-1; cnt++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	e007      	b.n	8002cc8 <computeChecksum_fromSmart+0x20>
	{
		sum += msg->PDU_fromSmart_byteStream[cnt];
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	5cd3      	ldrb	r3, [r2, r3]
 8002cbe:	4423      	add	r3, r4
 8002cc0:	b2dc      	uxtb	r4, r3
	for(uint8_t cnt = 0; cnt < sizeof(PDU_fromSmart)-1; cnt++)
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d9f4      	bls.n	8002cb8 <computeChecksum_fromSmart+0x10>
	}
	return sum;
 8002cce:	4623      	mov	r3, r4
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc90      	pop	{r4, r7}
 8002cd8:	4770      	bx	lr

08002cda <checkChecksum_fromSmart>:

bool checkChecksum_fromSmart(PDU_fromSmart *msg)
{
 8002cda:	b590      	push	{r4, r7, lr}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
	return (msg->PDU_fromSmart_s.checksum == computeChecksum_fromSmart(msg));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	79dc      	ldrb	r4, [r3, #7]
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff ffde 	bl	8002ca8 <computeChecksum_fromSmart>
 8002cec:	4603      	mov	r3, r0
 8002cee:	429c      	cmp	r4, r3
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd90      	pop	{r4, r7, pc}

08002d00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d06:	4a2d      	ldr	r2, [pc, #180]	; (8002dbc <MX_GPIO_Init+0xbc>)
 8002d08:	4b2c      	ldr	r3, [pc, #176]	; (8002dbc <MX_GPIO_Init+0xbc>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f043 0310 	orr.w	r3, r3, #16
 8002d10:	6193      	str	r3, [r2, #24]
 8002d12:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <MX_GPIO_Init+0xbc>)
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d1e:	4a27      	ldr	r2, [pc, #156]	; (8002dbc <MX_GPIO_Init+0xbc>)
 8002d20:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <MX_GPIO_Init+0xbc>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f043 0320 	orr.w	r3, r3, #32
 8002d28:	6193      	str	r3, [r2, #24]
 8002d2a:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <MX_GPIO_Init+0xbc>)
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d36:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <MX_GPIO_Init+0xbc>)
 8002d38:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <MX_GPIO_Init+0xbc>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f043 0304 	orr.w	r3, r3, #4
 8002d40:	6193      	str	r3, [r2, #24]
 8002d42:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <MX_GPIO_Init+0xbc>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d4e:	4a1b      	ldr	r2, [pc, #108]	; (8002dbc <MX_GPIO_Init+0xbc>)
 8002d50:	4b1a      	ldr	r3, [pc, #104]	; (8002dbc <MX_GPIO_Init+0xbc>)
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f043 0308 	orr.w	r3, r3, #8
 8002d58:	6193      	str	r3, [r2, #24]
 8002d5a:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <MX_GPIO_Init+0xbc>)
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2120      	movs	r1, #32
 8002d6a:	4815      	ldr	r0, [pc, #84]	; (8002dc0 <MX_GPIO_Init+0xc0>)
 8002d6c:	f7fe fb76 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d76:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <MX_GPIO_Init+0xc4>)
 8002d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d7e:	f107 0310 	add.w	r3, r7, #16
 8002d82:	4619      	mov	r1, r3
 8002d84:	4810      	ldr	r0, [pc, #64]	; (8002dc8 <MX_GPIO_Init+0xc8>)
 8002d86:	f7fe fa0b 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d92:	2302      	movs	r3, #2
 8002d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002d96:	f107 0310 	add.w	r3, r7, #16
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4808      	ldr	r0, [pc, #32]	; (8002dc0 <MX_GPIO_Init+0xc0>)
 8002d9e:	f7fe f9ff 	bl	80011a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2100      	movs	r1, #0
 8002da6:	2028      	movs	r0, #40	; 0x28
 8002da8:	f7fd ff95 	bl	8000cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002dac:	2028      	movs	r0, #40	; 0x28
 8002dae:	f7fd ffae 	bl	8000d0e <HAL_NVIC_EnableIRQ>

}
 8002db2:	bf00      	nop
 8002db4:	3720      	adds	r7, #32
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40010800 	.word	0x40010800
 8002dc4:	10110000 	.word	0x10110000
 8002dc8:	40011000 	.word	0x40011000

08002dcc <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08c      	sub	sp, #48	; 0x30
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dd2:	f7fd f9bb 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dd6:	f000 f95b 	bl	8003090 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //__HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_ADC1_CLK_ENABLE();
 8002dda:	4a46      	ldr	r2, [pc, #280]	; (8002ef4 <main+0x128>)
 8002ddc:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <main+0x128>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002de4:	6193      	str	r3, [r2, #24]
 8002de6:	4b43      	ldr	r3, [pc, #268]	; (8002ef4 <main+0x128>)
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_USART1_CLK_ENABLE();
 8002df2:	4a40      	ldr	r2, [pc, #256]	; (8002ef4 <main+0x128>)
 8002df4:	4b3f      	ldr	r3, [pc, #252]	; (8002ef4 <main+0x128>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dfc:	6193      	str	r3, [r2, #24]
 8002dfe:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <main+0x128>)
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e0a:	4a3a      	ldr	r2, [pc, #232]	; (8002ef4 <main+0x128>)
 8002e0c:	4b39      	ldr	r3, [pc, #228]	; (8002ef4 <main+0x128>)
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6153      	str	r3, [r2, #20]
 8002e16:	4b37      	ldr	r3, [pc, #220]	; (8002ef4 <main+0x128>)
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002e22:	4a34      	ldr	r2, [pc, #208]	; (8002ef4 <main+0x128>)
 8002e24:	4b33      	ldr	r3, [pc, #204]	; (8002ef4 <main+0x128>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e2c:	6193      	str	r3, [r2, #24]
 8002e2e:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <main+0x128>)
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e36:	607b      	str	r3, [r7, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e3a:	f7ff ff61 	bl	8002d00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002e3e:	f000 fd0d 	bl	800385c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  iniBT_Serial();
 8002e42:	f7ff fdfb 	bl	8002a3c <iniBT_Serial>
  //dht11_ini(GPIOA, GPIO_PIN_0, TIM1);
  //dht11_read(&temp, &lfeu);
  sen_lightIni();
 8002e46:	f000 fb67 	bl	8003518 <sen_lightIni>
  pumpIni(TIM2, TIM_CHANNEL_1);
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e50:	f000 f9be 	bl	80031d0 <pumpIni>

  PDU sX_tMessage;
  PDU_fromSmart sX_rMessage;
  COMFROMSMART sX_rType;
  //computeChecksum(&nextMessage);
  uint8_t state = 5;
 8002e54:	2305      	movs	r3, #5
 8002e56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t timeout = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */


	  switch(state)
 8002e5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e62:	2b05      	cmp	r3, #5
 8002e64:	d003      	beq.n	8002e6e <main+0xa2>
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d020      	beq.n	8002eac <main+0xe0>
 8002e6a:	2b00      	cmp	r3, #0
	  {
	  case 0:
		  break;
 8002e6c:	e041      	b.n	8002ef2 <main+0x126>
	  case 5: /* - Waiting for new Message - */
		  if(newMessageIsAvailable())
 8002e6e:	f000 f989 	bl	8003184 <newMessageIsAvailable>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d039      	beq.n	8002eec <main+0x120>
		  {
			  sX_rMessage = *getRecMessage();
 8002e78:	f000 f99c 	bl	80031b4 <getRecMessage>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	f107 0314 	add.w	r3, r7, #20
 8002e82:	6810      	ldr	r0, [r2, #0]
 8002e84:	6851      	ldr	r1, [r2, #4]
 8002e86:	c303      	stmia	r3!, {r0, r1}
			  sX_rType = getRecMessageType();
 8002e88:	f000 f988 	bl	800319c <getRecMessageType>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			  initialActionPerform(sX_rType, &sX_rMessage, &sX_tMessage);
 8002e92:	f107 021c 	add.w	r2, r7, #28
 8002e96:	f107 0114 	add.w	r1, r7, #20
 8002e9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f82c 	bl	8002efc <initialActionPerform>
			  state = 6;
 8002ea4:	2306      	movs	r3, #6
 8002ea6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		  }
		  break;
 8002eaa:	e01f      	b.n	8002eec <main+0x120>
	  case 6: /* - Performing Message - */
		  if(messageActionPerform(sX_rType, &sX_rMessage, &sX_tMessage))
 8002eac:	f107 021c 	add.w	r2, r7, #28
 8002eb0:	f107 0114 	add.w	r1, r7, #20
 8002eb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 f897 	bl	8002fec <messageActionPerform>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d007      	beq.n	8002ed4 <main+0x108>
		  {
			  //Message replied
			  transmitReply(&sX_tMessage);
 8002ec4:	f107 031c 	add.w	r3, r7, #28
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 f937 	bl	800313c <transmitReply>
			  state = 5;
 8002ece:	2305      	movs	r3, #5
 8002ed0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		  }
		  if(timeout++ > 1000000)
 8002ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	62ba      	str	r2, [r7, #40]	; 0x28
 8002eda:	4a07      	ldr	r2, [pc, #28]	; (8002ef8 <main+0x12c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d907      	bls.n	8002ef0 <main+0x124>
		  {
			  //Message Failed
			  timeout = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  			  state = 5;
 8002ee4:	2305      	movs	r3, #5
 8002ee6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		  }
		  break;
 8002eea:	e001      	b.n	8002ef0 <main+0x124>
		  break;
 8002eec:	bf00      	nop
 8002eee:	e7b6      	b.n	8002e5e <main+0x92>
		  break;
 8002ef0:	bf00      	nop
	  switch(state)
 8002ef2:	e7b4      	b.n	8002e5e <main+0x92>
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	000f4240 	.word	0x000f4240

08002efc <initialActionPerform>:
  /* USER CODE END 3 */

}

void initialActionPerform(COMFROMSMART sX_rType, PDU_fromSmart *sX_rMessage, PDU *sX_tMessage)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	73fb      	strb	r3, [r7, #15]
	switch(sX_rType) //Initial Action
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d022      	beq.n	8002f56 <initialActionPerform+0x5a>
 8002f10:	2b05      	cmp	r3, #5
 8002f12:	d045      	beq.n	8002fa0 <initialActionPerform+0xa4>
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d000      	beq.n	8002f1a <initialActionPerform+0x1e>
		sX_tMessage->PDU_s.value7 = 0x00;
		sX_tMessage->PDU_s.value8 = 0x00;
		sX_tMessage->PDU_s.value9 = 0x00;
		break;
	default:
		break;
 8002f18:	e064      	b.n	8002fe4 <initialActionPerform+0xe8>
		sX_tMessage->PDU_s.startbyte = STARTBYTE_COMMAND;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2255      	movs	r2, #85	; 0x55
 8002f1e:	701a      	strb	r2, [r3, #0]
		sX_tMessage->PDU_s.command = COMREC_MAN_REPLY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	705a      	strb	r2, [r3, #1]
		if(sX_rMessage->PDU_fromSmart_s.value2 == 1 && pumpGetState() == PUMP_STATE_STOP)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	789b      	ldrb	r3, [r3, #2]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d107      	bne.n	8002f3e <initialActionPerform+0x42>
 8002f2e:	f000 fa27 	bl	8003380 <pumpGetState>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d102      	bne.n	8002f3e <initialActionPerform+0x42>
			pumpStart();
 8002f38:	f000 f9e2 	bl	8003300 <pumpStart>
		break;
 8002f3c:	e04f      	b.n	8002fde <initialActionPerform+0xe2>
		}else if(sX_rMessage->PDU_fromSmart_s.value2 == 0 && pumpGetState() == PUMP_STATE_RUNNING)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	789b      	ldrb	r3, [r3, #2]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d14b      	bne.n	8002fde <initialActionPerform+0xe2>
 8002f46:	f000 fa1b 	bl	8003380 <pumpGetState>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d146      	bne.n	8002fde <initialActionPerform+0xe2>
			pumpStop();
 8002f50:	f000 f9f6 	bl	8003340 <pumpStop>
		break;
 8002f54:	e043      	b.n	8002fde <initialActionPerform+0xe2>
		sX_tMessage->PDU_s.startbyte = STARTBYTE_DATA;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2254      	movs	r2, #84	; 0x54
 8002f5a:	701a      	strb	r2, [r3, #0]
		sX_tMessage->PDU_s.command = 1;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	705a      	strb	r2, [r3, #1]
		sX_tMessage->PDU_s.value2 = 2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2202      	movs	r2, #2
 8002f66:	709a      	strb	r2, [r3, #2]
		sX_tMessage->PDU_s.value3 = 3;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	70da      	strb	r2, [r3, #3]
		sX_tMessage->PDU_s.value4 = 4;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2204      	movs	r2, #4
 8002f72:	711a      	strb	r2, [r3, #4]
		sX_tMessage->PDU_s.value5 = 0x00;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	715a      	strb	r2, [r3, #5]
		sX_tMessage->PDU_s.value6 = 0x00;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	719a      	strb	r2, [r3, #6]
		sX_tMessage->PDU_s.value7 = 0x00;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	71da      	strb	r2, [r3, #7]
		sX_tMessage->PDU_s.value8 = 0x00;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	721a      	strb	r2, [r3, #8]
		sX_tMessage->PDU_s.value9 = 0x00;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	725a      	strb	r2, [r3, #9]
		if(sX_rMessage->PDU_fromSmart_s.value2 == 0x01)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	789b      	ldrb	r3, [r3, #2]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d123      	bne.n	8002fe2 <initialActionPerform+0xe6>
			sen_startLightMeasure();
 8002f9a:	f000 fac3 	bl	8003524 <sen_startLightMeasure>
		break;
 8002f9e:	e020      	b.n	8002fe2 <initialActionPerform+0xe6>
		sX_tMessage->PDU_s.startbyte = STARTBYTE_COMMAND;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2255      	movs	r2, #85	; 0x55
 8002fa4:	701a      	strb	r2, [r3, #0]
		sX_tMessage->PDU_s.command = COMREC_AVAILIBILITY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2203      	movs	r2, #3
 8002faa:	705a      	strb	r2, [r3, #1]
		sX_tMessage->PDU_s.value2 = 0x11;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2211      	movs	r2, #17
 8002fb0:	709a      	strb	r2, [r3, #2]
		sX_tMessage->PDU_s.value3 = 0;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	70da      	strb	r2, [r3, #3]
		sX_tMessage->PDU_s.value4 = 0;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	711a      	strb	r2, [r3, #4]
		sX_tMessage->PDU_s.value5 = 0x00;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	715a      	strb	r2, [r3, #5]
		sX_tMessage->PDU_s.value6 = 0x00;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	719a      	strb	r2, [r3, #6]
		sX_tMessage->PDU_s.value7 = 0x00;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	71da      	strb	r2, [r3, #7]
		sX_tMessage->PDU_s.value8 = 0x00;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	721a      	strb	r2, [r3, #8]
		sX_tMessage->PDU_s.value9 = 0x00;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	725a      	strb	r2, [r3, #9]
		break;
 8002fdc:	e002      	b.n	8002fe4 <initialActionPerform+0xe8>
		break;
 8002fde:	bf00      	nop
 8002fe0:	e000      	b.n	8002fe4 <initialActionPerform+0xe8>
		break;
 8002fe2:	bf00      	nop
	}
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <messageActionPerform>:

bool messageActionPerform(COMFROMSMART sX_rType, PDU_fromSmart *sX_rMessage, PDU *sX_tMessage)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	73fb      	strb	r3, [r7, #15]
	switch(sX_rType) //Initial Action
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d02b      	beq.n	8003058 <messageActionPerform+0x6c>
 8003000:	2b05      	cmp	r3, #5
 8003002:	d03e      	beq.n	8003082 <messageActionPerform+0x96>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d000      	beq.n	800300a <messageActionPerform+0x1e>
			*/
		case COMFROMSMART_AVAILABILITY_REQUEST:
			//Nothing to do
			break;
		default:
			break;
 8003008:	e03c      	b.n	8003084 <messageActionPerform+0x98>
			sX_tMessage->PDU_s.value2 = pumpGetState() == PUMP_STATE_RUNNING;
 800300a:	f000 f9b9 	bl	8003380 <pumpGetState>
 800300e:	4603      	mov	r3, r0
 8003010:	2b02      	cmp	r3, #2
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	709a      	strb	r2, [r3, #2]
			sX_tMessage->PDU_s.value3 = sX_rMessage->PDU_fromSmart_s.value3;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	78da      	ldrb	r2, [r3, #3]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	70da      	strb	r2, [r3, #3]
			sX_tMessage->PDU_s.value4 = 0x00;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	711a      	strb	r2, [r3, #4]
			sX_tMessage->PDU_s.value5 = 0x00;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	715a      	strb	r2, [r3, #5]
			sX_tMessage->PDU_s.value6 = 0x00;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	719a      	strb	r2, [r3, #6]
			sX_tMessage->PDU_s.value7 = 0x00;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	71da      	strb	r2, [r3, #7]
			sX_tMessage->PDU_s.value8 = 0x00;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	721a      	strb	r2, [r3, #8]
			sX_tMessage->PDU_s.value9 = 0x00;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	725a      	strb	r2, [r3, #9]
			pumpSet(sX_rMessage->PDU_fromSmart_s.value3);
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	78db      	ldrb	r3, [r3, #3]
 8003050:	4618      	mov	r0, r3
 8003052:	f000 f99f 	bl	8003394 <pumpSet>
			break;
 8003056:	e015      	b.n	8003084 <messageActionPerform+0x98>
			if(sen_temperatureMeasureReady())
 8003058:	f000 fa9e 	bl	8003598 <sen_temperatureMeasureReady>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00d      	beq.n	800307e <messageActionPerform+0x92>
				sX_tMessage->PDU_s.value6 = sen_getTemperatureMeasure();
 8003062:	f000 faa5 	bl	80035b0 <sen_getTemperatureMeasure>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	719a      	strb	r2, [r3, #6]
				sX_tMessage->PDU_s.value5 = sen_getLightMeasure();
 800306e:	f000 facd 	bl	800360c <sen_getLightMeasure>
 8003072:	4603      	mov	r3, r0
 8003074:	461a      	mov	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	715a      	strb	r2, [r3, #5]
				return true;
 800307a:	2301      	movs	r3, #1
 800307c:	e003      	b.n	8003086 <messageActionPerform+0x9a>
				return false;
 800307e:	2300      	movs	r3, #0
 8003080:	e001      	b.n	8003086 <messageActionPerform+0x9a>
			break;
 8003082:	bf00      	nop
		}
	return true;
 8003084:	2301      	movs	r3, #1
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b090      	sub	sp, #64	; 0x40
 8003094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003096:	2302      	movs	r3, #2
 8003098:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800309a:	2301      	movs	r3, #1
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800309e:	2310      	movs	r3, #16
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030a2:	2302      	movs	r3, #2
 80030a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80030a6:	2300      	movs	r3, #0
 80030a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80030aa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80030ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030b0:	f107 0318 	add.w	r3, r7, #24
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fe fa0b 	bl	80014d0 <HAL_RCC_OscConfig>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <SystemClock_Config+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80030c0:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80030c4:	4818      	ldr	r0, [pc, #96]	; (8003128 <SystemClock_Config+0x98>)
 80030c6:	f000 f833 	bl	8003130 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030ca:	230f      	movs	r3, #15
 80030cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030ce:	2302      	movs	r3, #2
 80030d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030e0:	1d3b      	adds	r3, r7, #4
 80030e2:	2102      	movs	r1, #2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fe fc57 	bl	8001998 <HAL_RCC_ClockConfig>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d004      	beq.n	80030fa <SystemClock_Config+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80030f0:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80030f4:	480c      	ldr	r0, [pc, #48]	; (8003128 <SystemClock_Config+0x98>)
 80030f6:	f000 f81b 	bl	8003130 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80030fa:	f7fe fda3 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 80030fe:	4602      	mov	r2, r0
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <SystemClock_Config+0x9c>)
 8003102:	fba3 2302 	umull	r2, r3, r3, r2
 8003106:	099b      	lsrs	r3, r3, #6
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd fe0e 	bl	8000d2a <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800310e:	2004      	movs	r0, #4
 8003110:	f7fd fe18 	bl	8000d44 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003114:	2200      	movs	r2, #0
 8003116:	2100      	movs	r1, #0
 8003118:	f04f 30ff 	mov.w	r0, #4294967295
 800311c:	f7fd fddb 	bl	8000cd6 <HAL_NVIC_SetPriority>
}
 8003120:	bf00      	nop
 8003122:	3740      	adds	r7, #64	; 0x40
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	080039e4 	.word	0x080039e4
 800312c:	10624dd3 	.word	0x10624dd3

08003130 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800313a:	e7fe      	b.n	800313a <_Error_Handler+0xa>

0800313c <transmitReply>:
 */

#include "protocol_bt.h"

void transmitReply(PDU *msg)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
	generateChecksum(msg);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff fd87 	bl	8002c58 <generateChecksum>
	sendPDU(msg);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fc40 	bl	80029d0 <sendPDU>
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <newMessage>:

void newMessage(PDU_fromSmart *msg)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	messageAvailable = true;
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <newMessage+0x24>)
 8003162:	2201      	movs	r2, #1
 8003164:	701a      	strb	r2, [r3, #0]
	currentMessage = *msg;
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <newMessage+0x28>)
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6811      	ldr	r1, [r2, #0]
 800316c:	6852      	ldr	r2, [r2, #4]
 800316e:	6019      	str	r1, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	2000003c 	.word	0x2000003c
 8003180:	20000040 	.word	0x20000040

08003184 <newMessageIsAvailable>:

bool newMessageIsAvailable()
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
	return messageAvailable;
 8003188:	4b03      	ldr	r3, [pc, #12]	; (8003198 <newMessageIsAvailable+0x14>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	b2db      	uxtb	r3, r3
}
 800318e:	4618      	mov	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	2000003c 	.word	0x2000003c

0800319c <getRecMessageType>:

COMFROMSMART getRecMessageType()
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
	return currentMessage.PDU_fromSmart_s.command;
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <getRecMessageType+0x14>)
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	b2db      	uxtb	r3, r3
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000040 	.word	0x20000040

080031b4 <getRecMessage>:

PDU_fromSmart* getRecMessage()
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
	messageAvailable = false;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <getRecMessage+0x14>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
	return &currentMessage;
 80031be:	4b03      	ldr	r3, [pc, #12]	; (80031cc <getRecMessage+0x18>)
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	2000003c 	.word	0x2000003c
 80031cc:	20000040 	.word	0x20000040

080031d0 <pumpIni>:
 * Initialize Timer periphery for PWM Output
 * @param tim Timer Peripheral (TIM2)
 * @param cha Channel for Output (TIM_CHANNEL_1)
 */
void pumpIni(TIM_TypeDef *tim, uint32_t cha)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b0a4      	sub	sp, #144	; 0x90
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_HandleTypeDef htim2;

	htim2.Instance = TIM2;
 80031da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031de:	61fb      	str	r3, [r7, #28]
	htim2.Init.Prescaler = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	623b      	str	r3, [r7, #32]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e4:	2300      	movs	r3, #0
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
	htim2.Init.Period = 0xFFFF;
 80031e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ee:	2300      	movs	r3, #0
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80031f6:	f107 031c 	add.w	r3, r7, #28
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe fd72 	bl	8001ce4 <HAL_TIM_Base_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <pumpIni+0x3e>
	{
	_Error_Handler(__FILE__, __LINE__);
 8003206:	2120      	movs	r1, #32
 8003208:	4839      	ldr	r0, [pc, #228]	; (80032f0 <pumpIni+0x120>)
 800320a:	f7ff ff91 	bl	8003130 <_Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800320e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003212:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003216:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800321a:	f107 031c 	add.w	r3, r7, #28
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe fe8d 	bl	8001f40 <HAL_TIM_ConfigClockSource>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <pumpIni+0x64>
	{
	_Error_Handler(__FILE__, __LINE__);
 800322c:	2126      	movs	r1, #38	; 0x26
 800322e:	4830      	ldr	r0, [pc, #192]	; (80032f0 <pumpIni+0x120>)
 8003230:	f7ff ff7e 	bl	8003130 <_Error_Handler>
	}

	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003234:	f107 031c 	add.w	r3, r7, #28
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe fd87 	bl	8001d4c <HAL_TIM_PWM_Init>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <pumpIni+0x7c>
	{
	_Error_Handler(__FILE__, __LINE__);
 8003244:	212b      	movs	r1, #43	; 0x2b
 8003246:	482a      	ldr	r0, [pc, #168]	; (80032f0 <pumpIni+0x120>)
 8003248:	f7ff ff72 	bl	8003130 <_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800324c:	2300      	movs	r3, #0
 800324e:	67bb      	str	r3, [r7, #120]	; 0x78
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003250:	2300      	movs	r3, #0
 8003252:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003254:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003258:	f107 031c 	add.w	r3, r7, #28
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff f9f5 	bl	800264e <HAL_TIMEx_MasterConfigSynchronization>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <pumpIni+0xa2>
	{
	_Error_Handler(__FILE__, __LINE__);
 800326a:	2132      	movs	r1, #50	; 0x32
 800326c:	4820      	ldr	r0, [pc, #128]	; (80032f0 <pumpIni+0x120>)
 800326e:	f7ff ff5f 	bl	8003130 <_Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003272:	2360      	movs	r3, #96	; 0x60
 8003274:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.Pulse = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800327a:	2300      	movs	r3, #0
 800327c:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800327e:	2300      	movs	r3, #0
 8003280:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, cha) != HAL_OK)
 8003282:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003286:	f107 031c 	add.w	r3, r7, #28
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe fd91 	bl	8001db4 <HAL_TIM_PWM_ConfigChannel>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <pumpIni+0xd0>
	{
	_Error_Handler(__FILE__, __LINE__);
 8003298:	213b      	movs	r1, #59	; 0x3b
 800329a:	4815      	ldr	r0, [pc, #84]	; (80032f0 <pumpIni+0x120>)
 800329c:	f7ff ff48 	bl	8003130 <_Error_Handler>
	}

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032a0:	2301      	movs	r3, #1
 80032a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a4:	2302      	movs	r3, #2
 80032a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a8:	2302      	movs	r3, #2
 80032aa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ac:	f107 030c 	add.w	r3, r7, #12
 80032b0:	4619      	mov	r1, r3
 80032b2:	4810      	ldr	r0, [pc, #64]	; (80032f4 <pumpIni+0x124>)
 80032b4:	f7fd ff74 	bl	80011a0 <HAL_GPIO_Init>

    __HAL_RCC_TIM2_CLK_ENABLE();
 80032b8:	4a0f      	ldr	r2, [pc, #60]	; (80032f8 <pumpIni+0x128>)
 80032ba:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <pumpIni+0x128>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	61d3      	str	r3, [r2, #28]
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <pumpIni+0x128>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	68bb      	ldr	r3, [r7, #8]

    //
    //CompareEnable
    TIM2->CCER |= TIM_CCER_CC1E;
 80032d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6213      	str	r3, [r2, #32]
	//Output Enable
    //TIM2->BDTR |= TIM_BDTR_MOE;

    pumpState = PUMP_STATE_STOP;
 80032e0:	4b06      	ldr	r3, [pc, #24]	; (80032fc <pumpIni+0x12c>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	701a      	strb	r2, [r3, #0]



}
 80032e6:	bf00      	nop
 80032e8:	3790      	adds	r7, #144	; 0x90
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	080039f4 	.word	0x080039f4
 80032f4:	40010800 	.word	0x40010800
 80032f8:	40021000 	.word	0x40021000
 80032fc:	20000050 	.word	0x20000050

08003300 <pumpStart>:

PUMP_RESULT pumpStart()
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
	if(pumpState == PUMP_STATE_STOP)
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <pumpStart+0x3c>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d114      	bne.n	8003336 <pumpStart+0x36>
	{
		pumpSet(0);
 800330c:	2000      	movs	r0, #0
 800330e:	f000 f841 	bl	8003394 <pumpSet>
		//Timer Enable
		pumpIni(TIM2, TIM_CHANNEL_1);
 8003312:	2100      	movs	r1, #0
 8003314:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003318:	f7ff ff5a 	bl	80031d0 <pumpIni>
		//Output Enable
		//TIM2->BDTR |= TIM_BDTR_MOE;
		TIM2->CR1 |= TIM_CR1_CEN;
 800331c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6013      	str	r3, [r2, #0]
		pumpState = PUMP_STATE_RUNNING;
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <pumpStart+0x3c>)
 800332e:	2202      	movs	r2, #2
 8003330:	701a      	strb	r2, [r3, #0]
		return PUMP_RESULT_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e000      	b.n	8003338 <pumpStart+0x38>
	}
	else
	{
		return PUMP_RESULT_ERROR;
 8003336:	2301      	movs	r3, #1
	}
}
 8003338:	4618      	mov	r0, r3
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000050 	.word	0x20000050

08003340 <pumpStop>:

PUMP_RESULT pumpStop()
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
	if(pumpState == PUMP_STATE_RUNNING)
 8003344:	4b0d      	ldr	r3, [pc, #52]	; (800337c <pumpStop+0x3c>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d113      	bne.n	8003374 <pumpStop+0x34>
	{
		//Timer Disable
		pumpSet(0);
 800334c:	2000      	movs	r0, #0
 800334e:	f000 f821 	bl	8003394 <pumpSet>

		TIM2->CCER = 0; //Output Disable
 8003352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003356:	2200      	movs	r2, #0
 8003358:	621a      	str	r2, [r3, #32]
		TIM2->CR1 &= ~(TIM_CR1_CEN);
 800335a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800335e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	6013      	str	r3, [r2, #0]
		pumpState = PUMP_STATE_STOP;
 800336a:	4b04      	ldr	r3, [pc, #16]	; (800337c <pumpStop+0x3c>)
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
		return PUMP_RESULT_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <pumpStop+0x36>
	}
	else
	{
		return PUMP_RESULT_ERROR;
 8003374:	2301      	movs	r3, #1
	}
}
 8003376:	4618      	mov	r0, r3
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20000050 	.word	0x20000050

08003380 <pumpGetState>:

PUMP_STATE pumpGetState()
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
	return pumpState;
 8003384:	4b02      	ldr	r3, [pc, #8]	; (8003390 <pumpGetState+0x10>)
 8003386:	781b      	ldrb	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	20000050 	.word	0x20000050

08003394 <pumpSet>:

/**
 * @param per Percentage of PumpPower (0...100)
 */
PUMP_RESULT pumpSet(uint8_t per)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
	if(per >= 0 && per <= 100)
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	2b64      	cmp	r3, #100	; 0x64
 80033a2:	d809      	bhi.n	80033b8 <pumpSet+0x24>
	{
		//Calculate CCR1 - Value depending on per
		TIM2->CCR1 = (per * 0x028F); // 0xFFFF/100 = 0x028F
 80033a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	f240 218f 	movw	r1, #655	; 0x28f
 80033ae:	fb01 f303 	mul.w	r3, r1, r3
 80033b2:	6353      	str	r3, [r2, #52]	; 0x34
		return PUMP_RESULT_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e000      	b.n	80033ba <pumpSet+0x26>
	}else
		return PUMP_RESULT_ERROR;
 80033b8:	2301      	movs	r3, #1

}
 80033ba:	4618      	mov	r0, r3
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr

080033c4 <sen_temperatureIni>:

ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

void sen_temperatureIni()
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
	/* ADC1 init function */
	  ADC_ChannelConfTypeDef sConfig;

	    /**Common config
	    */
	  hadc1.Instance = ADC1;
 80033ca:	4b4c      	ldr	r3, [pc, #304]	; (80034fc <sen_temperatureIni+0x138>)
 80033cc:	4a4c      	ldr	r2, [pc, #304]	; (8003500 <sen_temperatureIni+0x13c>)
 80033ce:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80033d0:	4b4a      	ldr	r3, [pc, #296]	; (80034fc <sen_temperatureIni+0x138>)
 80033d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033d6:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 80033d8:	4b48      	ldr	r3, [pc, #288]	; (80034fc <sen_temperatureIni+0x138>)
 80033da:	2201      	movs	r2, #1
 80033dc:	60da      	str	r2, [r3, #12]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <sen_temperatureIni+0x138>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	615a      	str	r2, [r3, #20]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033e4:	4b45      	ldr	r3, [pc, #276]	; (80034fc <sen_temperatureIni+0x138>)
 80033e6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80033ea:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033ec:	4b43      	ldr	r3, [pc, #268]	; (80034fc <sen_temperatureIni+0x138>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	605a      	str	r2, [r3, #4]
	  hadc1.Init.NbrOfConversion = 2;
 80033f2:	4b42      	ldr	r3, [pc, #264]	; (80034fc <sen_temperatureIni+0x138>)
 80033f4:	2202      	movs	r2, #2
 80033f6:	611a      	str	r2, [r3, #16]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80033f8:	4840      	ldr	r0, [pc, #256]	; (80034fc <sen_temperatureIni+0x138>)
 80033fa:	f7fc ff09 	bl	8000210 <HAL_ADC_Init>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <sen_temperatureIni+0x48>
	  {
	    _Error_Handler(__FILE__, __LINE__);
 8003404:	211e      	movs	r1, #30
 8003406:	483f      	ldr	r0, [pc, #252]	; (8003504 <sen_temperatureIni+0x140>)
 8003408:	f7ff fe92 	bl	8003130 <_Error_Handler>
	  }

	    /**Configure Regular Channel
	    */
	  sConfig.Channel = ADC_CHANNEL_1;
 800340c:	2301      	movs	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003410:	2301      	movs	r3, #1
 8003412:	61bb      	str	r3, [r7, #24]
	  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8003414:	2306      	movs	r3, #6
 8003416:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003418:	f107 0314 	add.w	r3, r7, #20
 800341c:	4619      	mov	r1, r3
 800341e:	4837      	ldr	r0, [pc, #220]	; (80034fc <sen_temperatureIni+0x138>)
 8003420:	f7fd f994 	bl	800074c <HAL_ADC_ConfigChannel>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <sen_temperatureIni+0x6e>
	  {
	    _Error_Handler(__FILE__, __LINE__);
 800342a:	2128      	movs	r1, #40	; 0x28
 800342c:	4835      	ldr	r0, [pc, #212]	; (8003504 <sen_temperatureIni+0x140>)
 800342e:	f7ff fe7f 	bl	8003130 <_Error_Handler>
	  }

	    /**Configure Regular Channel
	    */
	  sConfig.Channel = ADC_CHANNEL_4;
 8003432:	2304      	movs	r3, #4
 8003434:	617b      	str	r3, [r7, #20]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003436:	2302      	movs	r3, #2
 8003438:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800343a:	f107 0314 	add.w	r3, r7, #20
 800343e:	4619      	mov	r1, r3
 8003440:	482e      	ldr	r0, [pc, #184]	; (80034fc <sen_temperatureIni+0x138>)
 8003442:	f7fd f983 	bl	800074c <HAL_ADC_ConfigChannel>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <sen_temperatureIni+0x90>
	  {
	    _Error_Handler(__FILE__, __LINE__);
 800344c:	2131      	movs	r1, #49	; 0x31
 800344e:	482d      	ldr	r0, [pc, #180]	; (8003504 <sen_temperatureIni+0x140>)
 8003450:	f7ff fe6e 	bl	8003130 <_Error_Handler>
	  GPIO_InitTypeDef GPIO_InitStruct;
	  /* USER CODE BEGIN ADC1_MspInit 0 */

	  /* USER CODE END ADC1_MspInit 0 */
	    /* ADC1 clock enable */
	    __HAL_RCC_ADC1_CLK_ENABLE();
 8003454:	4a2c      	ldr	r2, [pc, #176]	; (8003508 <sen_temperatureIni+0x144>)
 8003456:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <sen_temperatureIni+0x144>)
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800345e:	6193      	str	r3, [r2, #24]
 8003460:	4b29      	ldr	r3, [pc, #164]	; (8003508 <sen_temperatureIni+0x144>)
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	683b      	ldr	r3, [r7, #0]

	    /**ADC1 GPIO Configuration
	    PA1     ------> ADC1_IN1
	    PA4     ------> ADC1_IN4
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800346c:	2312      	movs	r3, #18
 800346e:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003470:	2303      	movs	r3, #3
 8003472:	60bb      	str	r3, [r7, #8]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003474:	1d3b      	adds	r3, r7, #4
 8003476:	4619      	mov	r1, r3
 8003478:	4824      	ldr	r0, [pc, #144]	; (800350c <sen_temperatureIni+0x148>)
 800347a:	f7fd fe91 	bl	80011a0 <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA1_Channel1;
 800347e:	4b24      	ldr	r3, [pc, #144]	; (8003510 <sen_temperatureIni+0x14c>)
 8003480:	4a24      	ldr	r2, [pc, #144]	; (8003514 <sen_temperatureIni+0x150>)
 8003482:	601a      	str	r2, [r3, #0]
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003484:	4b22      	ldr	r3, [pc, #136]	; (8003510 <sen_temperatureIni+0x14c>)
 8003486:	2200      	movs	r2, #0
 8003488:	605a      	str	r2, [r3, #4]
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800348a:	4b21      	ldr	r3, [pc, #132]	; (8003510 <sen_temperatureIni+0x14c>)
 800348c:	2200      	movs	r2, #0
 800348e:	609a      	str	r2, [r3, #8]
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003490:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <sen_temperatureIni+0x14c>)
 8003492:	2280      	movs	r2, #128	; 0x80
 8003494:	60da      	str	r2, [r3, #12]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003496:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <sen_temperatureIni+0x14c>)
 8003498:	f44f 7280 	mov.w	r2, #256	; 0x100
 800349c:	611a      	str	r2, [r3, #16]
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800349e:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <sen_temperatureIni+0x14c>)
 80034a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034a4:	615a      	str	r2, [r3, #20]
	    hdma_adc1.Init.Mode = DMA_NORMAL;
 80034a6:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <sen_temperatureIni+0x14c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80034ac:	4b18      	ldr	r3, [pc, #96]	; (8003510 <sen_temperatureIni+0x14c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80034b2:	4817      	ldr	r0, [pc, #92]	; (8003510 <sen_temperatureIni+0x14c>)
 80034b4:	f7fd fc6e 	bl	8000d94 <HAL_DMA_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <sen_temperatureIni+0x102>
	    {
	      _Error_Handler(__FILE__, __LINE__);
 80034be:	214f      	movs	r1, #79	; 0x4f
 80034c0:	4810      	ldr	r0, [pc, #64]	; (8003504 <sen_temperatureIni+0x140>)
 80034c2:	f7ff fe35 	bl	8003130 <_Error_Handler>
	    }

	    __HAL_LINKDMA(&hadc1,DMA_Handle,hdma_adc1);
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <sen_temperatureIni+0x138>)
 80034c8:	4a11      	ldr	r2, [pc, #68]	; (8003510 <sen_temperatureIni+0x14c>)
 80034ca:	621a      	str	r2, [r3, #32]
 80034cc:	4b10      	ldr	r3, [pc, #64]	; (8003510 <sen_temperatureIni+0x14c>)
 80034ce:	4a0b      	ldr	r2, [pc, #44]	; (80034fc <sen_temperatureIni+0x138>)
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24

	    //DMA interrupt Init
	    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80034d2:	2200      	movs	r2, #0
 80034d4:	2100      	movs	r1, #0
 80034d6:	200b      	movs	r0, #11
 80034d8:	f7fd fbfd 	bl	8000cd6 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80034dc:	200b      	movs	r0, #11
 80034de:	f7fd fc16 	bl	8000d0e <HAL_NVIC_EnableIRQ>

	    /* ADC1 interrupt Init */
	    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80034e2:	2200      	movs	r2, #0
 80034e4:	2100      	movs	r1, #0
 80034e6:	2012      	movs	r0, #18
 80034e8:	f7fd fbf5 	bl	8000cd6 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80034ec:	2012      	movs	r0, #18
 80034ee:	f7fd fc0e 	bl	8000d0e <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN ADC1_MspInit 1 */

	  /* USER CODE END ADC1_MspInit 1 */


}
 80034f2:	bf00      	nop
 80034f4:	3720      	adds	r7, #32
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	200000b8 	.word	0x200000b8
 8003500:	40012400 	.word	0x40012400
 8003504:	08003a0c 	.word	0x08003a0c
 8003508:	40021000 	.word	0x40021000
 800350c:	40010800 	.word	0x40010800
 8003510:	200000e8 	.word	0x200000e8
 8003514:	40020008 	.word	0x40020008

08003518 <sen_lightIni>:

void sen_lightIni()
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
	sen_temperatureIni();
 800351c:	f7ff ff52 	bl	80033c4 <sen_temperatureIni>
}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}

08003524 <sen_startLightMeasure>:

uint8_t sen_getLight();
uint8_t sen_getTemperature();

void sen_startLightMeasure()
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
		measAvailable = false;
 800352a:	4b17      	ldr	r3, [pc, #92]	; (8003588 <sen_startLightMeasure+0x64>)
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
		/**Configure Regular Channel **/
		ADC_ChannelConfTypeDef sConfig;
		sConfig.Channel = ADC_CHANNEL_1;
 8003530:	2301      	movs	r3, #1
 8003532:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8003534:	2301      	movs	r3, #1
 8003536:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8003538:	2306      	movs	r3, #6
 800353a:	60fb      	str	r3, [r7, #12]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	4619      	mov	r1, r3
 8003540:	4812      	ldr	r0, [pc, #72]	; (800358c <sen_startLightMeasure+0x68>)
 8003542:	f7fd f903 	bl	800074c <HAL_ADC_ConfigChannel>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <sen_startLightMeasure+0x30>
		{
		_Error_Handler(__FILE__, __LINE__);
 800354c:	2174      	movs	r1, #116	; 0x74
 800354e:	4810      	ldr	r0, [pc, #64]	; (8003590 <sen_startLightMeasure+0x6c>)
 8003550:	f7ff fdee 	bl	8003130 <_Error_Handler>
		}

		/**Configure Regular Channel
		*/
		sConfig.Channel = ADC_CHANNEL_4;
 8003554:	2304      	movs	r3, #4
 8003556:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_2;
 8003558:	2302      	movs	r3, #2
 800355a:	60bb      	str	r3, [r7, #8]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	4619      	mov	r1, r3
 8003560:	480a      	ldr	r0, [pc, #40]	; (800358c <sen_startLightMeasure+0x68>)
 8003562:	f7fd f8f3 	bl	800074c <HAL_ADC_ConfigChannel>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <sen_startLightMeasure+0x50>
		{
		_Error_Handler(__FILE__, __LINE__);
 800356c:	217d      	movs	r1, #125	; 0x7d
 800356e:	4808      	ldr	r0, [pc, #32]	; (8003590 <sen_startLightMeasure+0x6c>)
 8003570:	f7ff fdde 	bl	8003130 <_Error_Handler>
		}

	HAL_ADC_Start_DMA(&hadc1, dmaBuffer, 50);
 8003574:	2232      	movs	r2, #50	; 0x32
 8003576:	4907      	ldr	r1, [pc, #28]	; (8003594 <sen_startLightMeasure+0x70>)
 8003578:	4804      	ldr	r0, [pc, #16]	; (800358c <sen_startLightMeasure+0x68>)
 800357a:	f7fc ff2b 	bl	80003d4 <HAL_ADC_Start_DMA>
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000051 	.word	0x20000051
 800358c:	200000b8 	.word	0x200000b8
 8003590:	08003a0c 	.word	0x08003a0c
 8003594:	20000054 	.word	0x20000054

08003598 <sen_temperatureMeasureReady>:
	measAvailable = false;
	//HAL_ADC_Start_DMA(&hadc1, dmaBuffer, 50);
}

bool sen_temperatureMeasureReady()
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
	return measAvailable;
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <sen_temperatureMeasureReady+0x14>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b2db      	uxtb	r3, r3
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000051 	.word	0x20000051

080035b0 <sen_getTemperatureMeasure>:
{
	return measAvailable;
}

uint8_t sen_getTemperatureMeasure()
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
	measAvailable = false;
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <sen_getTemperatureMeasure+0x50>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
	uint32_t sum = 0;
 80035bc:	2300      	movs	r3, #0
 80035be:	607b      	str	r3, [r7, #4]

	for(uint8_t index = 0; index < 50 ;index+=2)
 80035c0:	2300      	movs	r3, #0
 80035c2:	70fb      	strb	r3, [r7, #3]
 80035c4:	e00b      	b.n	80035de <sen_getTemperatureMeasure+0x2e>
	{
		sum += dmaBuffer[index];
 80035c6:	78fb      	ldrb	r3, [r7, #3]
 80035c8:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <sen_getTemperatureMeasure+0x54>)
 80035ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4413      	add	r3, r2
 80035d6:	607b      	str	r3, [r7, #4]
	for(uint8_t index = 0; index < 50 ;index+=2)
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	3302      	adds	r3, #2
 80035dc:	70fb      	strb	r3, [r7, #3]
 80035de:	78fb      	ldrb	r3, [r7, #3]
 80035e0:	2b31      	cmp	r3, #49	; 0x31
 80035e2:	d9f0      	bls.n	80035c6 <sen_getTemperatureMeasure+0x16>
	}
	sum /= 2500;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a08      	ldr	r2, [pc, #32]	; (8003608 <sen_getTemperatureMeasure+0x58>)
 80035e8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ec:	0adb      	lsrs	r3, r3, #11
 80035ee:	607b      	str	r3, [r7, #4]
	return sum;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	b2db      	uxtb	r3, r3
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000051 	.word	0x20000051
 8003604:	20000054 	.word	0x20000054
 8003608:	d1b71759 	.word	0xd1b71759

0800360c <sen_getLightMeasure>:
uint8_t sen_getLightMeasure()
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
	measAvailable = false;
 8003612:	4b12      	ldr	r3, [pc, #72]	; (800365c <sen_getLightMeasure+0x50>)
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
	uint32_t sum = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	607b      	str	r3, [r7, #4]

	for(uint8_t index = 1; index < 50 ;index+=2)
 800361c:	2301      	movs	r3, #1
 800361e:	70fb      	strb	r3, [r7, #3]
 8003620:	e00b      	b.n	800363a <sen_getLightMeasure+0x2e>
	{
		sum += dmaBuffer[index];
 8003622:	78fb      	ldrb	r3, [r7, #3]
 8003624:	4a0e      	ldr	r2, [pc, #56]	; (8003660 <sen_getLightMeasure+0x54>)
 8003626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800362a:	b29b      	uxth	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	607b      	str	r3, [r7, #4]
	for(uint8_t index = 1; index < 50 ;index+=2)
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	3302      	adds	r3, #2
 8003638:	70fb      	strb	r3, [r7, #3]
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	2b31      	cmp	r3, #49	; 0x31
 800363e:	d9f0      	bls.n	8003622 <sen_getLightMeasure+0x16>
	}
	sum /= 2500;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a08      	ldr	r2, [pc, #32]	; (8003664 <sen_getLightMeasure+0x58>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	0adb      	lsrs	r3, r3, #11
 800364a:	607b      	str	r3, [r7, #4]
	return sum;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	b2db      	uxtb	r3, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20000051 	.word	0x20000051
 8003660:	20000054 	.word	0x20000054
 8003664:	d1b71759 	.word	0xd1b71759

08003668 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	measAvailable = true;
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <HAL_ADC_ConvCpltCallback+0x18>)
 8003672:	2201      	movs	r2, #1
 8003674:	701a      	strb	r2, [r3, #0]
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr
 8003680:	20000051 	.word	0x20000051

08003684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800368a:	4a25      	ldr	r2, [pc, #148]	; (8003720 <HAL_MspInit+0x9c>)
 800368c:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_MspInit+0x9c>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6193      	str	r3, [r2, #24]
 8003696:	4b22      	ldr	r3, [pc, #136]	; (8003720 <HAL_MspInit+0x9c>)
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036a2:	2003      	movs	r0, #3
 80036a4:	f7fd fb0c 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80036a8:	2200      	movs	r2, #0
 80036aa:	2100      	movs	r1, #0
 80036ac:	f06f 000b 	mvn.w	r0, #11
 80036b0:	f7fd fb11 	bl	8000cd6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80036b4:	2200      	movs	r2, #0
 80036b6:	2100      	movs	r1, #0
 80036b8:	f06f 000a 	mvn.w	r0, #10
 80036bc:	f7fd fb0b 	bl	8000cd6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80036c0:	2200      	movs	r2, #0
 80036c2:	2100      	movs	r1, #0
 80036c4:	f06f 0009 	mvn.w	r0, #9
 80036c8:	f7fd fb05 	bl	8000cd6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80036cc:	2200      	movs	r2, #0
 80036ce:	2100      	movs	r1, #0
 80036d0:	f06f 0004 	mvn.w	r0, #4
 80036d4:	f7fd faff 	bl	8000cd6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80036d8:	2200      	movs	r2, #0
 80036da:	2100      	movs	r1, #0
 80036dc:	f06f 0003 	mvn.w	r0, #3
 80036e0:	f7fd faf9 	bl	8000cd6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80036e4:	2200      	movs	r2, #0
 80036e6:	2100      	movs	r1, #0
 80036e8:	f06f 0001 	mvn.w	r0, #1
 80036ec:	f7fd faf3 	bl	8000cd6 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80036f0:	2200      	movs	r2, #0
 80036f2:	2100      	movs	r1, #0
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	f7fd faed 	bl	8000cd6 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_MspInit+0xa0>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	607b      	str	r3, [r7, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	4a04      	ldr	r2, [pc, #16]	; (8003724 <HAL_MspInit+0xa0>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000
 8003724:	40010000 	.word	0x40010000

08003728 <NVIC_ClearPendingIRQ>:
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003732:	4909      	ldr	r1, [pc, #36]	; (8003758 <NVIC_ClearPendingIRQ+0x30>)
 8003734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	79fa      	ldrb	r2, [r7, #7]
 800373c:	f002 021f 	and.w	r2, r2, #31
 8003740:	2001      	movs	r0, #1
 8003742:	fa00 f202 	lsl.w	r2, r0, r2
 8003746:	3360      	adds	r3, #96	; 0x60
 8003748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	e000e100 	.word	0xe000e100

0800375c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003760:	f7fc fd3a 	bl	80001d8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003764:	f7fd fb0a 	bl	8000d7c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  bt_timeout();
 8003768:	f7ff fa16 	bl	8002b98 <bt_timeout>
  /* USER CODE END SysTick_IRQn 1 */
}
 800376c:	bf00      	nop
 800376e:	bd80      	pop	{r7, pc}

08003770 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003774:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003778:	f7fd fe88 	bl	800148c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800377c:	bf00      	nop
 800377e:	bd80      	pop	{r7, pc}

08003780 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
	DMA1->IFCR |= DMA_IFCR_CTCIF4 | DMA_IFCR_CGIF4;
 8003784:	4a06      	ldr	r2, [pc, #24]	; (80037a0 <DMA1_Channel4_IRQHandler+0x20>)
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <DMA1_Channel4_IRQHandler+0x20>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800378e:	6053      	str	r3, [r2, #4]
	NVIC_ClearPendingIRQ(DMA1_Channel4_IRQn);
 8003790:	200e      	movs	r0, #14
 8003792:	f7ff ffc9 	bl	8003728 <NVIC_ClearPendingIRQ>
	transferInProgress_BTS = false;
 8003796:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <DMA1_Channel4_IRQHandler+0x24>)
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]
}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40020000 	.word	0x40020000
 80037a4:	2000003b 	.word	0x2000003b

080037a8 <DMA1_Channel5_IRQHandler>:

/**
 * Called while receive Buffer is full
 */
void DMA1_Channel5_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
	DMA1->IFCR |= DMA_IFCR_CTCIF5 | DMA_IFCR_CGIF5;
 80037ac:	4a06      	ldr	r2, [pc, #24]	; (80037c8 <DMA1_Channel5_IRQHandler+0x20>)
 80037ae:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <DMA1_Channel5_IRQHandler+0x20>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80037b6:	6053      	str	r3, [r2, #4]
	NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);
 80037b8:	200f      	movs	r0, #15
 80037ba:	f7ff ffb5 	bl	8003728 <NVIC_ClearPendingIRQ>
	computePDU();
 80037be:	f7ff fa39 	bl	8002c34 <computePDU>
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40020000 	.word	0x40020000

080037cc <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel1 global interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037d0:	4802      	ldr	r0, [pc, #8]	; (80037dc <DMA1_Channel1_IRQHandler+0x10>)
 80037d2:	f7fd fba5 	bl	8000f20 <HAL_DMA_IRQHandler>

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	200000e8 	.word	0x200000e8

080037e0 <ADC1_2_IRQHandler>:

/**
* @brief This function handles ADC1 and ADC2 global interrupts.
*/
void ADC1_2_IRQHandler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80037e4:	4802      	ldr	r0, [pc, #8]	; (80037f0 <ADC1_2_IRQHandler+0x10>)
 80037e6:	f7fc fed3 	bl	8000590 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	200000b8 	.word	0x200000b8

080037f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80037f8:	4a15      	ldr	r2, [pc, #84]	; (8003850 <SystemInit+0x5c>)
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <SystemInit+0x5c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003804:	4912      	ldr	r1, [pc, #72]	; (8003850 <SystemInit+0x5c>)
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <SystemInit+0x5c>)
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <SystemInit+0x60>)
 800380c:	4013      	ands	r3, r2
 800380e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003810:	4a0f      	ldr	r2, [pc, #60]	; (8003850 <SystemInit+0x5c>)
 8003812:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <SystemInit+0x5c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800381a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003820:	4a0b      	ldr	r2, [pc, #44]	; (8003850 <SystemInit+0x5c>)
 8003822:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <SystemInit+0x5c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800382c:	4a08      	ldr	r2, [pc, #32]	; (8003850 <SystemInit+0x5c>)
 800382e:	4b08      	ldr	r3, [pc, #32]	; (8003850 <SystemInit+0x5c>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003836:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <SystemInit+0x5c>)
 800383a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800383e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <SystemInit+0x64>)
 8003842:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003846:	609a      	str	r2, [r3, #8]
#endif 
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr
 8003850:	40021000 	.word	0x40021000
 8003854:	f8ff0000 	.word	0xf8ff0000
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003860:	4b12      	ldr	r3, [pc, #72]	; (80038ac <MX_USART2_UART_Init+0x50>)
 8003862:	4a13      	ldr	r2, [pc, #76]	; (80038b0 <MX_USART2_UART_Init+0x54>)
 8003864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003866:	4b11      	ldr	r3, [pc, #68]	; (80038ac <MX_USART2_UART_Init+0x50>)
 8003868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800386c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800386e:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <MX_USART2_UART_Init+0x50>)
 8003870:	2200      	movs	r2, #0
 8003872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003874:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <MX_USART2_UART_Init+0x50>)
 8003876:	2200      	movs	r2, #0
 8003878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800387a:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <MX_USART2_UART_Init+0x50>)
 800387c:	2200      	movs	r2, #0
 800387e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003880:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <MX_USART2_UART_Init+0x50>)
 8003882:	220c      	movs	r2, #12
 8003884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003886:	4b09      	ldr	r3, [pc, #36]	; (80038ac <MX_USART2_UART_Init+0x50>)
 8003888:	2200      	movs	r2, #0
 800388a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800388c:	4b07      	ldr	r3, [pc, #28]	; (80038ac <MX_USART2_UART_Init+0x50>)
 800388e:	2200      	movs	r2, #0
 8003890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003892:	4806      	ldr	r0, [pc, #24]	; (80038ac <MX_USART2_UART_Init+0x50>)
 8003894:	f7fe ff1f 	bl	80026d6 <HAL_UART_Init>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800389e:	2142      	movs	r1, #66	; 0x42
 80038a0:	4804      	ldr	r0, [pc, #16]	; (80038b4 <MX_USART2_UART_Init+0x58>)
 80038a2:	f7ff fc45 	bl	8003130 <_Error_Handler>
  }

}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	2000012c 	.word	0x2000012c
 80038b0:	40004400 	.word	0x40004400
 80038b4:	08003a20 	.word	0x08003a20

080038b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a0f      	ldr	r2, [pc, #60]	; (8003904 <HAL_UART_MspInit+0x4c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d117      	bne.n	80038fa <HAL_UART_MspInit+0x42>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80038ca:	4a0f      	ldr	r2, [pc, #60]	; (8003908 <HAL_UART_MspInit+0x50>)
 80038cc:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <HAL_UART_MspInit+0x50>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d4:	61d3      	str	r3, [r2, #28]
 80038d6:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <HAL_UART_MspInit+0x50>)
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80038e2:	230c      	movs	r3, #12
 80038e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ea:	2302      	movs	r3, #2
 80038ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ee:	f107 0310 	add.w	r3, r7, #16
 80038f2:	4619      	mov	r1, r3
 80038f4:	4805      	ldr	r0, [pc, #20]	; (800390c <HAL_UART_MspInit+0x54>)
 80038f6:	f7fd fc53 	bl	80011a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80038fa:	bf00      	nop
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40004400 	.word	0x40004400
 8003908:	40021000 	.word	0x40021000
 800390c:	40010800 	.word	0x40010800

08003910 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003910:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003912:	e003      	b.n	800391c <LoopCopyDataInit>

08003914 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003916:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003918:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800391a:	3104      	adds	r1, #4

0800391c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800391c:	480a      	ldr	r0, [pc, #40]	; (8003948 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003920:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003922:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003924:	d3f6      	bcc.n	8003914 <CopyDataInit>
  ldr r2, =_sbss
 8003926:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003928:	e002      	b.n	8003930 <LoopFillZerobss>

0800392a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800392a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800392c:	f842 3b04 	str.w	r3, [r2], #4

08003930 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003930:	4b08      	ldr	r3, [pc, #32]	; (8003954 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003932:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003934:	d3f9      	bcc.n	800392a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003936:	f7ff ff5d 	bl	80037f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800393a:	f000 f80f 	bl	800395c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800393e:	f7ff fa45 	bl	8002dcc <main>
  bx lr
 8003942:	4770      	bx	lr
  ldr r3, =_sidata
 8003944:	08003a50 	.word	0x08003a50
  ldr r0, =_sdata
 8003948:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800394c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8003950:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8003954:	2000016c 	.word	0x2000016c

08003958 <BusFault_Handler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003958:	e7fe      	b.n	8003958 <BusFault_Handler>
	...

0800395c <__libc_init_array>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	2500      	movs	r5, #0
 8003960:	4e0c      	ldr	r6, [pc, #48]	; (8003994 <__libc_init_array+0x38>)
 8003962:	4c0d      	ldr	r4, [pc, #52]	; (8003998 <__libc_init_array+0x3c>)
 8003964:	1ba4      	subs	r4, r4, r6
 8003966:	10a4      	asrs	r4, r4, #2
 8003968:	42a5      	cmp	r5, r4
 800396a:	d109      	bne.n	8003980 <__libc_init_array+0x24>
 800396c:	f000 f81a 	bl	80039a4 <_init>
 8003970:	2500      	movs	r5, #0
 8003972:	4e0a      	ldr	r6, [pc, #40]	; (800399c <__libc_init_array+0x40>)
 8003974:	4c0a      	ldr	r4, [pc, #40]	; (80039a0 <__libc_init_array+0x44>)
 8003976:	1ba4      	subs	r4, r4, r6
 8003978:	10a4      	asrs	r4, r4, #2
 800397a:	42a5      	cmp	r5, r4
 800397c:	d105      	bne.n	800398a <__libc_init_array+0x2e>
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003984:	4798      	blx	r3
 8003986:	3501      	adds	r5, #1
 8003988:	e7ee      	b.n	8003968 <__libc_init_array+0xc>
 800398a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800398e:	4798      	blx	r3
 8003990:	3501      	adds	r5, #1
 8003992:	e7f2      	b.n	800397a <__libc_init_array+0x1e>
 8003994:	08003a48 	.word	0x08003a48
 8003998:	08003a48 	.word	0x08003a48
 800399c:	08003a48 	.word	0x08003a48
 80039a0:	08003a4c 	.word	0x08003a4c

080039a4 <_init>:
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a6:	bf00      	nop
 80039a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039aa:	bc08      	pop	{r3}
 80039ac:	469e      	mov	lr, r3
 80039ae:	4770      	bx	lr

080039b0 <_fini>:
 80039b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b2:	bf00      	nop
 80039b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039b6:	bc08      	pop	{r3}
 80039b8:	469e      	mov	lr, r3
 80039ba:	4770      	bx	lr
