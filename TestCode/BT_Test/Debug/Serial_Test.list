
Serial_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08001a04  08001a04  00011a04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a80  08001a80  00011a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a84  08001a84  00011a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08001a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000070  20000070  08001af8  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000e0  08001af8  000200e0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b74f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c71  00000000  00000000  0002b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021de  00000000  00000000  0002d459  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004c0  00000000  00000000  0002f638  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000610  00000000  00000000  0002faf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000318f  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001dc5  00000000  00000000  00033297  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003505c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000ea8  00000000  00000000  000350d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080019ec 	.word	0x080019ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080019ec 	.word	0x080019ec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f88c 	bl	8000290 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	f000 f842 	bl	8000210 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000008 	.word	0x20000008
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f81b 	bl	80001ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f000 feda 	bl	8000f74 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000098 	.word	0x20000098
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	20000098 	.word	0x20000098

080001ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ee:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001fa:	041b      	lsls	r3, r3, #16
 80001fc:	0c1b      	lsrs	r3, r3, #16
 80001fe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000206:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000208:	60d3      	str	r3, [r2, #12]
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000210:	4b17      	ldr	r3, [pc, #92]	; (8000270 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000212:	b530      	push	{r4, r5, lr}
 8000214:	68dc      	ldr	r4, [r3, #12]
 8000216:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800021a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000220:	2b04      	cmp	r3, #4
 8000222:	bf28      	it	cs
 8000224:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000228:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800022c:	bf98      	it	ls
 800022e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000230:	fa05 f303 	lsl.w	r3, r5, r3
 8000234:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000238:	bf88      	it	hi
 800023a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	4019      	ands	r1, r3
 800023e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000240:	fa05 f404 	lsl.w	r4, r5, r4
 8000244:	3c01      	subs	r4, #1
 8000246:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000248:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024a:	ea42 0201 	orr.w	r2, r2, r1
 800024e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	bfaf      	iteee	ge
 8000254:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	4b06      	ldrlt	r3, [pc, #24]	; (8000274 <HAL_NVIC_SetPriority+0x64>)
 800025a:	f000 000f 	andlt.w	r0, r0, #15
 800025e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	bfa5      	ittet	ge
 8000262:	b2d2      	uxtbge	r2, r2
 8000264:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800026e:	bd30      	pop	{r4, r5, pc}
 8000270:	e000ed00 	.word	0xe000ed00
 8000274:	e000ed14 	.word	0xe000ed14

08000278 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000278:	2301      	movs	r3, #1
 800027a:	0942      	lsrs	r2, r0, #5
 800027c:	f000 001f 	and.w	r0, r0, #31
 8000280:	fa03 f000 	lsl.w	r0, r3, r0
 8000284:	4b01      	ldr	r3, [pc, #4]	; (800028c <HAL_NVIC_EnableIRQ+0x14>)
 8000286:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800028a:	4770      	bx	lr
 800028c:	e000e100 	.word	0xe000e100

08000290 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000290:	3801      	subs	r0, #1
 8000292:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000296:	d20a      	bcs.n	80002ae <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000e010 	.word	0xe000e010
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002be:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	bf0c      	ite	eq
 80002c4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002c8:	f022 0204 	bicne.w	r2, r2, #4
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	4770      	bx	lr
 80002d0:	e000e010 	.word	0xe000e010

080002d4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002d4:	4770      	bx	lr

080002d6 <HAL_SYSTICK_IRQHandler>:
{
 80002d6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002d8:	f7ff fffc 	bl	80002d4 <HAL_SYSTICK_Callback>
 80002dc:	bd08      	pop	{r3, pc}
	...

080002e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002e4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002e6:	4616      	mov	r6, r2
 80002e8:	4b65      	ldr	r3, [pc, #404]	; (8000480 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ea:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000490 <HAL_GPIO_Init+0x1b0>
 80002ee:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000494 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002f2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002f6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002f8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002fc:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000300:	45a0      	cmp	r8, r4
 8000302:	d17f      	bne.n	8000404 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000304:	684d      	ldr	r5, [r1, #4]
 8000306:	2d12      	cmp	r5, #18
 8000308:	f000 80af 	beq.w	800046a <HAL_GPIO_Init+0x18a>
 800030c:	f200 8088 	bhi.w	8000420 <HAL_GPIO_Init+0x140>
 8000310:	2d02      	cmp	r5, #2
 8000312:	f000 80a7 	beq.w	8000464 <HAL_GPIO_Init+0x184>
 8000316:	d87c      	bhi.n	8000412 <HAL_GPIO_Init+0x132>
 8000318:	2d00      	cmp	r5, #0
 800031a:	f000 808e 	beq.w	800043a <HAL_GPIO_Init+0x15a>
 800031e:	2d01      	cmp	r5, #1
 8000320:	f000 809e 	beq.w	8000460 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000324:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000328:	2cff      	cmp	r4, #255	; 0xff
 800032a:	bf93      	iteet	ls
 800032c:	4682      	movls	sl, r0
 800032e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000332:	3d08      	subhi	r5, #8
 8000334:	f8d0 b000 	ldrls.w	fp, [r0]
 8000338:	bf92      	itee	ls
 800033a:	00b5      	lslls	r5, r6, #2
 800033c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000340:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000342:	fa09 f805 	lsl.w	r8, r9, r5
 8000346:	ea2b 0808 	bic.w	r8, fp, r8
 800034a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800034e:	bf88      	it	hi
 8000350:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000354:	ea48 0505 	orr.w	r5, r8, r5
 8000358:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800035c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000360:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000364:	d04e      	beq.n	8000404 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000366:	4d47      	ldr	r5, [pc, #284]	; (8000484 <HAL_GPIO_Init+0x1a4>)
 8000368:	4f46      	ldr	r7, [pc, #280]	; (8000484 <HAL_GPIO_Init+0x1a4>)
 800036a:	69ad      	ldr	r5, [r5, #24]
 800036c:	f026 0803 	bic.w	r8, r6, #3
 8000370:	f045 0501 	orr.w	r5, r5, #1
 8000374:	61bd      	str	r5, [r7, #24]
 8000376:	69bd      	ldr	r5, [r7, #24]
 8000378:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800037c:	f005 0501 	and.w	r5, r5, #1
 8000380:	9501      	str	r5, [sp, #4]
 8000382:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000386:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800038c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000390:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000394:	fa09 f90b 	lsl.w	r9, r9, fp
 8000398:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800039c:	4d3a      	ldr	r5, [pc, #232]	; (8000488 <HAL_GPIO_Init+0x1a8>)
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d068      	beq.n	8000474 <HAL_GPIO_Init+0x194>
 80003a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a6:	42a8      	cmp	r0, r5
 80003a8:	d066      	beq.n	8000478 <HAL_GPIO_Init+0x198>
 80003aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ae:	42a8      	cmp	r0, r5
 80003b0:	d064      	beq.n	800047c <HAL_GPIO_Init+0x19c>
 80003b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b6:	42a8      	cmp	r0, r5
 80003b8:	bf0c      	ite	eq
 80003ba:	2503      	moveq	r5, #3
 80003bc:	2504      	movne	r5, #4
 80003be:	fa05 f50b 	lsl.w	r5, r5, fp
 80003c2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003c6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003ca:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003cc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003d0:	bf14      	ite	ne
 80003d2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003d4:	43a5      	biceq	r5, r4
 80003d6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003d8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003da:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003de:	bf14      	ite	ne
 80003e0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003e2:	43a5      	biceq	r5, r4
 80003e4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003e8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003ec:	bf14      	ite	ne
 80003ee:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003f0:	43a5      	biceq	r5, r4
 80003f2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003f6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003fa:	bf14      	ite	ne
 80003fc:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003fe:	ea25 0404 	biceq.w	r4, r5, r4
 8000402:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000404:	3601      	adds	r6, #1
 8000406:	2e10      	cmp	r6, #16
 8000408:	f47f af73 	bne.w	80002f2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 800040c:	b003      	add	sp, #12
 800040e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000412:	2d03      	cmp	r5, #3
 8000414:	d022      	beq.n	800045c <HAL_GPIO_Init+0x17c>
 8000416:	2d11      	cmp	r5, #17
 8000418:	d184      	bne.n	8000324 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800041a:	68ca      	ldr	r2, [r1, #12]
 800041c:	3204      	adds	r2, #4
          break;
 800041e:	e781      	b.n	8000324 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000420:	4f1a      	ldr	r7, [pc, #104]	; (800048c <HAL_GPIO_Init+0x1ac>)
 8000422:	42bd      	cmp	r5, r7
 8000424:	d009      	beq.n	800043a <HAL_GPIO_Init+0x15a>
 8000426:	d812      	bhi.n	800044e <HAL_GPIO_Init+0x16e>
 8000428:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000498 <HAL_GPIO_Init+0x1b8>
 800042c:	454d      	cmp	r5, r9
 800042e:	d004      	beq.n	800043a <HAL_GPIO_Init+0x15a>
 8000430:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000434:	454d      	cmp	r5, r9
 8000436:	f47f af75 	bne.w	8000324 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800043a:	688a      	ldr	r2, [r1, #8]
 800043c:	b1c2      	cbz	r2, 8000470 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800043e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000440:	bf0c      	ite	eq
 8000442:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000446:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800044a:	2208      	movs	r2, #8
 800044c:	e76a      	b.n	8000324 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800044e:	4575      	cmp	r5, lr
 8000450:	d0f3      	beq.n	800043a <HAL_GPIO_Init+0x15a>
 8000452:	4565      	cmp	r5, ip
 8000454:	d0f1      	beq.n	800043a <HAL_GPIO_Init+0x15a>
 8000456:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800049c <HAL_GPIO_Init+0x1bc>
 800045a:	e7eb      	b.n	8000434 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800045c:	2200      	movs	r2, #0
 800045e:	e761      	b.n	8000324 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000460:	68ca      	ldr	r2, [r1, #12]
          break;
 8000462:	e75f      	b.n	8000324 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000464:	68ca      	ldr	r2, [r1, #12]
 8000466:	3208      	adds	r2, #8
          break;
 8000468:	e75c      	b.n	8000324 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800046a:	68ca      	ldr	r2, [r1, #12]
 800046c:	320c      	adds	r2, #12
          break;
 800046e:	e759      	b.n	8000324 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000470:	2204      	movs	r2, #4
 8000472:	e757      	b.n	8000324 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000474:	2500      	movs	r5, #0
 8000476:	e7a2      	b.n	80003be <HAL_GPIO_Init+0xde>
 8000478:	2501      	movs	r5, #1
 800047a:	e7a0      	b.n	80003be <HAL_GPIO_Init+0xde>
 800047c:	2502      	movs	r5, #2
 800047e:	e79e      	b.n	80003be <HAL_GPIO_Init+0xde>
 8000480:	40010400 	.word	0x40010400
 8000484:	40021000 	.word	0x40021000
 8000488:	40010800 	.word	0x40010800
 800048c:	10210000 	.word	0x10210000
 8000490:	10310000 	.word	0x10310000
 8000494:	10320000 	.word	0x10320000
 8000498:	10110000 	.word	0x10110000
 800049c:	10220000 	.word	0x10220000

080004a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004a0:	b10a      	cbz	r2, 80004a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004a2:	6101      	str	r1, [r0, #16]
 80004a4:	4770      	bx	lr
 80004a6:	0409      	lsls	r1, r1, #16
 80004a8:	e7fb      	b.n	80004a2 <HAL_GPIO_WritePin+0x2>

080004aa <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004aa:	4770      	bx	lr

080004ac <HAL_GPIO_EXTI_IRQHandler>:
{
 80004ac:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80004b0:	6959      	ldr	r1, [r3, #20]
 80004b2:	4201      	tst	r1, r0
 80004b4:	d002      	beq.n	80004bc <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80004b6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80004b8:	f7ff fff7 	bl	80004aa <HAL_GPIO_EXTI_Callback>
 80004bc:	bd08      	pop	{r3, pc}
 80004be:	bf00      	nop
 80004c0:	40010400 	.word	0x40010400

080004c4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004c4:	6803      	ldr	r3, [r0, #0]
{
 80004c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ca:	07db      	lsls	r3, r3, #31
{
 80004cc:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ce:	d410      	bmi.n	80004f2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004d0:	682b      	ldr	r3, [r5, #0]
 80004d2:	079f      	lsls	r7, r3, #30
 80004d4:	d45e      	bmi.n	8000594 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004d6:	682b      	ldr	r3, [r5, #0]
 80004d8:	0719      	lsls	r1, r3, #28
 80004da:	f100 8095 	bmi.w	8000608 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004de:	682b      	ldr	r3, [r5, #0]
 80004e0:	075a      	lsls	r2, r3, #29
 80004e2:	f100 80bf 	bmi.w	8000664 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004e6:	69ea      	ldr	r2, [r5, #28]
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	f040 812d 	bne.w	8000748 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004ee:	2000      	movs	r0, #0
 80004f0:	e014      	b.n	800051c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004f2:	4c90      	ldr	r4, [pc, #576]	; (8000734 <HAL_RCC_OscConfig+0x270>)
 80004f4:	6863      	ldr	r3, [r4, #4]
 80004f6:	f003 030c 	and.w	r3, r3, #12
 80004fa:	2b04      	cmp	r3, #4
 80004fc:	d007      	beq.n	800050e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004fe:	6863      	ldr	r3, [r4, #4]
 8000500:	f003 030c 	and.w	r3, r3, #12
 8000504:	2b08      	cmp	r3, #8
 8000506:	d10c      	bne.n	8000522 <HAL_RCC_OscConfig+0x5e>
 8000508:	6863      	ldr	r3, [r4, #4]
 800050a:	03de      	lsls	r6, r3, #15
 800050c:	d509      	bpl.n	8000522 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800050e:	6823      	ldr	r3, [r4, #0]
 8000510:	039c      	lsls	r4, r3, #14
 8000512:	d5dd      	bpl.n	80004d0 <HAL_RCC_OscConfig+0xc>
 8000514:	686b      	ldr	r3, [r5, #4]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1da      	bne.n	80004d0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800051a:	2001      	movs	r0, #1
}
 800051c:	b002      	add	sp, #8
 800051e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000522:	686b      	ldr	r3, [r5, #4]
 8000524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000528:	d110      	bne.n	800054c <HAL_RCC_OscConfig+0x88>
 800052a:	6823      	ldr	r3, [r4, #0]
 800052c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000530:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000532:	f7ff fe55 	bl	80001e0 <HAL_GetTick>
 8000536:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000538:	6823      	ldr	r3, [r4, #0]
 800053a:	0398      	lsls	r0, r3, #14
 800053c:	d4c8      	bmi.n	80004d0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800053e:	f7ff fe4f 	bl	80001e0 <HAL_GetTick>
 8000542:	1b80      	subs	r0, r0, r6
 8000544:	2864      	cmp	r0, #100	; 0x64
 8000546:	d9f7      	bls.n	8000538 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000548:	2003      	movs	r0, #3
 800054a:	e7e7      	b.n	800051c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800054c:	b99b      	cbnz	r3, 8000576 <HAL_RCC_OscConfig+0xb2>
 800054e:	6823      	ldr	r3, [r4, #0]
 8000550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000554:	6023      	str	r3, [r4, #0]
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800055c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800055e:	f7ff fe3f 	bl	80001e0 <HAL_GetTick>
 8000562:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000564:	6823      	ldr	r3, [r4, #0]
 8000566:	0399      	lsls	r1, r3, #14
 8000568:	d5b2      	bpl.n	80004d0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800056a:	f7ff fe39 	bl	80001e0 <HAL_GetTick>
 800056e:	1b80      	subs	r0, r0, r6
 8000570:	2864      	cmp	r0, #100	; 0x64
 8000572:	d9f7      	bls.n	8000564 <HAL_RCC_OscConfig+0xa0>
 8000574:	e7e8      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000576:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800057a:	6823      	ldr	r3, [r4, #0]
 800057c:	d103      	bne.n	8000586 <HAL_RCC_OscConfig+0xc2>
 800057e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000582:	6023      	str	r3, [r4, #0]
 8000584:	e7d1      	b.n	800052a <HAL_RCC_OscConfig+0x66>
 8000586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800058a:	6023      	str	r3, [r4, #0]
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000592:	e7cd      	b.n	8000530 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000594:	4c67      	ldr	r4, [pc, #412]	; (8000734 <HAL_RCC_OscConfig+0x270>)
 8000596:	6863      	ldr	r3, [r4, #4]
 8000598:	f013 0f0c 	tst.w	r3, #12
 800059c:	d007      	beq.n	80005ae <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800059e:	6863      	ldr	r3, [r4, #4]
 80005a0:	f003 030c 	and.w	r3, r3, #12
 80005a4:	2b08      	cmp	r3, #8
 80005a6:	d110      	bne.n	80005ca <HAL_RCC_OscConfig+0x106>
 80005a8:	6863      	ldr	r3, [r4, #4]
 80005aa:	03da      	lsls	r2, r3, #15
 80005ac:	d40d      	bmi.n	80005ca <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005ae:	6823      	ldr	r3, [r4, #0]
 80005b0:	079b      	lsls	r3, r3, #30
 80005b2:	d502      	bpl.n	80005ba <HAL_RCC_OscConfig+0xf6>
 80005b4:	692b      	ldr	r3, [r5, #16]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d1af      	bne.n	800051a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005ba:	6823      	ldr	r3, [r4, #0]
 80005bc:	696a      	ldr	r2, [r5, #20]
 80005be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005c2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005c6:	6023      	str	r3, [r4, #0]
 80005c8:	e785      	b.n	80004d6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005ca:	692a      	ldr	r2, [r5, #16]
 80005cc:	4b5a      	ldr	r3, [pc, #360]	; (8000738 <HAL_RCC_OscConfig+0x274>)
 80005ce:	b16a      	cbz	r2, 80005ec <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80005d0:	2201      	movs	r2, #1
 80005d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005d4:	f7ff fe04 	bl	80001e0 <HAL_GetTick>
 80005d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005da:	6823      	ldr	r3, [r4, #0]
 80005dc:	079f      	lsls	r7, r3, #30
 80005de:	d4ec      	bmi.n	80005ba <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005e0:	f7ff fdfe 	bl	80001e0 <HAL_GetTick>
 80005e4:	1b80      	subs	r0, r0, r6
 80005e6:	2802      	cmp	r0, #2
 80005e8:	d9f7      	bls.n	80005da <HAL_RCC_OscConfig+0x116>
 80005ea:	e7ad      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ee:	f7ff fdf7 	bl	80001e0 <HAL_GetTick>
 80005f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005f4:	6823      	ldr	r3, [r4, #0]
 80005f6:	0798      	lsls	r0, r3, #30
 80005f8:	f57f af6d 	bpl.w	80004d6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005fc:	f7ff fdf0 	bl	80001e0 <HAL_GetTick>
 8000600:	1b80      	subs	r0, r0, r6
 8000602:	2802      	cmp	r0, #2
 8000604:	d9f6      	bls.n	80005f4 <HAL_RCC_OscConfig+0x130>
 8000606:	e79f      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000608:	69aa      	ldr	r2, [r5, #24]
 800060a:	4c4a      	ldr	r4, [pc, #296]	; (8000734 <HAL_RCC_OscConfig+0x270>)
 800060c:	4b4b      	ldr	r3, [pc, #300]	; (800073c <HAL_RCC_OscConfig+0x278>)
 800060e:	b1da      	cbz	r2, 8000648 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000610:	2201      	movs	r2, #1
 8000612:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000614:	f7ff fde4 	bl	80001e0 <HAL_GetTick>
 8000618:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800061a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800061c:	079b      	lsls	r3, r3, #30
 800061e:	d50d      	bpl.n	800063c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000620:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000624:	4b46      	ldr	r3, [pc, #280]	; (8000740 <HAL_RCC_OscConfig+0x27c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	fbb3 f3f2 	udiv	r3, r3, r2
 800062c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800062e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000630:	9b01      	ldr	r3, [sp, #4]
 8000632:	1e5a      	subs	r2, r3, #1
 8000634:	9201      	str	r2, [sp, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1f9      	bne.n	800062e <HAL_RCC_OscConfig+0x16a>
 800063a:	e750      	b.n	80004de <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800063c:	f7ff fdd0 	bl	80001e0 <HAL_GetTick>
 8000640:	1b80      	subs	r0, r0, r6
 8000642:	2802      	cmp	r0, #2
 8000644:	d9e9      	bls.n	800061a <HAL_RCC_OscConfig+0x156>
 8000646:	e77f      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000648:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800064a:	f7ff fdc9 	bl	80001e0 <HAL_GetTick>
 800064e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000652:	079f      	lsls	r7, r3, #30
 8000654:	f57f af43 	bpl.w	80004de <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000658:	f7ff fdc2 	bl	80001e0 <HAL_GetTick>
 800065c:	1b80      	subs	r0, r0, r6
 800065e:	2802      	cmp	r0, #2
 8000660:	d9f6      	bls.n	8000650 <HAL_RCC_OscConfig+0x18c>
 8000662:	e771      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000664:	4c33      	ldr	r4, [pc, #204]	; (8000734 <HAL_RCC_OscConfig+0x270>)
 8000666:	69e3      	ldr	r3, [r4, #28]
 8000668:	00d8      	lsls	r0, r3, #3
 800066a:	d424      	bmi.n	80006b6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800066c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	69e3      	ldr	r3, [r4, #28]
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	61e3      	str	r3, [r4, #28]
 8000676:	69e3      	ldr	r3, [r4, #28]
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000680:	4e30      	ldr	r6, [pc, #192]	; (8000744 <HAL_RCC_OscConfig+0x280>)
 8000682:	6833      	ldr	r3, [r6, #0]
 8000684:	05d9      	lsls	r1, r3, #23
 8000686:	d518      	bpl.n	80006ba <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000688:	68eb      	ldr	r3, [r5, #12]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d126      	bne.n	80006dc <HAL_RCC_OscConfig+0x218>
 800068e:	6a23      	ldr	r3, [r4, #32]
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000696:	f7ff fda3 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800069a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800069e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80006a0:	6a23      	ldr	r3, [r4, #32]
 80006a2:	079b      	lsls	r3, r3, #30
 80006a4:	d53f      	bpl.n	8000726 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80006a6:	2f00      	cmp	r7, #0
 80006a8:	f43f af1d 	beq.w	80004e6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80006ac:	69e3      	ldr	r3, [r4, #28]
 80006ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80006b2:	61e3      	str	r3, [r4, #28]
 80006b4:	e717      	b.n	80004e6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80006b6:	2700      	movs	r7, #0
 80006b8:	e7e2      	b.n	8000680 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006ba:	6833      	ldr	r3, [r6, #0]
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006c2:	f7ff fd8d 	bl	80001e0 <HAL_GetTick>
 80006c6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006c8:	6833      	ldr	r3, [r6, #0]
 80006ca:	05da      	lsls	r2, r3, #23
 80006cc:	d4dc      	bmi.n	8000688 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006ce:	f7ff fd87 	bl	80001e0 <HAL_GetTick>
 80006d2:	eba0 0008 	sub.w	r0, r0, r8
 80006d6:	2864      	cmp	r0, #100	; 0x64
 80006d8:	d9f6      	bls.n	80006c8 <HAL_RCC_OscConfig+0x204>
 80006da:	e735      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006dc:	b9ab      	cbnz	r3, 800070a <HAL_RCC_OscConfig+0x246>
 80006de:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006e0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e4:	f023 0301 	bic.w	r3, r3, #1
 80006e8:	6223      	str	r3, [r4, #32]
 80006ea:	6a23      	ldr	r3, [r4, #32]
 80006ec:	f023 0304 	bic.w	r3, r3, #4
 80006f0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006f2:	f7ff fd75 	bl	80001e0 <HAL_GetTick>
 80006f6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006f8:	6a23      	ldr	r3, [r4, #32]
 80006fa:	0798      	lsls	r0, r3, #30
 80006fc:	d5d3      	bpl.n	80006a6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006fe:	f7ff fd6f 	bl	80001e0 <HAL_GetTick>
 8000702:	1b80      	subs	r0, r0, r6
 8000704:	4540      	cmp	r0, r8
 8000706:	d9f7      	bls.n	80006f8 <HAL_RCC_OscConfig+0x234>
 8000708:	e71e      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800070a:	2b05      	cmp	r3, #5
 800070c:	6a23      	ldr	r3, [r4, #32]
 800070e:	d103      	bne.n	8000718 <HAL_RCC_OscConfig+0x254>
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6223      	str	r3, [r4, #32]
 8000716:	e7ba      	b.n	800068e <HAL_RCC_OscConfig+0x1ca>
 8000718:	f023 0301 	bic.w	r3, r3, #1
 800071c:	6223      	str	r3, [r4, #32]
 800071e:	6a23      	ldr	r3, [r4, #32]
 8000720:	f023 0304 	bic.w	r3, r3, #4
 8000724:	e7b6      	b.n	8000694 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000726:	f7ff fd5b 	bl	80001e0 <HAL_GetTick>
 800072a:	eba0 0008 	sub.w	r0, r0, r8
 800072e:	42b0      	cmp	r0, r6
 8000730:	d9b6      	bls.n	80006a0 <HAL_RCC_OscConfig+0x1dc>
 8000732:	e709      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
 8000734:	40021000 	.word	0x40021000
 8000738:	42420000 	.word	0x42420000
 800073c:	42420480 	.word	0x42420480
 8000740:	20000008 	.word	0x20000008
 8000744:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000748:	4c22      	ldr	r4, [pc, #136]	; (80007d4 <HAL_RCC_OscConfig+0x310>)
 800074a:	6863      	ldr	r3, [r4, #4]
 800074c:	f003 030c 	and.w	r3, r3, #12
 8000750:	2b08      	cmp	r3, #8
 8000752:	f43f aee2 	beq.w	800051a <HAL_RCC_OscConfig+0x56>
 8000756:	2300      	movs	r3, #0
 8000758:	4e1f      	ldr	r6, [pc, #124]	; (80007d8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800075a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800075c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800075e:	d12b      	bne.n	80007b8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000760:	f7ff fd3e 	bl	80001e0 <HAL_GetTick>
 8000764:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000766:	6823      	ldr	r3, [r4, #0]
 8000768:	0199      	lsls	r1, r3, #6
 800076a:	d41f      	bmi.n	80007ac <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800076c:	6a2b      	ldr	r3, [r5, #32]
 800076e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000772:	d105      	bne.n	8000780 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000774:	6862      	ldr	r2, [r4, #4]
 8000776:	68a9      	ldr	r1, [r5, #8]
 8000778:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800077c:	430a      	orrs	r2, r1
 800077e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000780:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000782:	6862      	ldr	r2, [r4, #4]
 8000784:	430b      	orrs	r3, r1
 8000786:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800078a:	4313      	orrs	r3, r2
 800078c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800078e:	2301      	movs	r3, #1
 8000790:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000792:	f7ff fd25 	bl	80001e0 <HAL_GetTick>
 8000796:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000798:	6823      	ldr	r3, [r4, #0]
 800079a:	019a      	lsls	r2, r3, #6
 800079c:	f53f aea7 	bmi.w	80004ee <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007a0:	f7ff fd1e 	bl	80001e0 <HAL_GetTick>
 80007a4:	1b40      	subs	r0, r0, r5
 80007a6:	2802      	cmp	r0, #2
 80007a8:	d9f6      	bls.n	8000798 <HAL_RCC_OscConfig+0x2d4>
 80007aa:	e6cd      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007ac:	f7ff fd18 	bl	80001e0 <HAL_GetTick>
 80007b0:	1bc0      	subs	r0, r0, r7
 80007b2:	2802      	cmp	r0, #2
 80007b4:	d9d7      	bls.n	8000766 <HAL_RCC_OscConfig+0x2a2>
 80007b6:	e6c7      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80007b8:	f7ff fd12 	bl	80001e0 <HAL_GetTick>
 80007bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	019b      	lsls	r3, r3, #6
 80007c2:	f57f ae94 	bpl.w	80004ee <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007c6:	f7ff fd0b 	bl	80001e0 <HAL_GetTick>
 80007ca:	1b40      	subs	r0, r0, r5
 80007cc:	2802      	cmp	r0, #2
 80007ce:	d9f6      	bls.n	80007be <HAL_RCC_OscConfig+0x2fa>
 80007d0:	e6ba      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000
 80007d8:	42420060 	.word	0x42420060

080007dc <HAL_RCC_GetSysClockFreq>:
{
 80007dc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007e0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007e2:	ac02      	add	r4, sp, #8
 80007e4:	f103 0510 	add.w	r5, r3, #16
 80007e8:	4622      	mov	r2, r4
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	6859      	ldr	r1, [r3, #4]
 80007ee:	3308      	adds	r3, #8
 80007f0:	c203      	stmia	r2!, {r0, r1}
 80007f2:	42ab      	cmp	r3, r5
 80007f4:	4614      	mov	r4, r2
 80007f6:	d1f7      	bne.n	80007e8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007f8:	2301      	movs	r3, #1
 80007fa:	f88d 3004 	strb.w	r3, [sp, #4]
 80007fe:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000800:	4911      	ldr	r1, [pc, #68]	; (8000848 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000802:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000806:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000808:	f003 020c 	and.w	r2, r3, #12
 800080c:	2a08      	cmp	r2, #8
 800080e:	d117      	bne.n	8000840 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000810:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000814:	a806      	add	r0, sp, #24
 8000816:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000818:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800081a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800081e:	d50c      	bpl.n	800083a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000820:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000822:	480a      	ldr	r0, [pc, #40]	; (800084c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000824:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000828:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800082a:	aa06      	add	r2, sp, #24
 800082c:	4413      	add	r3, r2
 800082e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000832:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000836:	b007      	add	sp, #28
 8000838:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <HAL_RCC_GetSysClockFreq+0x74>)
 800083c:	4350      	muls	r0, r2
 800083e:	e7fa      	b.n	8000836 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000842:	e7f8      	b.n	8000836 <HAL_RCC_GetSysClockFreq+0x5a>
 8000844:	08001a04 	.word	0x08001a04
 8000848:	40021000 	.word	0x40021000
 800084c:	007a1200 	.word	0x007a1200
 8000850:	003d0900 	.word	0x003d0900

08000854 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000854:	4a4d      	ldr	r2, [pc, #308]	; (800098c <HAL_RCC_ClockConfig+0x138>)
{
 8000856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800085a:	6813      	ldr	r3, [r2, #0]
{
 800085c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	428b      	cmp	r3, r1
{
 8000864:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000866:	d328      	bcc.n	80008ba <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000868:	682a      	ldr	r2, [r5, #0]
 800086a:	0791      	lsls	r1, r2, #30
 800086c:	d432      	bmi.n	80008d4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800086e:	07d2      	lsls	r2, r2, #31
 8000870:	d438      	bmi.n	80008e4 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000872:	4a46      	ldr	r2, [pc, #280]	; (800098c <HAL_RCC_ClockConfig+0x138>)
 8000874:	6813      	ldr	r3, [r2, #0]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	429e      	cmp	r6, r3
 800087c:	d373      	bcc.n	8000966 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800087e:	682a      	ldr	r2, [r5, #0]
 8000880:	4c43      	ldr	r4, [pc, #268]	; (8000990 <HAL_RCC_ClockConfig+0x13c>)
 8000882:	f012 0f04 	tst.w	r2, #4
 8000886:	d179      	bne.n	800097c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000888:	0713      	lsls	r3, r2, #28
 800088a:	d506      	bpl.n	800089a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800088c:	6863      	ldr	r3, [r4, #4]
 800088e:	692a      	ldr	r2, [r5, #16]
 8000890:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000894:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000898:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800089a:	f7ff ff9f 	bl	80007dc <HAL_RCC_GetSysClockFreq>
 800089e:	6863      	ldr	r3, [r4, #4]
 80008a0:	4a3c      	ldr	r2, [pc, #240]	; (8000994 <HAL_RCC_ClockConfig+0x140>)
 80008a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008a6:	5cd3      	ldrb	r3, [r2, r3]
 80008a8:	40d8      	lsrs	r0, r3
 80008aa:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <HAL_RCC_ClockConfig+0x144>)
 80008ac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff fc54 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 80008b4:	2000      	movs	r0, #0
}
 80008b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008ba:	6813      	ldr	r3, [r2, #0]
 80008bc:	f023 0307 	bic.w	r3, r3, #7
 80008c0:	430b      	orrs	r3, r1
 80008c2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008c4:	6813      	ldr	r3, [r2, #0]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	4299      	cmp	r1, r3
 80008cc:	d0cc      	beq.n	8000868 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008ce:	2001      	movs	r0, #1
 80008d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008d4:	492e      	ldr	r1, [pc, #184]	; (8000990 <HAL_RCC_ClockConfig+0x13c>)
 80008d6:	68a8      	ldr	r0, [r5, #8]
 80008d8:	684b      	ldr	r3, [r1, #4]
 80008da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008de:	4303      	orrs	r3, r0
 80008e0:	604b      	str	r3, [r1, #4]
 80008e2:	e7c4      	b.n	800086e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e4:	686a      	ldr	r2, [r5, #4]
 80008e6:	4c2a      	ldr	r4, [pc, #168]	; (8000990 <HAL_RCC_ClockConfig+0x13c>)
 80008e8:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ea:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ec:	d11c      	bne.n	8000928 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f2:	d0ec      	beq.n	80008ce <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008f4:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008f6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008fa:	f023 0303 	bic.w	r3, r3, #3
 80008fe:	4313      	orrs	r3, r2
 8000900:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000902:	f7ff fc6d 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000906:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000908:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800090a:	2b01      	cmp	r3, #1
 800090c:	d114      	bne.n	8000938 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800090e:	6863      	ldr	r3, [r4, #4]
 8000910:	f003 030c 	and.w	r3, r3, #12
 8000914:	2b04      	cmp	r3, #4
 8000916:	d0ac      	beq.n	8000872 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000918:	f7ff fc62 	bl	80001e0 <HAL_GetTick>
 800091c:	1bc0      	subs	r0, r0, r7
 800091e:	4540      	cmp	r0, r8
 8000920:	d9f5      	bls.n	800090e <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000922:	2003      	movs	r0, #3
 8000924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000928:	2a02      	cmp	r2, #2
 800092a:	d102      	bne.n	8000932 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800092c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000930:	e7df      	b.n	80008f2 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000932:	f013 0f02 	tst.w	r3, #2
 8000936:	e7dc      	b.n	80008f2 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000938:	2b02      	cmp	r3, #2
 800093a:	d10f      	bne.n	800095c <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800093c:	6863      	ldr	r3, [r4, #4]
 800093e:	f003 030c 	and.w	r3, r3, #12
 8000942:	2b08      	cmp	r3, #8
 8000944:	d095      	beq.n	8000872 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000946:	f7ff fc4b 	bl	80001e0 <HAL_GetTick>
 800094a:	1bc0      	subs	r0, r0, r7
 800094c:	4540      	cmp	r0, r8
 800094e:	d9f5      	bls.n	800093c <HAL_RCC_ClockConfig+0xe8>
 8000950:	e7e7      	b.n	8000922 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000952:	f7ff fc45 	bl	80001e0 <HAL_GetTick>
 8000956:	1bc0      	subs	r0, r0, r7
 8000958:	4540      	cmp	r0, r8
 800095a:	d8e2      	bhi.n	8000922 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800095c:	6863      	ldr	r3, [r4, #4]
 800095e:	f013 0f0c 	tst.w	r3, #12
 8000962:	d1f6      	bne.n	8000952 <HAL_RCC_ClockConfig+0xfe>
 8000964:	e785      	b.n	8000872 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000966:	6813      	ldr	r3, [r2, #0]
 8000968:	f023 0307 	bic.w	r3, r3, #7
 800096c:	4333      	orrs	r3, r6
 800096e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000970:	6813      	ldr	r3, [r2, #0]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	429e      	cmp	r6, r3
 8000978:	d1a9      	bne.n	80008ce <HAL_RCC_ClockConfig+0x7a>
 800097a:	e780      	b.n	800087e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800097c:	6863      	ldr	r3, [r4, #4]
 800097e:	68e9      	ldr	r1, [r5, #12]
 8000980:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000984:	430b      	orrs	r3, r1
 8000986:	6063      	str	r3, [r4, #4]
 8000988:	e77e      	b.n	8000888 <HAL_RCC_ClockConfig+0x34>
 800098a:	bf00      	nop
 800098c:	40022000 	.word	0x40022000
 8000990:	40021000 	.word	0x40021000
 8000994:	08001a24 	.word	0x08001a24
 8000998:	20000008 	.word	0x20000008

0800099c <HAL_RCC_GetHCLKFreq>:
}
 800099c:	4b01      	ldr	r3, [pc, #4]	; (80009a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000008 	.word	0x20000008

080009a8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <HAL_RCC_GetPCLK1Freq+0x14>)
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80009b2:	5cd3      	ldrb	r3, [r2, r3]
 80009b4:	4a03      	ldr	r2, [pc, #12]	; (80009c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80009b6:	6810      	ldr	r0, [r2, #0]
}    
 80009b8:	40d8      	lsrs	r0, r3
 80009ba:	4770      	bx	lr
 80009bc:	40021000 	.word	0x40021000
 80009c0:	08001a34 	.word	0x08001a34
 80009c4:	20000008 	.word	0x20000008

080009c8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <HAL_RCC_GetPCLK2Freq+0x14>)
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009d2:	5cd3      	ldrb	r3, [r2, r3]
 80009d4:	4a03      	ldr	r2, [pc, #12]	; (80009e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009d6:	6810      	ldr	r0, [r2, #0]
} 
 80009d8:	40d8      	lsrs	r0, r3
 80009da:	4770      	bx	lr
 80009dc:	40021000 	.word	0x40021000
 80009e0:	08001a34 	.word	0x08001a34
 80009e4:	20000008 	.word	0x20000008

080009e8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80009e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80009ec:	6805      	ldr	r5, [r0, #0]
 80009ee:	68c2      	ldr	r2, [r0, #12]
 80009f0:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80009f2:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80009f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009f8:	4313      	orrs	r3, r2
 80009fa:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80009fc:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80009fe:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a00:	430b      	orrs	r3, r1
 8000a02:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000a04:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000a08:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a0c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000a12:	696b      	ldr	r3, [r5, #20]
 8000a14:	6982      	ldr	r2, [r0, #24]
 8000a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000a1e:	4b40      	ldr	r3, [pc, #256]	; (8000b20 <UART_SetConfig+0x138>)
{
 8000a20:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000a22:	429d      	cmp	r5, r3
 8000a24:	f04f 0419 	mov.w	r4, #25
 8000a28:	d146      	bne.n	8000ab8 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000a2a:	f7ff ffcd 	bl	80009c8 <HAL_RCC_GetPCLK2Freq>
 8000a2e:	fb04 f300 	mul.w	r3, r4, r0
 8000a32:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000a36:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000a3a:	00b6      	lsls	r6, r6, #2
 8000a3c:	fbb3 f3f6 	udiv	r3, r3, r6
 8000a40:	fbb3 f3f8 	udiv	r3, r3, r8
 8000a44:	011e      	lsls	r6, r3, #4
 8000a46:	f7ff ffbf 	bl	80009c8 <HAL_RCC_GetPCLK2Freq>
 8000a4a:	4360      	muls	r0, r4
 8000a4c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	fbb0 f7f3 	udiv	r7, r0, r3
 8000a56:	f7ff ffb7 	bl	80009c8 <HAL_RCC_GetPCLK2Freq>
 8000a5a:	4360      	muls	r0, r4
 8000a5c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8000a66:	fbb3 f3f8 	udiv	r3, r3, r8
 8000a6a:	fb08 7313 	mls	r3, r8, r3, r7
 8000a6e:	011b      	lsls	r3, r3, #4
 8000a70:	3332      	adds	r3, #50	; 0x32
 8000a72:	fbb3 f3f8 	udiv	r3, r3, r8
 8000a76:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000a7a:	f7ff ffa5 	bl	80009c8 <HAL_RCC_GetPCLK2Freq>
 8000a7e:	4360      	muls	r0, r4
 8000a80:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000a84:	0092      	lsls	r2, r2, #2
 8000a86:	fbb0 faf2 	udiv	sl, r0, r2
 8000a8a:	f7ff ff9d 	bl	80009c8 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000a8e:	4360      	muls	r0, r4
 8000a90:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8000a9a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000a9e:	fb08 a313 	mls	r3, r8, r3, sl
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	3332      	adds	r3, #50	; 0x32
 8000aa6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	433b      	orrs	r3, r7
 8000ab0:	4433      	add	r3, r6
 8000ab2:	60ab      	str	r3, [r5, #8]
 8000ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab8:	f7ff ff76 	bl	80009a8 <HAL_RCC_GetPCLK1Freq>
 8000abc:	fb04 f300 	mul.w	r3, r4, r0
 8000ac0:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000ac4:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000ac8:	00b6      	lsls	r6, r6, #2
 8000aca:	fbb3 f3f6 	udiv	r3, r3, r6
 8000ace:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ad2:	011e      	lsls	r6, r3, #4
 8000ad4:	f7ff ff68 	bl	80009a8 <HAL_RCC_GetPCLK1Freq>
 8000ad8:	4360      	muls	r0, r4
 8000ada:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	fbb0 f7f3 	udiv	r7, r0, r3
 8000ae4:	f7ff ff60 	bl	80009a8 <HAL_RCC_GetPCLK1Freq>
 8000ae8:	4360      	muls	r0, r4
 8000aea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000af4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000af8:	fb08 7313 	mls	r3, r8, r3, r7
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	3332      	adds	r3, #50	; 0x32
 8000b00:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b04:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000b08:	f7ff ff4e 	bl	80009a8 <HAL_RCC_GetPCLK1Freq>
 8000b0c:	4360      	muls	r0, r4
 8000b0e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000b12:	0092      	lsls	r2, r2, #2
 8000b14:	fbb0 faf2 	udiv	sl, r0, r2
 8000b18:	f7ff ff46 	bl	80009a8 <HAL_RCC_GetPCLK1Freq>
 8000b1c:	e7b7      	b.n	8000a8e <UART_SetConfig+0xa6>
 8000b1e:	bf00      	nop
 8000b20:	40013800 	.word	0x40013800

08000b24 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b26:	4604      	mov	r4, r0
 8000b28:	460e      	mov	r6, r1
 8000b2a:	4617      	mov	r7, r2
 8000b2c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000b2e:	6821      	ldr	r1, [r4, #0]
 8000b30:	680b      	ldr	r3, [r1, #0]
 8000b32:	ea36 0303 	bics.w	r3, r6, r3
 8000b36:	d101      	bne.n	8000b3c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000b38:	2000      	movs	r0, #0
}
 8000b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000b3c:	1c6b      	adds	r3, r5, #1
 8000b3e:	d0f7      	beq.n	8000b30 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000b40:	b995      	cbnz	r5, 8000b68 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000b42:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000b44:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000b4c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000b4e:	695a      	ldr	r2, [r3, #20]
 8000b50:	f022 0201 	bic.w	r2, r2, #1
 8000b54:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000b56:	2320      	movs	r3, #32
 8000b58:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000b5c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000b60:	2300      	movs	r3, #0
 8000b62:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000b68:	f7ff fb3a 	bl	80001e0 <HAL_GetTick>
 8000b6c:	1bc0      	subs	r0, r0, r7
 8000b6e:	4285      	cmp	r5, r0
 8000b70:	d2dd      	bcs.n	8000b2e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000b72:	e7e6      	b.n	8000b42 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000b74 <HAL_UART_Init>:
{
 8000b74:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000b76:	4604      	mov	r4, r0
 8000b78:	b340      	cbz	r0, 8000bcc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000b7a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000b7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b82:	b91b      	cbnz	r3, 8000b8c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000b84:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000b88:	f000 fa8c 	bl	80010a4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000b8c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000b8e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000b90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000b94:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000b96:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000b98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b9c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000b9e:	f7ff ff23 	bl	80009e8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ba2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ba4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ba6:	691a      	ldr	r2, [r3, #16]
 8000ba8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000bac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000bae:	695a      	ldr	r2, [r3, #20]
 8000bb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000bb4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000bbc:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000bbe:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000bc0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000bc2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000bc6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000bca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000bcc:	2001      	movs	r0, #1
}
 8000bce:	bd10      	pop	{r4, pc}

08000bd0 <HAL_UART_Transmit>:
{
 8000bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bd4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000bd6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000bda:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000bdc:	2b20      	cmp	r3, #32
{
 8000bde:	460d      	mov	r5, r1
 8000be0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000be2:	d14e      	bne.n	8000c82 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000be4:	2900      	cmp	r1, #0
 8000be6:	d049      	beq.n	8000c7c <HAL_UART_Transmit+0xac>
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	d047      	beq.n	8000c7c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000bec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d046      	beq.n	8000c82 <HAL_UART_Transmit+0xb2>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000bfe:	2321      	movs	r3, #33	; 0x21
 8000c00:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000c04:	f7ff faec 	bl	80001e0 <HAL_GetTick>
 8000c08:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000c0a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000c0e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000c12:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	b96b      	cbnz	r3, 8000c34 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4632      	mov	r2, r6
 8000c1c:	2140      	movs	r1, #64	; 0x40
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f7ff ff80 	bl	8000b24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000c24:	b9a8      	cbnz	r0, 8000c52 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000c26:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000c28:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000c2c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000c34:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000c36:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000c3e:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000c40:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000c46:	4620      	mov	r0, r4
 8000c48:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000c4a:	d10e      	bne.n	8000c6a <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000c4c:	f7ff ff6a 	bl	8000b24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000c50:	b110      	cbz	r0, 8000c58 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000c52:	2003      	movs	r0, #3
 8000c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000c58:	882b      	ldrh	r3, [r5, #0]
 8000c5a:	6822      	ldr	r2, [r4, #0]
 8000c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c60:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000c62:	6923      	ldr	r3, [r4, #16]
 8000c64:	b943      	cbnz	r3, 8000c78 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8000c66:	3502      	adds	r5, #2
 8000c68:	e7d3      	b.n	8000c12 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000c6a:	f7ff ff5b 	bl	8000b24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	d1ef      	bne.n	8000c52 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	782a      	ldrb	r2, [r5, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	3501      	adds	r5, #1
 8000c7a:	e7ca      	b.n	8000c12 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000c82:	2002      	movs	r0, #2
}
 8000c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000c88 <HAL_UART_Receive>:
{
 8000c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c8c:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8000c8e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8000c92:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 8000c94:	2b20      	cmp	r3, #32
{
 8000c96:	460d      	mov	r5, r1
 8000c98:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8000c9a:	d151      	bne.n	8000d40 <HAL_UART_Receive+0xb8>
    if((pData == NULL) || (Size == 0U))
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d04c      	beq.n	8000d3a <HAL_UART_Receive+0xb2>
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	d04a      	beq.n	8000d3a <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 8000ca4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d049      	beq.n	8000d40 <HAL_UART_Receive+0xb8>
 8000cac:	2301      	movs	r3, #1
 8000cae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000cb6:	2322      	movs	r3, #34	; 0x22
 8000cb8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8000cbc:	f7ff fa90 	bl	80001e0 <HAL_GetTick>
 8000cc0:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 8000cc2:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8000cc6:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 8000cca:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b930      	cbnz	r0, 8000cde <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8000cd0:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000cd2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 8000cd6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8000cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8000cde:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000ce0:	4632      	mov	r2, r6
      huart->RxXferCount--;
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ce8:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000cea:	2120      	movs	r1, #32
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cf4:	d112      	bne.n	8000d1c <HAL_UART_Receive+0x94>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000cf6:	f7ff ff15 	bl	8000b24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000cfa:	b110      	cbz	r0, 8000d02 <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d02:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000d04:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000d06:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000d08:	b922      	cbnz	r2, 8000d14 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d0e:	f825 3b02 	strh.w	r3, [r5], #2
 8000d12:	e7da      	b.n	8000cca <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	f825 3b01 	strh.w	r3, [r5], #1
 8000d1a:	e7d6      	b.n	8000cca <HAL_UART_Receive+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000d1c:	f7ff ff02 	bl	8000b24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d20:	2800      	cmp	r0, #0
 8000d22:	d1eb      	bne.n	8000cfc <HAL_UART_Receive+0x74>
 8000d24:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000d26:	6921      	ldr	r1, [r4, #16]
 8000d28:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000d2a:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000d2c:	b911      	cbnz	r1, 8000d34 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000d2e:	702b      	strb	r3, [r5, #0]
 8000d30:	4615      	mov	r5, r2
 8000d32:	e7ca      	b.n	8000cca <HAL_UART_Receive+0x42>
 8000d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d38:	e7f9      	b.n	8000d2e <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000d40:	2002      	movs	r0, #2
}
 8000d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000d48 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d48:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <MX_GPIO_Init+0x98>)
{
 8000d4a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4c:	699a      	ldr	r2, [r3, #24]
{
 8000d4e:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d50:	f042 0210 	orr.w	r2, r2, #16
 8000d54:	619a      	str	r2, [r3, #24]
 8000d56:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d58:	4d22      	ldr	r5, [pc, #136]	; (8000de4 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	f002 0210 	and.w	r2, r2, #16
 8000d5e:	9200      	str	r2, [sp, #0]
 8000d60:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d64:	4628      	mov	r0, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	f042 0220 	orr.w	r2, r2, #32
 8000d6a:	619a      	str	r2, [r3, #24]
 8000d6c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d6e:	2120      	movs	r1, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d70:	f002 0220 	and.w	r2, r2, #32
 8000d74:	9201      	str	r2, [sp, #4]
 8000d76:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	f042 0204 	orr.w	r2, r2, #4
 8000d80:	619a      	str	r2, [r3, #24]
 8000d82:	699a      	ldr	r2, [r3, #24]
 8000d84:	f002 0204 	and.w	r2, r2, #4
 8000d88:	9202      	str	r2, [sp, #8]
 8000d8a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	699a      	ldr	r2, [r3, #24]
 8000d8e:	f042 0208 	orr.w	r2, r2, #8
 8000d92:	619a      	str	r2, [r3, #24]
 8000d94:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	9303      	str	r3, [sp, #12]
 8000d9e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000da0:	f7ff fb7e 	bl	80004a0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8000da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_GPIO_Init+0xa0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dac:	a904      	add	r1, sp, #16
 8000dae:	480f      	ldr	r0, [pc, #60]	; (8000dec <MX_GPIO_Init+0xa4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f7ff fa94 	bl	80002e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000db8:	2320      	movs	r3, #32
 8000dba:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2302      	movs	r3, #2
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	a904      	add	r1, sp, #16
 8000dc4:	4628      	mov	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f7ff fa8a 	bl	80002e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dcc:	4622      	mov	r2, r4
 8000dce:	4621      	mov	r1, r4
 8000dd0:	2028      	movs	r0, #40	; 0x28
 8000dd2:	f7ff fa1d 	bl	8000210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dd6:	2028      	movs	r0, #40	; 0x28
 8000dd8:	f7ff fa4e 	bl	8000278 <HAL_NVIC_EnableIRQ>

}
 8000ddc:	b009      	add	sp, #36	; 0x24
 8000dde:	bd30      	pop	{r4, r5, pc}
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010800 	.word	0x40010800
 8000de8:	10110000 	.word	0x10110000
 8000dec:	40011000 	.word	0x40011000

08000df0 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df0:	2301      	movs	r3, #1
{
 8000df2:	b510      	push	{r4, lr}
 8000df4:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df6:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000df8:	2310      	movs	r3, #16
 8000dfa:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000dfc:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dfe:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e00:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e02:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e06:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e08:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0a:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e0c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0e:	f7ff fb59 	bl	80004c4 <HAL_RCC_OscConfig>
 8000e12:	b100      	cbz	r0, 8000e16 <SystemClock_Config+0x26>
 8000e14:	e7fe      	b.n	8000e14 <SystemClock_Config+0x24>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e16:	230f      	movs	r3, #15
 8000e18:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e20:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e22:	4621      	mov	r1, r4
 8000e24:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e26:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e28:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e2a:	f7ff fd13 	bl	8000854 <HAL_RCC_ClockConfig>
 8000e2e:	4604      	mov	r4, r0
 8000e30:	b100      	cbz	r0, 8000e34 <SystemClock_Config+0x44>
 8000e32:	e7fe      	b.n	8000e32 <SystemClock_Config+0x42>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000e34:	f7ff fdb2 	bl	800099c <HAL_RCC_GetHCLKFreq>
 8000e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e40:	f7ff fa26 	bl	8000290 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e44:	2004      	movs	r0, #4
 8000e46:	f7ff fa39 	bl	80002bc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e4a:	4622      	mov	r2, r4
 8000e4c:	4621      	mov	r1, r4
 8000e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e52:	f7ff f9dd 	bl	8000210 <HAL_NVIC_SetPriority>
}
 8000e56:	b010      	add	sp, #64	; 0x40
 8000e58:	bd10      	pop	{r4, pc}
	...

08000e5c <main>:
{
 8000e5c:	b500      	push	{lr}
 8000e5e:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 8000e60:	f7ff f9a0 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8000e64:	f7ff ffc4 	bl	8000df0 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b3a      	ldr	r3, [pc, #232]	; (8000f54 <main+0xf8>)
	  huart1.Instance = USART1;
 8000e6a:	4c3b      	ldr	r4, [pc, #236]	; (8000f58 <main+0xfc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	699a      	ldr	r2, [r3, #24]
 8000e6e:	f042 0204 	orr.w	r2, r2, #4
 8000e72:	619a      	str	r2, [r3, #24]
 8000e74:	699a      	ldr	r2, [r3, #24]
 8000e76:	f002 0204 	and.w	r2, r2, #4
 8000e7a:	9202      	str	r2, [sp, #8]
 8000e7c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_ADC1_CLK_ENABLE();
 8000e7e:	699a      	ldr	r2, [r3, #24]
 8000e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e84:	619a      	str	r2, [r3, #24]
 8000e86:	699a      	ldr	r2, [r3, #24]
 8000e88:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000e8c:	9203      	str	r2, [sp, #12]
 8000e8e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_USART1_CLK_ENABLE();
 8000e90:	699a      	ldr	r2, [r3, #24]
 8000e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e96:	619a      	str	r2, [r3, #24]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	9304      	str	r3, [sp, #16]
 8000ea0:	9b04      	ldr	r3, [sp, #16]
  MX_GPIO_Init();
 8000ea2:	f7ff ff51 	bl	8000d48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ea6:	f000 f8dd 	bl	8001064 <MX_USART2_UART_Init>
	  huart1.Init.BaudRate = 9600;
 8000eaa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eae:	220c      	movs	r2, #12
	  huart1.Init.BaudRate = 9600;
 8000eb0:	930f      	str	r3, [sp, #60]	; 0x3c
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	2300      	movs	r3, #0
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eb4:	a80e      	add	r0, sp, #56	; 0x38
	  huart1.Instance = USART1;
 8000eb6:	940e      	str	r4, [sp, #56]	; 0x38
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb8:	9310      	str	r3, [sp, #64]	; 0x40
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eba:	9311      	str	r3, [sp, #68]	; 0x44
	  huart1.Init.Parity = UART_PARITY_NONE;
 8000ebc:	9312      	str	r3, [sp, #72]	; 0x48
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ebe:	9213      	str	r2, [sp, #76]	; 0x4c
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec0:	9314      	str	r3, [sp, #80]	; 0x50
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec2:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ec4:	f7ff fe56 	bl	8000b74 <HAL_UART_Init>
 8000ec8:	4605      	mov	r5, r0
 8000eca:	b100      	cbz	r0, 8000ece <main+0x72>
 8000ecc:	e7fe      	b.n	8000ecc <main+0x70>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	a905      	add	r1, sp, #20
 8000ed8:	4820      	ldr	r0, [pc, #128]	; (8000f5c <main+0x100>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f7ff f9ff 	bl	80002e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	a905      	add	r1, sp, #20
 8000ee8:	481c      	ldr	r0, [pc, #112]	; (8000f5c <main+0x100>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_INPUT;
 8000eec:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f7ff f9f7 	bl	80002e0 <HAL_GPIO_Init>
  USART1->CR1 |= USART_CR1_UE;
 8000ef2:	68e3      	ldr	r3, [r4, #12]
  DMA1_Channel4->CPAR = &(USART1->DR);
 8000ef4:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <main+0x104>)
  USART1->CR1 |= USART_CR1_UE;
 8000ef6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000efa:	60e3      	str	r3, [r4, #12]
  DMA1_Channel4->CPAR = &(USART1->DR);
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <main+0x108>)
	  sprintf(msg, "Receive = %d \r\n", rec);
 8000efe:	4d1a      	ldr	r5, [pc, #104]	; (8000f68 <main+0x10c>)
  DMA1_Channel4->CPAR = &(USART1->DR);
 8000f00:	6093      	str	r3, [r2, #8]
  DMA1_Channel5->CPAR = &(USART1->DR);
 8000f02:	61d3      	str	r3, [r2, #28]
 uint8_t rec = 42;
 8000f04:	232a      	movs	r3, #42	; 0x2a
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
 8000f06:	4c19      	ldr	r4, [pc, #100]	; (8000f6c <main+0x110>)
 uint8_t rec = 42;
 8000f08:	f88d 3006 	strb.w	r3, [sp, #6]
	  HAL_UART_Receive(&huart1, &rec, 1, 0xF);
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f10d 0106 	add.w	r1, sp, #6
 8000f14:	a80e      	add	r0, sp, #56	; 0x38
 8000f16:	f7ff feb7 	bl	8000c88 <HAL_UART_Receive>
	  sprintf(msg, "Receive = %d \r\n", rec);
 8000f1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000f1e:	4629      	mov	r1, r5
 8000f20:	a809      	add	r0, sp, #36	; 0x24
 8000f22:	f000 f929 	bl	8001178 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
 8000f26:	a809      	add	r0, sp, #36	; 0x24
 8000f28:	f7ff f910 	bl	800014c <strlen>
 8000f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f30:	b282      	uxth	r2, r0
 8000f32:	a909      	add	r1, sp, #36	; 0x24
 8000f34:	4620      	mov	r0, r4
 8000f36:	f7ff fe4b 	bl	8000bd0 <HAL_UART_Transmit>
	  a = HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg),0xFFFF);
 8000f3a:	a809      	add	r0, sp, #36	; 0x24
 8000f3c:	f7ff f906 	bl	800014c <strlen>
 8000f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f44:	b282      	uxth	r2, r0
 8000f46:	a909      	add	r1, sp, #36	; 0x24
 8000f48:	a80e      	add	r0, sp, #56	; 0x38
 8000f4a:	f7ff fe41 	bl	8000bd0 <HAL_UART_Transmit>
 8000f4e:	f88d 0007 	strb.w	r0, [sp, #7]
 8000f52:	e7db      	b.n	8000f0c <main+0xb0>
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40013800 	.word	0x40013800
 8000f5c:	40010800 	.word	0x40010800
 8000f60:	40020044 	.word	0x40020044
 8000f64:	40013804 	.word	0x40013804
 8000f68:	08001a14 	.word	0x08001a14
 8000f6c:	2000009c 	.word	0x2000009c

08000f70 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8000f70:	e7fe      	b.n	8000f70 <_Error_Handler>
	...

08000f74 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <HAL_MspInit+0x84>)
{
 8000f76:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f78:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7a:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7c:	f042 0201 	orr.w	r2, r2, #1
 8000f80:	619a      	str	r2, [r3, #24]
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8c:	f7ff f92e 	bl	80001ec <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f06f 000b 	mvn.w	r0, #11
 8000f96:	4611      	mov	r1, r2
 8000f98:	f7ff f93a 	bl	8000210 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f06f 000a 	mvn.w	r0, #10
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	f7ff f934 	bl	8000210 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f06f 0009 	mvn.w	r0, #9
 8000fae:	4611      	mov	r1, r2
 8000fb0:	f7ff f92e 	bl	8000210 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f06f 0004 	mvn.w	r0, #4
 8000fba:	4611      	mov	r1, r2
 8000fbc:	f7ff f928 	bl	8000210 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f06f 0003 	mvn.w	r0, #3
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	f7ff f922 	bl	8000210 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f06f 0001 	mvn.w	r0, #1
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	f7ff f91c 	bl	8000210 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f04f 30ff 	mov.w	r0, #4294967295
 8000fde:	4611      	mov	r1, r2
 8000fe0:	f7ff f916 	bl	8000210 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fe4:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <HAL_MspInit+0x88>)
 8000fe6:	6853      	ldr	r3, [r2, #4]
 8000fe8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ff0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	b003      	add	sp, #12
 8000ff4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010000 	.word	0x40010000

08001000 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001000:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001002:	f7ff f8e1 	bl	80001c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800100a:	f7ff b964 	b.w	80002d6 <HAL_SYSTICK_IRQHandler>

0800100e <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800100e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001012:	f7ff ba4b 	b.w	80004ac <HAL_GPIO_EXTI_IRQHandler>
	...

08001018 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <SystemInit+0x40>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	f042 0201 	orr.w	r2, r2, #1
 8001020:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001022:	6859      	ldr	r1, [r3, #4]
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <SystemInit+0x44>)
 8001026:	400a      	ands	r2, r1
 8001028:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001030:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001034:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800103c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001044:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001046:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800104a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800104c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <SystemInit+0x48>)
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000
 800105c:	f8ff0000 	.word	0xf8ff0000
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001064:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8001066:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart2.Instance = USART2;
 800106a:	480b      	ldr	r0, [pc, #44]	; (8001098 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_USART2_UART_Init+0x38>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800106e:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8001070:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001074:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001076:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001078:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800107a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107c:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001082:	f7ff fd77 	bl	8000b74 <HAL_UART_Init>
 8001086:	b128      	cbz	r0, 8001094 <MX_USART2_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8001088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800108c:	2142      	movs	r1, #66	; 0x42
 800108e:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_USART2_UART_Init+0x3c>)
 8001090:	f7ff bf6e 	b.w	8000f70 <_Error_Handler>
 8001094:	bd08      	pop	{r3, pc}
 8001096:	bf00      	nop
 8001098:	2000009c 	.word	0x2000009c
 800109c:	40004400 	.word	0x40004400
 80010a0:	08001a3c 	.word	0x08001a3c

080010a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 80010a6:	6802      	ldr	r2, [r0, #0]
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_UART_MspInit+0x38>)
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d113      	bne.n	80010d6 <HAL_UART_MspInit+0x32>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ae:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80010b2:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80010ba:	61da      	str	r2, [r3, #28]
 80010bc:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	4808      	ldr	r0, [pc, #32]	; (80010e0 <HAL_UART_MspInit+0x3c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010c8:	230c      	movs	r3, #12
 80010ca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f7ff f905 	bl	80002e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010d6:	b007      	add	sp, #28
 80010d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80010dc:	40004400 	.word	0x40004400
 80010e0:	40010800 	.word	0x40010800

080010e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010e6:	e003      	b.n	80010f0 <LoopCopyDataInit>

080010e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010ee:	3104      	adds	r1, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010f0:	480a      	ldr	r0, [pc, #40]	; (800111c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010f8:	d3f6      	bcc.n	80010e8 <CopyDataInit>
  ldr r2, =_sbss
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010fc:	e002      	b.n	8001104 <LoopFillZerobss>

080010fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001100:	f842 3b04 	str.w	r3, [r2], #4

08001104 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001106:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001108:	d3f9      	bcc.n	80010fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800110a:	f7ff ff85 	bl	8001018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110e:	f000 f80f 	bl	8001130 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001112:	f7ff fea3 	bl	8000e5c <main>
  bx lr
 8001116:	4770      	bx	lr
  ldr r3, =_sidata
 8001118:	08001a88 	.word	0x08001a88
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001120:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001124:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001128:	200000e0 	.word	0x200000e0

0800112c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC1_2_IRQHandler>
	...

08001130 <__libc_init_array>:
 8001130:	b570      	push	{r4, r5, r6, lr}
 8001132:	2500      	movs	r5, #0
 8001134:	4e0c      	ldr	r6, [pc, #48]	; (8001168 <__libc_init_array+0x38>)
 8001136:	4c0d      	ldr	r4, [pc, #52]	; (800116c <__libc_init_array+0x3c>)
 8001138:	1ba4      	subs	r4, r4, r6
 800113a:	10a4      	asrs	r4, r4, #2
 800113c:	42a5      	cmp	r5, r4
 800113e:	d109      	bne.n	8001154 <__libc_init_array+0x24>
 8001140:	f000 fc54 	bl	80019ec <_init>
 8001144:	2500      	movs	r5, #0
 8001146:	4e0a      	ldr	r6, [pc, #40]	; (8001170 <__libc_init_array+0x40>)
 8001148:	4c0a      	ldr	r4, [pc, #40]	; (8001174 <__libc_init_array+0x44>)
 800114a:	1ba4      	subs	r4, r4, r6
 800114c:	10a4      	asrs	r4, r4, #2
 800114e:	42a5      	cmp	r5, r4
 8001150:	d105      	bne.n	800115e <__libc_init_array+0x2e>
 8001152:	bd70      	pop	{r4, r5, r6, pc}
 8001154:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001158:	4798      	blx	r3
 800115a:	3501      	adds	r5, #1
 800115c:	e7ee      	b.n	800113c <__libc_init_array+0xc>
 800115e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001162:	4798      	blx	r3
 8001164:	3501      	adds	r5, #1
 8001166:	e7f2      	b.n	800114e <__libc_init_array+0x1e>
 8001168:	08001a80 	.word	0x08001a80
 800116c:	08001a80 	.word	0x08001a80
 8001170:	08001a80 	.word	0x08001a80
 8001174:	08001a84 	.word	0x08001a84

08001178 <siprintf>:
 8001178:	b40e      	push	{r1, r2, r3}
 800117a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800117e:	b500      	push	{lr}
 8001180:	b09c      	sub	sp, #112	; 0x70
 8001182:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001186:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800118a:	9104      	str	r1, [sp, #16]
 800118c:	9107      	str	r1, [sp, #28]
 800118e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001192:	ab1d      	add	r3, sp, #116	; 0x74
 8001194:	9002      	str	r0, [sp, #8]
 8001196:	9006      	str	r0, [sp, #24]
 8001198:	4808      	ldr	r0, [pc, #32]	; (80011bc <siprintf+0x44>)
 800119a:	f853 2b04 	ldr.w	r2, [r3], #4
 800119e:	f8ad 1016 	strh.w	r1, [sp, #22]
 80011a2:	6800      	ldr	r0, [r0, #0]
 80011a4:	a902      	add	r1, sp, #8
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	f000 f866 	bl	8001278 <_svfiprintf_r>
 80011ac:	2200      	movs	r2, #0
 80011ae:	9b02      	ldr	r3, [sp, #8]
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	b01c      	add	sp, #112	; 0x70
 80011b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80011b8:	b003      	add	sp, #12
 80011ba:	4770      	bx	lr
 80011bc:	2000000c 	.word	0x2000000c

080011c0 <__ssputs_r>:
 80011c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011c4:	688e      	ldr	r6, [r1, #8]
 80011c6:	4682      	mov	sl, r0
 80011c8:	429e      	cmp	r6, r3
 80011ca:	460c      	mov	r4, r1
 80011cc:	4691      	mov	r9, r2
 80011ce:	4698      	mov	r8, r3
 80011d0:	d835      	bhi.n	800123e <__ssputs_r+0x7e>
 80011d2:	898a      	ldrh	r2, [r1, #12]
 80011d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80011d8:	d031      	beq.n	800123e <__ssputs_r+0x7e>
 80011da:	2302      	movs	r3, #2
 80011dc:	6825      	ldr	r5, [r4, #0]
 80011de:	6909      	ldr	r1, [r1, #16]
 80011e0:	1a6f      	subs	r7, r5, r1
 80011e2:	6965      	ldr	r5, [r4, #20]
 80011e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80011e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80011ec:	f108 0301 	add.w	r3, r8, #1
 80011f0:	443b      	add	r3, r7
 80011f2:	429d      	cmp	r5, r3
 80011f4:	bf38      	it	cc
 80011f6:	461d      	movcc	r5, r3
 80011f8:	0553      	lsls	r3, r2, #21
 80011fa:	d531      	bpl.n	8001260 <__ssputs_r+0xa0>
 80011fc:	4629      	mov	r1, r5
 80011fe:	f000 fb47 	bl	8001890 <_malloc_r>
 8001202:	4606      	mov	r6, r0
 8001204:	b950      	cbnz	r0, 800121c <__ssputs_r+0x5c>
 8001206:	230c      	movs	r3, #12
 8001208:	f8ca 3000 	str.w	r3, [sl]
 800120c:	89a3      	ldrh	r3, [r4, #12]
 800120e:	f04f 30ff 	mov.w	r0, #4294967295
 8001212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001216:	81a3      	strh	r3, [r4, #12]
 8001218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800121c:	463a      	mov	r2, r7
 800121e:	6921      	ldr	r1, [r4, #16]
 8001220:	f000 fac4 	bl	80017ac <memcpy>
 8001224:	89a3      	ldrh	r3, [r4, #12]
 8001226:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800122a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122e:	81a3      	strh	r3, [r4, #12]
 8001230:	6126      	str	r6, [r4, #16]
 8001232:	443e      	add	r6, r7
 8001234:	6026      	str	r6, [r4, #0]
 8001236:	4646      	mov	r6, r8
 8001238:	6165      	str	r5, [r4, #20]
 800123a:	1bed      	subs	r5, r5, r7
 800123c:	60a5      	str	r5, [r4, #8]
 800123e:	4546      	cmp	r6, r8
 8001240:	bf28      	it	cs
 8001242:	4646      	movcs	r6, r8
 8001244:	4649      	mov	r1, r9
 8001246:	4632      	mov	r2, r6
 8001248:	6820      	ldr	r0, [r4, #0]
 800124a:	f000 faba 	bl	80017c2 <memmove>
 800124e:	68a3      	ldr	r3, [r4, #8]
 8001250:	2000      	movs	r0, #0
 8001252:	1b9b      	subs	r3, r3, r6
 8001254:	60a3      	str	r3, [r4, #8]
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	441e      	add	r6, r3
 800125a:	6026      	str	r6, [r4, #0]
 800125c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001260:	462a      	mov	r2, r5
 8001262:	f000 fb73 	bl	800194c <_realloc_r>
 8001266:	4606      	mov	r6, r0
 8001268:	2800      	cmp	r0, #0
 800126a:	d1e1      	bne.n	8001230 <__ssputs_r+0x70>
 800126c:	6921      	ldr	r1, [r4, #16]
 800126e:	4650      	mov	r0, sl
 8001270:	f000 fac2 	bl	80017f8 <_free_r>
 8001274:	e7c7      	b.n	8001206 <__ssputs_r+0x46>
	...

08001278 <_svfiprintf_r>:
 8001278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800127c:	b09d      	sub	sp, #116	; 0x74
 800127e:	9303      	str	r3, [sp, #12]
 8001280:	898b      	ldrh	r3, [r1, #12]
 8001282:	4680      	mov	r8, r0
 8001284:	061c      	lsls	r4, r3, #24
 8001286:	460d      	mov	r5, r1
 8001288:	4616      	mov	r6, r2
 800128a:	d50f      	bpl.n	80012ac <_svfiprintf_r+0x34>
 800128c:	690b      	ldr	r3, [r1, #16]
 800128e:	b96b      	cbnz	r3, 80012ac <_svfiprintf_r+0x34>
 8001290:	2140      	movs	r1, #64	; 0x40
 8001292:	f000 fafd 	bl	8001890 <_malloc_r>
 8001296:	6028      	str	r0, [r5, #0]
 8001298:	6128      	str	r0, [r5, #16]
 800129a:	b928      	cbnz	r0, 80012a8 <_svfiprintf_r+0x30>
 800129c:	230c      	movs	r3, #12
 800129e:	f8c8 3000 	str.w	r3, [r8]
 80012a2:	f04f 30ff 	mov.w	r0, #4294967295
 80012a6:	e0c4      	b.n	8001432 <_svfiprintf_r+0x1ba>
 80012a8:	2340      	movs	r3, #64	; 0x40
 80012aa:	616b      	str	r3, [r5, #20]
 80012ac:	2300      	movs	r3, #0
 80012ae:	9309      	str	r3, [sp, #36]	; 0x24
 80012b0:	2320      	movs	r3, #32
 80012b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80012b6:	2330      	movs	r3, #48	; 0x30
 80012b8:	f04f 0b01 	mov.w	fp, #1
 80012bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80012c0:	4637      	mov	r7, r6
 80012c2:	463c      	mov	r4, r7
 80012c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d13c      	bne.n	8001346 <_svfiprintf_r+0xce>
 80012cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80012d0:	d00b      	beq.n	80012ea <_svfiprintf_r+0x72>
 80012d2:	4653      	mov	r3, sl
 80012d4:	4632      	mov	r2, r6
 80012d6:	4629      	mov	r1, r5
 80012d8:	4640      	mov	r0, r8
 80012da:	f7ff ff71 	bl	80011c0 <__ssputs_r>
 80012de:	3001      	adds	r0, #1
 80012e0:	f000 80a2 	beq.w	8001428 <_svfiprintf_r+0x1b0>
 80012e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012e6:	4453      	add	r3, sl
 80012e8:	9309      	str	r3, [sp, #36]	; 0x24
 80012ea:	783b      	ldrb	r3, [r7, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 809b 	beq.w	8001428 <_svfiprintf_r+0x1b0>
 80012f2:	2300      	movs	r3, #0
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	9304      	str	r3, [sp, #16]
 80012fa:	9307      	str	r3, [sp, #28]
 80012fc:	9205      	str	r2, [sp, #20]
 80012fe:	9306      	str	r3, [sp, #24]
 8001300:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001304:	931a      	str	r3, [sp, #104]	; 0x68
 8001306:	2205      	movs	r2, #5
 8001308:	7821      	ldrb	r1, [r4, #0]
 800130a:	4850      	ldr	r0, [pc, #320]	; (800144c <_svfiprintf_r+0x1d4>)
 800130c:	f000 fa40 	bl	8001790 <memchr>
 8001310:	1c67      	adds	r7, r4, #1
 8001312:	9b04      	ldr	r3, [sp, #16]
 8001314:	b9d8      	cbnz	r0, 800134e <_svfiprintf_r+0xd6>
 8001316:	06d9      	lsls	r1, r3, #27
 8001318:	bf44      	itt	mi
 800131a:	2220      	movmi	r2, #32
 800131c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001320:	071a      	lsls	r2, r3, #28
 8001322:	bf44      	itt	mi
 8001324:	222b      	movmi	r2, #43	; 0x2b
 8001326:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800132a:	7822      	ldrb	r2, [r4, #0]
 800132c:	2a2a      	cmp	r2, #42	; 0x2a
 800132e:	d016      	beq.n	800135e <_svfiprintf_r+0xe6>
 8001330:	2100      	movs	r1, #0
 8001332:	200a      	movs	r0, #10
 8001334:	9a07      	ldr	r2, [sp, #28]
 8001336:	4627      	mov	r7, r4
 8001338:	783b      	ldrb	r3, [r7, #0]
 800133a:	3401      	adds	r4, #1
 800133c:	3b30      	subs	r3, #48	; 0x30
 800133e:	2b09      	cmp	r3, #9
 8001340:	d950      	bls.n	80013e4 <_svfiprintf_r+0x16c>
 8001342:	b1c9      	cbz	r1, 8001378 <_svfiprintf_r+0x100>
 8001344:	e011      	b.n	800136a <_svfiprintf_r+0xf2>
 8001346:	2b25      	cmp	r3, #37	; 0x25
 8001348:	d0c0      	beq.n	80012cc <_svfiprintf_r+0x54>
 800134a:	4627      	mov	r7, r4
 800134c:	e7b9      	b.n	80012c2 <_svfiprintf_r+0x4a>
 800134e:	4a3f      	ldr	r2, [pc, #252]	; (800144c <_svfiprintf_r+0x1d4>)
 8001350:	463c      	mov	r4, r7
 8001352:	1a80      	subs	r0, r0, r2
 8001354:	fa0b f000 	lsl.w	r0, fp, r0
 8001358:	4318      	orrs	r0, r3
 800135a:	9004      	str	r0, [sp, #16]
 800135c:	e7d3      	b.n	8001306 <_svfiprintf_r+0x8e>
 800135e:	9a03      	ldr	r2, [sp, #12]
 8001360:	1d11      	adds	r1, r2, #4
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	9103      	str	r1, [sp, #12]
 8001366:	2a00      	cmp	r2, #0
 8001368:	db01      	blt.n	800136e <_svfiprintf_r+0xf6>
 800136a:	9207      	str	r2, [sp, #28]
 800136c:	e004      	b.n	8001378 <_svfiprintf_r+0x100>
 800136e:	4252      	negs	r2, r2
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	9207      	str	r2, [sp, #28]
 8001376:	9304      	str	r3, [sp, #16]
 8001378:	783b      	ldrb	r3, [r7, #0]
 800137a:	2b2e      	cmp	r3, #46	; 0x2e
 800137c:	d10d      	bne.n	800139a <_svfiprintf_r+0x122>
 800137e:	787b      	ldrb	r3, [r7, #1]
 8001380:	1c79      	adds	r1, r7, #1
 8001382:	2b2a      	cmp	r3, #42	; 0x2a
 8001384:	d132      	bne.n	80013ec <_svfiprintf_r+0x174>
 8001386:	9b03      	ldr	r3, [sp, #12]
 8001388:	3702      	adds	r7, #2
 800138a:	1d1a      	adds	r2, r3, #4
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	9203      	str	r2, [sp, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	bfb8      	it	lt
 8001394:	f04f 33ff 	movlt.w	r3, #4294967295
 8001398:	9305      	str	r3, [sp, #20]
 800139a:	4c2d      	ldr	r4, [pc, #180]	; (8001450 <_svfiprintf_r+0x1d8>)
 800139c:	2203      	movs	r2, #3
 800139e:	7839      	ldrb	r1, [r7, #0]
 80013a0:	4620      	mov	r0, r4
 80013a2:	f000 f9f5 	bl	8001790 <memchr>
 80013a6:	b138      	cbz	r0, 80013b8 <_svfiprintf_r+0x140>
 80013a8:	2340      	movs	r3, #64	; 0x40
 80013aa:	1b00      	subs	r0, r0, r4
 80013ac:	fa03 f000 	lsl.w	r0, r3, r0
 80013b0:	9b04      	ldr	r3, [sp, #16]
 80013b2:	3701      	adds	r7, #1
 80013b4:	4303      	orrs	r3, r0
 80013b6:	9304      	str	r3, [sp, #16]
 80013b8:	7839      	ldrb	r1, [r7, #0]
 80013ba:	2206      	movs	r2, #6
 80013bc:	4825      	ldr	r0, [pc, #148]	; (8001454 <_svfiprintf_r+0x1dc>)
 80013be:	1c7e      	adds	r6, r7, #1
 80013c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80013c4:	f000 f9e4 	bl	8001790 <memchr>
 80013c8:	2800      	cmp	r0, #0
 80013ca:	d035      	beq.n	8001438 <_svfiprintf_r+0x1c0>
 80013cc:	4b22      	ldr	r3, [pc, #136]	; (8001458 <_svfiprintf_r+0x1e0>)
 80013ce:	b9fb      	cbnz	r3, 8001410 <_svfiprintf_r+0x198>
 80013d0:	9b03      	ldr	r3, [sp, #12]
 80013d2:	3307      	adds	r3, #7
 80013d4:	f023 0307 	bic.w	r3, r3, #7
 80013d8:	3308      	adds	r3, #8
 80013da:	9303      	str	r3, [sp, #12]
 80013dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013de:	444b      	add	r3, r9
 80013e0:	9309      	str	r3, [sp, #36]	; 0x24
 80013e2:	e76d      	b.n	80012c0 <_svfiprintf_r+0x48>
 80013e4:	fb00 3202 	mla	r2, r0, r2, r3
 80013e8:	2101      	movs	r1, #1
 80013ea:	e7a4      	b.n	8001336 <_svfiprintf_r+0xbe>
 80013ec:	2300      	movs	r3, #0
 80013ee:	240a      	movs	r4, #10
 80013f0:	4618      	mov	r0, r3
 80013f2:	9305      	str	r3, [sp, #20]
 80013f4:	460f      	mov	r7, r1
 80013f6:	783a      	ldrb	r2, [r7, #0]
 80013f8:	3101      	adds	r1, #1
 80013fa:	3a30      	subs	r2, #48	; 0x30
 80013fc:	2a09      	cmp	r2, #9
 80013fe:	d903      	bls.n	8001408 <_svfiprintf_r+0x190>
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0ca      	beq.n	800139a <_svfiprintf_r+0x122>
 8001404:	9005      	str	r0, [sp, #20]
 8001406:	e7c8      	b.n	800139a <_svfiprintf_r+0x122>
 8001408:	fb04 2000 	mla	r0, r4, r0, r2
 800140c:	2301      	movs	r3, #1
 800140e:	e7f1      	b.n	80013f4 <_svfiprintf_r+0x17c>
 8001410:	ab03      	add	r3, sp, #12
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	462a      	mov	r2, r5
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <_svfiprintf_r+0x1e4>)
 8001418:	a904      	add	r1, sp, #16
 800141a:	4640      	mov	r0, r8
 800141c:	f3af 8000 	nop.w
 8001420:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001424:	4681      	mov	r9, r0
 8001426:	d1d9      	bne.n	80013dc <_svfiprintf_r+0x164>
 8001428:	89ab      	ldrh	r3, [r5, #12]
 800142a:	065b      	lsls	r3, r3, #25
 800142c:	f53f af39 	bmi.w	80012a2 <_svfiprintf_r+0x2a>
 8001430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001432:	b01d      	add	sp, #116	; 0x74
 8001434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001438:	ab03      	add	r3, sp, #12
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	462a      	mov	r2, r5
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <_svfiprintf_r+0x1e4>)
 8001440:	a904      	add	r1, sp, #16
 8001442:	4640      	mov	r0, r8
 8001444:	f000 f884 	bl	8001550 <_printf_i>
 8001448:	e7ea      	b.n	8001420 <_svfiprintf_r+0x1a8>
 800144a:	bf00      	nop
 800144c:	08001a4b 	.word	0x08001a4b
 8001450:	08001a51 	.word	0x08001a51
 8001454:	08001a55 	.word	0x08001a55
 8001458:	00000000 	.word	0x00000000
 800145c:	080011c1 	.word	0x080011c1

08001460 <_printf_common>:
 8001460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001464:	4691      	mov	r9, r2
 8001466:	461f      	mov	r7, r3
 8001468:	688a      	ldr	r2, [r1, #8]
 800146a:	690b      	ldr	r3, [r1, #16]
 800146c:	4606      	mov	r6, r0
 800146e:	4293      	cmp	r3, r2
 8001470:	bfb8      	it	lt
 8001472:	4613      	movlt	r3, r2
 8001474:	f8c9 3000 	str.w	r3, [r9]
 8001478:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800147c:	460c      	mov	r4, r1
 800147e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001482:	b112      	cbz	r2, 800148a <_printf_common+0x2a>
 8001484:	3301      	adds	r3, #1
 8001486:	f8c9 3000 	str.w	r3, [r9]
 800148a:	6823      	ldr	r3, [r4, #0]
 800148c:	0699      	lsls	r1, r3, #26
 800148e:	bf42      	ittt	mi
 8001490:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001494:	3302      	addmi	r3, #2
 8001496:	f8c9 3000 	strmi.w	r3, [r9]
 800149a:	6825      	ldr	r5, [r4, #0]
 800149c:	f015 0506 	ands.w	r5, r5, #6
 80014a0:	d107      	bne.n	80014b2 <_printf_common+0x52>
 80014a2:	f104 0a19 	add.w	sl, r4, #25
 80014a6:	68e3      	ldr	r3, [r4, #12]
 80014a8:	f8d9 2000 	ldr.w	r2, [r9]
 80014ac:	1a9b      	subs	r3, r3, r2
 80014ae:	429d      	cmp	r5, r3
 80014b0:	db2a      	blt.n	8001508 <_printf_common+0xa8>
 80014b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80014b6:	6822      	ldr	r2, [r4, #0]
 80014b8:	3300      	adds	r3, #0
 80014ba:	bf18      	it	ne
 80014bc:	2301      	movne	r3, #1
 80014be:	0692      	lsls	r2, r2, #26
 80014c0:	d42f      	bmi.n	8001522 <_printf_common+0xc2>
 80014c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80014c6:	4639      	mov	r1, r7
 80014c8:	4630      	mov	r0, r6
 80014ca:	47c0      	blx	r8
 80014cc:	3001      	adds	r0, #1
 80014ce:	d022      	beq.n	8001516 <_printf_common+0xb6>
 80014d0:	6823      	ldr	r3, [r4, #0]
 80014d2:	68e5      	ldr	r5, [r4, #12]
 80014d4:	f003 0306 	and.w	r3, r3, #6
 80014d8:	2b04      	cmp	r3, #4
 80014da:	bf18      	it	ne
 80014dc:	2500      	movne	r5, #0
 80014de:	f8d9 2000 	ldr.w	r2, [r9]
 80014e2:	f04f 0900 	mov.w	r9, #0
 80014e6:	bf08      	it	eq
 80014e8:	1aad      	subeq	r5, r5, r2
 80014ea:	68a3      	ldr	r3, [r4, #8]
 80014ec:	6922      	ldr	r2, [r4, #16]
 80014ee:	bf08      	it	eq
 80014f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80014f4:	4293      	cmp	r3, r2
 80014f6:	bfc4      	itt	gt
 80014f8:	1a9b      	subgt	r3, r3, r2
 80014fa:	18ed      	addgt	r5, r5, r3
 80014fc:	341a      	adds	r4, #26
 80014fe:	454d      	cmp	r5, r9
 8001500:	d11b      	bne.n	800153a <_printf_common+0xda>
 8001502:	2000      	movs	r0, #0
 8001504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001508:	2301      	movs	r3, #1
 800150a:	4652      	mov	r2, sl
 800150c:	4639      	mov	r1, r7
 800150e:	4630      	mov	r0, r6
 8001510:	47c0      	blx	r8
 8001512:	3001      	adds	r0, #1
 8001514:	d103      	bne.n	800151e <_printf_common+0xbe>
 8001516:	f04f 30ff 	mov.w	r0, #4294967295
 800151a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800151e:	3501      	adds	r5, #1
 8001520:	e7c1      	b.n	80014a6 <_printf_common+0x46>
 8001522:	2030      	movs	r0, #48	; 0x30
 8001524:	18e1      	adds	r1, r4, r3
 8001526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001530:	4422      	add	r2, r4
 8001532:	3302      	adds	r3, #2
 8001534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001538:	e7c3      	b.n	80014c2 <_printf_common+0x62>
 800153a:	2301      	movs	r3, #1
 800153c:	4622      	mov	r2, r4
 800153e:	4639      	mov	r1, r7
 8001540:	4630      	mov	r0, r6
 8001542:	47c0      	blx	r8
 8001544:	3001      	adds	r0, #1
 8001546:	d0e6      	beq.n	8001516 <_printf_common+0xb6>
 8001548:	f109 0901 	add.w	r9, r9, #1
 800154c:	e7d7      	b.n	80014fe <_printf_common+0x9e>
	...

08001550 <_printf_i>:
 8001550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001554:	4617      	mov	r7, r2
 8001556:	7e0a      	ldrb	r2, [r1, #24]
 8001558:	b085      	sub	sp, #20
 800155a:	2a6e      	cmp	r2, #110	; 0x6e
 800155c:	4698      	mov	r8, r3
 800155e:	4606      	mov	r6, r0
 8001560:	460c      	mov	r4, r1
 8001562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001564:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001568:	f000 80bc 	beq.w	80016e4 <_printf_i+0x194>
 800156c:	d81a      	bhi.n	80015a4 <_printf_i+0x54>
 800156e:	2a63      	cmp	r2, #99	; 0x63
 8001570:	d02e      	beq.n	80015d0 <_printf_i+0x80>
 8001572:	d80a      	bhi.n	800158a <_printf_i+0x3a>
 8001574:	2a00      	cmp	r2, #0
 8001576:	f000 80c8 	beq.w	800170a <_printf_i+0x1ba>
 800157a:	2a58      	cmp	r2, #88	; 0x58
 800157c:	f000 808a 	beq.w	8001694 <_printf_i+0x144>
 8001580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001584:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001588:	e02a      	b.n	80015e0 <_printf_i+0x90>
 800158a:	2a64      	cmp	r2, #100	; 0x64
 800158c:	d001      	beq.n	8001592 <_printf_i+0x42>
 800158e:	2a69      	cmp	r2, #105	; 0x69
 8001590:	d1f6      	bne.n	8001580 <_printf_i+0x30>
 8001592:	6821      	ldr	r1, [r4, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	f011 0f80 	tst.w	r1, #128	; 0x80
 800159a:	d023      	beq.n	80015e4 <_printf_i+0x94>
 800159c:	1d11      	adds	r1, r2, #4
 800159e:	6019      	str	r1, [r3, #0]
 80015a0:	6813      	ldr	r3, [r2, #0]
 80015a2:	e027      	b.n	80015f4 <_printf_i+0xa4>
 80015a4:	2a73      	cmp	r2, #115	; 0x73
 80015a6:	f000 80b4 	beq.w	8001712 <_printf_i+0x1c2>
 80015aa:	d808      	bhi.n	80015be <_printf_i+0x6e>
 80015ac:	2a6f      	cmp	r2, #111	; 0x6f
 80015ae:	d02a      	beq.n	8001606 <_printf_i+0xb6>
 80015b0:	2a70      	cmp	r2, #112	; 0x70
 80015b2:	d1e5      	bne.n	8001580 <_printf_i+0x30>
 80015b4:	680a      	ldr	r2, [r1, #0]
 80015b6:	f042 0220 	orr.w	r2, r2, #32
 80015ba:	600a      	str	r2, [r1, #0]
 80015bc:	e003      	b.n	80015c6 <_printf_i+0x76>
 80015be:	2a75      	cmp	r2, #117	; 0x75
 80015c0:	d021      	beq.n	8001606 <_printf_i+0xb6>
 80015c2:	2a78      	cmp	r2, #120	; 0x78
 80015c4:	d1dc      	bne.n	8001580 <_printf_i+0x30>
 80015c6:	2278      	movs	r2, #120	; 0x78
 80015c8:	496f      	ldr	r1, [pc, #444]	; (8001788 <_printf_i+0x238>)
 80015ca:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80015ce:	e064      	b.n	800169a <_printf_i+0x14a>
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80015d6:	1d11      	adds	r1, r2, #4
 80015d8:	6019      	str	r1, [r3, #0]
 80015da:	6813      	ldr	r3, [r2, #0]
 80015dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0a3      	b.n	800172c <_printf_i+0x1dc>
 80015e4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80015e8:	f102 0104 	add.w	r1, r2, #4
 80015ec:	6019      	str	r1, [r3, #0]
 80015ee:	d0d7      	beq.n	80015a0 <_printf_i+0x50>
 80015f0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	da03      	bge.n	8001600 <_printf_i+0xb0>
 80015f8:	222d      	movs	r2, #45	; 0x2d
 80015fa:	425b      	negs	r3, r3
 80015fc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001600:	4962      	ldr	r1, [pc, #392]	; (800178c <_printf_i+0x23c>)
 8001602:	220a      	movs	r2, #10
 8001604:	e017      	b.n	8001636 <_printf_i+0xe6>
 8001606:	6820      	ldr	r0, [r4, #0]
 8001608:	6819      	ldr	r1, [r3, #0]
 800160a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800160e:	d003      	beq.n	8001618 <_printf_i+0xc8>
 8001610:	1d08      	adds	r0, r1, #4
 8001612:	6018      	str	r0, [r3, #0]
 8001614:	680b      	ldr	r3, [r1, #0]
 8001616:	e006      	b.n	8001626 <_printf_i+0xd6>
 8001618:	f010 0f40 	tst.w	r0, #64	; 0x40
 800161c:	f101 0004 	add.w	r0, r1, #4
 8001620:	6018      	str	r0, [r3, #0]
 8001622:	d0f7      	beq.n	8001614 <_printf_i+0xc4>
 8001624:	880b      	ldrh	r3, [r1, #0]
 8001626:	2a6f      	cmp	r2, #111	; 0x6f
 8001628:	bf14      	ite	ne
 800162a:	220a      	movne	r2, #10
 800162c:	2208      	moveq	r2, #8
 800162e:	4957      	ldr	r1, [pc, #348]	; (800178c <_printf_i+0x23c>)
 8001630:	2000      	movs	r0, #0
 8001632:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001636:	6865      	ldr	r5, [r4, #4]
 8001638:	2d00      	cmp	r5, #0
 800163a:	60a5      	str	r5, [r4, #8]
 800163c:	f2c0 809c 	blt.w	8001778 <_printf_i+0x228>
 8001640:	6820      	ldr	r0, [r4, #0]
 8001642:	f020 0004 	bic.w	r0, r0, #4
 8001646:	6020      	str	r0, [r4, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d13f      	bne.n	80016cc <_printf_i+0x17c>
 800164c:	2d00      	cmp	r5, #0
 800164e:	f040 8095 	bne.w	800177c <_printf_i+0x22c>
 8001652:	4675      	mov	r5, lr
 8001654:	2a08      	cmp	r2, #8
 8001656:	d10b      	bne.n	8001670 <_printf_i+0x120>
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	07da      	lsls	r2, r3, #31
 800165c:	d508      	bpl.n	8001670 <_printf_i+0x120>
 800165e:	6923      	ldr	r3, [r4, #16]
 8001660:	6862      	ldr	r2, [r4, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	bfde      	ittt	le
 8001666:	2330      	movle	r3, #48	; 0x30
 8001668:	f805 3c01 	strble.w	r3, [r5, #-1]
 800166c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001670:	ebae 0305 	sub.w	r3, lr, r5
 8001674:	6123      	str	r3, [r4, #16]
 8001676:	f8cd 8000 	str.w	r8, [sp]
 800167a:	463b      	mov	r3, r7
 800167c:	aa03      	add	r2, sp, #12
 800167e:	4621      	mov	r1, r4
 8001680:	4630      	mov	r0, r6
 8001682:	f7ff feed 	bl	8001460 <_printf_common>
 8001686:	3001      	adds	r0, #1
 8001688:	d155      	bne.n	8001736 <_printf_i+0x1e6>
 800168a:	f04f 30ff 	mov.w	r0, #4294967295
 800168e:	b005      	add	sp, #20
 8001690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001694:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001698:	493c      	ldr	r1, [pc, #240]	; (800178c <_printf_i+0x23c>)
 800169a:	6822      	ldr	r2, [r4, #0]
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	f012 0f80 	tst.w	r2, #128	; 0x80
 80016a2:	f100 0504 	add.w	r5, r0, #4
 80016a6:	601d      	str	r5, [r3, #0]
 80016a8:	d001      	beq.n	80016ae <_printf_i+0x15e>
 80016aa:	6803      	ldr	r3, [r0, #0]
 80016ac:	e002      	b.n	80016b4 <_printf_i+0x164>
 80016ae:	0655      	lsls	r5, r2, #25
 80016b0:	d5fb      	bpl.n	80016aa <_printf_i+0x15a>
 80016b2:	8803      	ldrh	r3, [r0, #0]
 80016b4:	07d0      	lsls	r0, r2, #31
 80016b6:	bf44      	itt	mi
 80016b8:	f042 0220 	orrmi.w	r2, r2, #32
 80016bc:	6022      	strmi	r2, [r4, #0]
 80016be:	b91b      	cbnz	r3, 80016c8 <_printf_i+0x178>
 80016c0:	6822      	ldr	r2, [r4, #0]
 80016c2:	f022 0220 	bic.w	r2, r2, #32
 80016c6:	6022      	str	r2, [r4, #0]
 80016c8:	2210      	movs	r2, #16
 80016ca:	e7b1      	b.n	8001630 <_printf_i+0xe0>
 80016cc:	4675      	mov	r5, lr
 80016ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80016d2:	fb02 3310 	mls	r3, r2, r0, r3
 80016d6:	5ccb      	ldrb	r3, [r1, r3]
 80016d8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80016dc:	4603      	mov	r3, r0
 80016de:	2800      	cmp	r0, #0
 80016e0:	d1f5      	bne.n	80016ce <_printf_i+0x17e>
 80016e2:	e7b7      	b.n	8001654 <_printf_i+0x104>
 80016e4:	6808      	ldr	r0, [r1, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80016ec:	6949      	ldr	r1, [r1, #20]
 80016ee:	d004      	beq.n	80016fa <_printf_i+0x1aa>
 80016f0:	1d10      	adds	r0, r2, #4
 80016f2:	6018      	str	r0, [r3, #0]
 80016f4:	6813      	ldr	r3, [r2, #0]
 80016f6:	6019      	str	r1, [r3, #0]
 80016f8:	e007      	b.n	800170a <_printf_i+0x1ba>
 80016fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80016fe:	f102 0004 	add.w	r0, r2, #4
 8001702:	6018      	str	r0, [r3, #0]
 8001704:	6813      	ldr	r3, [r2, #0]
 8001706:	d0f6      	beq.n	80016f6 <_printf_i+0x1a6>
 8001708:	8019      	strh	r1, [r3, #0]
 800170a:	2300      	movs	r3, #0
 800170c:	4675      	mov	r5, lr
 800170e:	6123      	str	r3, [r4, #16]
 8001710:	e7b1      	b.n	8001676 <_printf_i+0x126>
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	1d11      	adds	r1, r2, #4
 8001716:	6019      	str	r1, [r3, #0]
 8001718:	6815      	ldr	r5, [r2, #0]
 800171a:	2100      	movs	r1, #0
 800171c:	6862      	ldr	r2, [r4, #4]
 800171e:	4628      	mov	r0, r5
 8001720:	f000 f836 	bl	8001790 <memchr>
 8001724:	b108      	cbz	r0, 800172a <_printf_i+0x1da>
 8001726:	1b40      	subs	r0, r0, r5
 8001728:	6060      	str	r0, [r4, #4]
 800172a:	6863      	ldr	r3, [r4, #4]
 800172c:	6123      	str	r3, [r4, #16]
 800172e:	2300      	movs	r3, #0
 8001730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001734:	e79f      	b.n	8001676 <_printf_i+0x126>
 8001736:	6923      	ldr	r3, [r4, #16]
 8001738:	462a      	mov	r2, r5
 800173a:	4639      	mov	r1, r7
 800173c:	4630      	mov	r0, r6
 800173e:	47c0      	blx	r8
 8001740:	3001      	adds	r0, #1
 8001742:	d0a2      	beq.n	800168a <_printf_i+0x13a>
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	079b      	lsls	r3, r3, #30
 8001748:	d507      	bpl.n	800175a <_printf_i+0x20a>
 800174a:	2500      	movs	r5, #0
 800174c:	f104 0919 	add.w	r9, r4, #25
 8001750:	68e3      	ldr	r3, [r4, #12]
 8001752:	9a03      	ldr	r2, [sp, #12]
 8001754:	1a9b      	subs	r3, r3, r2
 8001756:	429d      	cmp	r5, r3
 8001758:	db05      	blt.n	8001766 <_printf_i+0x216>
 800175a:	68e0      	ldr	r0, [r4, #12]
 800175c:	9b03      	ldr	r3, [sp, #12]
 800175e:	4298      	cmp	r0, r3
 8001760:	bfb8      	it	lt
 8001762:	4618      	movlt	r0, r3
 8001764:	e793      	b.n	800168e <_printf_i+0x13e>
 8001766:	2301      	movs	r3, #1
 8001768:	464a      	mov	r2, r9
 800176a:	4639      	mov	r1, r7
 800176c:	4630      	mov	r0, r6
 800176e:	47c0      	blx	r8
 8001770:	3001      	adds	r0, #1
 8001772:	d08a      	beq.n	800168a <_printf_i+0x13a>
 8001774:	3501      	adds	r5, #1
 8001776:	e7eb      	b.n	8001750 <_printf_i+0x200>
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1a7      	bne.n	80016cc <_printf_i+0x17c>
 800177c:	780b      	ldrb	r3, [r1, #0]
 800177e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001782:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001786:	e765      	b.n	8001654 <_printf_i+0x104>
 8001788:	08001a6d 	.word	0x08001a6d
 800178c:	08001a5c 	.word	0x08001a5c

08001790 <memchr>:
 8001790:	b510      	push	{r4, lr}
 8001792:	b2c9      	uxtb	r1, r1
 8001794:	4402      	add	r2, r0
 8001796:	4290      	cmp	r0, r2
 8001798:	4603      	mov	r3, r0
 800179a:	d101      	bne.n	80017a0 <memchr+0x10>
 800179c:	2000      	movs	r0, #0
 800179e:	bd10      	pop	{r4, pc}
 80017a0:	781c      	ldrb	r4, [r3, #0]
 80017a2:	3001      	adds	r0, #1
 80017a4:	428c      	cmp	r4, r1
 80017a6:	d1f6      	bne.n	8001796 <memchr+0x6>
 80017a8:	4618      	mov	r0, r3
 80017aa:	bd10      	pop	{r4, pc}

080017ac <memcpy>:
 80017ac:	b510      	push	{r4, lr}
 80017ae:	1e43      	subs	r3, r0, #1
 80017b0:	440a      	add	r2, r1
 80017b2:	4291      	cmp	r1, r2
 80017b4:	d100      	bne.n	80017b8 <memcpy+0xc>
 80017b6:	bd10      	pop	{r4, pc}
 80017b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80017bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80017c0:	e7f7      	b.n	80017b2 <memcpy+0x6>

080017c2 <memmove>:
 80017c2:	4288      	cmp	r0, r1
 80017c4:	b510      	push	{r4, lr}
 80017c6:	eb01 0302 	add.w	r3, r1, r2
 80017ca:	d803      	bhi.n	80017d4 <memmove+0x12>
 80017cc:	1e42      	subs	r2, r0, #1
 80017ce:	4299      	cmp	r1, r3
 80017d0:	d10c      	bne.n	80017ec <memmove+0x2a>
 80017d2:	bd10      	pop	{r4, pc}
 80017d4:	4298      	cmp	r0, r3
 80017d6:	d2f9      	bcs.n	80017cc <memmove+0xa>
 80017d8:	1881      	adds	r1, r0, r2
 80017da:	1ad2      	subs	r2, r2, r3
 80017dc:	42d3      	cmn	r3, r2
 80017de:	d100      	bne.n	80017e2 <memmove+0x20>
 80017e0:	bd10      	pop	{r4, pc}
 80017e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80017e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80017ea:	e7f7      	b.n	80017dc <memmove+0x1a>
 80017ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80017f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80017f4:	e7eb      	b.n	80017ce <memmove+0xc>
	...

080017f8 <_free_r>:
 80017f8:	b538      	push	{r3, r4, r5, lr}
 80017fa:	4605      	mov	r5, r0
 80017fc:	2900      	cmp	r1, #0
 80017fe:	d043      	beq.n	8001888 <_free_r+0x90>
 8001800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001804:	1f0c      	subs	r4, r1, #4
 8001806:	2b00      	cmp	r3, #0
 8001808:	bfb8      	it	lt
 800180a:	18e4      	addlt	r4, r4, r3
 800180c:	f000 f8d4 	bl	80019b8 <__malloc_lock>
 8001810:	4a1e      	ldr	r2, [pc, #120]	; (800188c <_free_r+0x94>)
 8001812:	6813      	ldr	r3, [r2, #0]
 8001814:	4610      	mov	r0, r2
 8001816:	b933      	cbnz	r3, 8001826 <_free_r+0x2e>
 8001818:	6063      	str	r3, [r4, #4]
 800181a:	6014      	str	r4, [r2, #0]
 800181c:	4628      	mov	r0, r5
 800181e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001822:	f000 b8ca 	b.w	80019ba <__malloc_unlock>
 8001826:	42a3      	cmp	r3, r4
 8001828:	d90b      	bls.n	8001842 <_free_r+0x4a>
 800182a:	6821      	ldr	r1, [r4, #0]
 800182c:	1862      	adds	r2, r4, r1
 800182e:	4293      	cmp	r3, r2
 8001830:	bf01      	itttt	eq
 8001832:	681a      	ldreq	r2, [r3, #0]
 8001834:	685b      	ldreq	r3, [r3, #4]
 8001836:	1852      	addeq	r2, r2, r1
 8001838:	6022      	streq	r2, [r4, #0]
 800183a:	6063      	str	r3, [r4, #4]
 800183c:	6004      	str	r4, [r0, #0]
 800183e:	e7ed      	b.n	800181c <_free_r+0x24>
 8001840:	4613      	mov	r3, r2
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	b10a      	cbz	r2, 800184a <_free_r+0x52>
 8001846:	42a2      	cmp	r2, r4
 8001848:	d9fa      	bls.n	8001840 <_free_r+0x48>
 800184a:	6819      	ldr	r1, [r3, #0]
 800184c:	1858      	adds	r0, r3, r1
 800184e:	42a0      	cmp	r0, r4
 8001850:	d10b      	bne.n	800186a <_free_r+0x72>
 8001852:	6820      	ldr	r0, [r4, #0]
 8001854:	4401      	add	r1, r0
 8001856:	1858      	adds	r0, r3, r1
 8001858:	4282      	cmp	r2, r0
 800185a:	6019      	str	r1, [r3, #0]
 800185c:	d1de      	bne.n	800181c <_free_r+0x24>
 800185e:	6810      	ldr	r0, [r2, #0]
 8001860:	6852      	ldr	r2, [r2, #4]
 8001862:	4401      	add	r1, r0
 8001864:	6019      	str	r1, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	e7d8      	b.n	800181c <_free_r+0x24>
 800186a:	d902      	bls.n	8001872 <_free_r+0x7a>
 800186c:	230c      	movs	r3, #12
 800186e:	602b      	str	r3, [r5, #0]
 8001870:	e7d4      	b.n	800181c <_free_r+0x24>
 8001872:	6820      	ldr	r0, [r4, #0]
 8001874:	1821      	adds	r1, r4, r0
 8001876:	428a      	cmp	r2, r1
 8001878:	bf01      	itttt	eq
 800187a:	6811      	ldreq	r1, [r2, #0]
 800187c:	6852      	ldreq	r2, [r2, #4]
 800187e:	1809      	addeq	r1, r1, r0
 8001880:	6021      	streq	r1, [r4, #0]
 8001882:	6062      	str	r2, [r4, #4]
 8001884:	605c      	str	r4, [r3, #4]
 8001886:	e7c9      	b.n	800181c <_free_r+0x24>
 8001888:	bd38      	pop	{r3, r4, r5, pc}
 800188a:	bf00      	nop
 800188c:	2000008c 	.word	0x2000008c

08001890 <_malloc_r>:
 8001890:	b570      	push	{r4, r5, r6, lr}
 8001892:	1ccd      	adds	r5, r1, #3
 8001894:	f025 0503 	bic.w	r5, r5, #3
 8001898:	3508      	adds	r5, #8
 800189a:	2d0c      	cmp	r5, #12
 800189c:	bf38      	it	cc
 800189e:	250c      	movcc	r5, #12
 80018a0:	2d00      	cmp	r5, #0
 80018a2:	4606      	mov	r6, r0
 80018a4:	db01      	blt.n	80018aa <_malloc_r+0x1a>
 80018a6:	42a9      	cmp	r1, r5
 80018a8:	d903      	bls.n	80018b2 <_malloc_r+0x22>
 80018aa:	230c      	movs	r3, #12
 80018ac:	6033      	str	r3, [r6, #0]
 80018ae:	2000      	movs	r0, #0
 80018b0:	bd70      	pop	{r4, r5, r6, pc}
 80018b2:	f000 f881 	bl	80019b8 <__malloc_lock>
 80018b6:	4a23      	ldr	r2, [pc, #140]	; (8001944 <_malloc_r+0xb4>)
 80018b8:	6814      	ldr	r4, [r2, #0]
 80018ba:	4621      	mov	r1, r4
 80018bc:	b991      	cbnz	r1, 80018e4 <_malloc_r+0x54>
 80018be:	4c22      	ldr	r4, [pc, #136]	; (8001948 <_malloc_r+0xb8>)
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	b91b      	cbnz	r3, 80018cc <_malloc_r+0x3c>
 80018c4:	4630      	mov	r0, r6
 80018c6:	f000 f867 	bl	8001998 <_sbrk_r>
 80018ca:	6020      	str	r0, [r4, #0]
 80018cc:	4629      	mov	r1, r5
 80018ce:	4630      	mov	r0, r6
 80018d0:	f000 f862 	bl	8001998 <_sbrk_r>
 80018d4:	1c43      	adds	r3, r0, #1
 80018d6:	d126      	bne.n	8001926 <_malloc_r+0x96>
 80018d8:	230c      	movs	r3, #12
 80018da:	4630      	mov	r0, r6
 80018dc:	6033      	str	r3, [r6, #0]
 80018de:	f000 f86c 	bl	80019ba <__malloc_unlock>
 80018e2:	e7e4      	b.n	80018ae <_malloc_r+0x1e>
 80018e4:	680b      	ldr	r3, [r1, #0]
 80018e6:	1b5b      	subs	r3, r3, r5
 80018e8:	d41a      	bmi.n	8001920 <_malloc_r+0x90>
 80018ea:	2b0b      	cmp	r3, #11
 80018ec:	d90f      	bls.n	800190e <_malloc_r+0x7e>
 80018ee:	600b      	str	r3, [r1, #0]
 80018f0:	18cc      	adds	r4, r1, r3
 80018f2:	50cd      	str	r5, [r1, r3]
 80018f4:	4630      	mov	r0, r6
 80018f6:	f000 f860 	bl	80019ba <__malloc_unlock>
 80018fa:	f104 000b 	add.w	r0, r4, #11
 80018fe:	1d23      	adds	r3, r4, #4
 8001900:	f020 0007 	bic.w	r0, r0, #7
 8001904:	1ac3      	subs	r3, r0, r3
 8001906:	d01b      	beq.n	8001940 <_malloc_r+0xb0>
 8001908:	425a      	negs	r2, r3
 800190a:	50e2      	str	r2, [r4, r3]
 800190c:	bd70      	pop	{r4, r5, r6, pc}
 800190e:	428c      	cmp	r4, r1
 8001910:	bf0b      	itete	eq
 8001912:	6863      	ldreq	r3, [r4, #4]
 8001914:	684b      	ldrne	r3, [r1, #4]
 8001916:	6013      	streq	r3, [r2, #0]
 8001918:	6063      	strne	r3, [r4, #4]
 800191a:	bf18      	it	ne
 800191c:	460c      	movne	r4, r1
 800191e:	e7e9      	b.n	80018f4 <_malloc_r+0x64>
 8001920:	460c      	mov	r4, r1
 8001922:	6849      	ldr	r1, [r1, #4]
 8001924:	e7ca      	b.n	80018bc <_malloc_r+0x2c>
 8001926:	1cc4      	adds	r4, r0, #3
 8001928:	f024 0403 	bic.w	r4, r4, #3
 800192c:	42a0      	cmp	r0, r4
 800192e:	d005      	beq.n	800193c <_malloc_r+0xac>
 8001930:	1a21      	subs	r1, r4, r0
 8001932:	4630      	mov	r0, r6
 8001934:	f000 f830 	bl	8001998 <_sbrk_r>
 8001938:	3001      	adds	r0, #1
 800193a:	d0cd      	beq.n	80018d8 <_malloc_r+0x48>
 800193c:	6025      	str	r5, [r4, #0]
 800193e:	e7d9      	b.n	80018f4 <_malloc_r+0x64>
 8001940:	bd70      	pop	{r4, r5, r6, pc}
 8001942:	bf00      	nop
 8001944:	2000008c 	.word	0x2000008c
 8001948:	20000090 	.word	0x20000090

0800194c <_realloc_r>:
 800194c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194e:	4607      	mov	r7, r0
 8001950:	4614      	mov	r4, r2
 8001952:	460e      	mov	r6, r1
 8001954:	b921      	cbnz	r1, 8001960 <_realloc_r+0x14>
 8001956:	4611      	mov	r1, r2
 8001958:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800195c:	f7ff bf98 	b.w	8001890 <_malloc_r>
 8001960:	b922      	cbnz	r2, 800196c <_realloc_r+0x20>
 8001962:	f7ff ff49 	bl	80017f8 <_free_r>
 8001966:	4625      	mov	r5, r4
 8001968:	4628      	mov	r0, r5
 800196a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800196c:	f000 f826 	bl	80019bc <_malloc_usable_size_r>
 8001970:	4284      	cmp	r4, r0
 8001972:	d90f      	bls.n	8001994 <_realloc_r+0x48>
 8001974:	4621      	mov	r1, r4
 8001976:	4638      	mov	r0, r7
 8001978:	f7ff ff8a 	bl	8001890 <_malloc_r>
 800197c:	4605      	mov	r5, r0
 800197e:	2800      	cmp	r0, #0
 8001980:	d0f2      	beq.n	8001968 <_realloc_r+0x1c>
 8001982:	4631      	mov	r1, r6
 8001984:	4622      	mov	r2, r4
 8001986:	f7ff ff11 	bl	80017ac <memcpy>
 800198a:	4631      	mov	r1, r6
 800198c:	4638      	mov	r0, r7
 800198e:	f7ff ff33 	bl	80017f8 <_free_r>
 8001992:	e7e9      	b.n	8001968 <_realloc_r+0x1c>
 8001994:	4635      	mov	r5, r6
 8001996:	e7e7      	b.n	8001968 <_realloc_r+0x1c>

08001998 <_sbrk_r>:
 8001998:	b538      	push	{r3, r4, r5, lr}
 800199a:	2300      	movs	r3, #0
 800199c:	4c05      	ldr	r4, [pc, #20]	; (80019b4 <_sbrk_r+0x1c>)
 800199e:	4605      	mov	r5, r0
 80019a0:	4608      	mov	r0, r1
 80019a2:	6023      	str	r3, [r4, #0]
 80019a4:	f000 f814 	bl	80019d0 <_sbrk>
 80019a8:	1c43      	adds	r3, r0, #1
 80019aa:	d102      	bne.n	80019b2 <_sbrk_r+0x1a>
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	b103      	cbz	r3, 80019b2 <_sbrk_r+0x1a>
 80019b0:	602b      	str	r3, [r5, #0]
 80019b2:	bd38      	pop	{r3, r4, r5, pc}
 80019b4:	200000dc 	.word	0x200000dc

080019b8 <__malloc_lock>:
 80019b8:	4770      	bx	lr

080019ba <__malloc_unlock>:
 80019ba:	4770      	bx	lr

080019bc <_malloc_usable_size_r>:
 80019bc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80019c0:	2800      	cmp	r0, #0
 80019c2:	f1a0 0004 	sub.w	r0, r0, #4
 80019c6:	bfbc      	itt	lt
 80019c8:	580b      	ldrlt	r3, [r1, r0]
 80019ca:	18c0      	addlt	r0, r0, r3
 80019cc:	4770      	bx	lr
	...

080019d0 <_sbrk>:
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <_sbrk+0x14>)
 80019d2:	4602      	mov	r2, r0
 80019d4:	6819      	ldr	r1, [r3, #0]
 80019d6:	b909      	cbnz	r1, 80019dc <_sbrk+0xc>
 80019d8:	4903      	ldr	r1, [pc, #12]	; (80019e8 <_sbrk+0x18>)
 80019da:	6019      	str	r1, [r3, #0]
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	4402      	add	r2, r0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	4770      	bx	lr
 80019e4:	20000094 	.word	0x20000094
 80019e8:	200000e0 	.word	0x200000e0

080019ec <_init>:
 80019ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ee:	bf00      	nop
 80019f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019f2:	bc08      	pop	{r3}
 80019f4:	469e      	mov	lr, r3
 80019f6:	4770      	bx	lr

080019f8 <_fini>:
 80019f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fa:	bf00      	nop
 80019fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019fe:	bc08      	pop	{r3}
 8001a00:	469e      	mov	lr, r3
 8001a02:	4770      	bx	lr
