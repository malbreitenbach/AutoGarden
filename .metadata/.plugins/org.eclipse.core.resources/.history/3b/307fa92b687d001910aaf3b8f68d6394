/*
 * sensory.c
 *
 *  Created on: 23.05.2019
 *      Author: Malte
 */

#include "sensory.h"

void sen_temperatureIni()
{
	GPIO_InitTypeDef gpioInit;

	    __GPIOC_CLK_ENABLE();
	    __ADC1_CLK_ENABLE();

	    gpioInit.Pin = GPIO_PIN_1;
	    gpioInit.Mode = GPIO_MODE_ANALOG;
	    gpioInit.Pull = GPIO_NOPULL;
	    HAL_GPIO_Init(GPIOC, &gpioInit);

	    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
	    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);

	    ADC_ChannelConfTypeDef adcChannel;
	    ADC_HandleTypeDef g_AdcHandle;

	    g_AdcHandle.Instance = ADC1;

	    g_AdcHandle.Init.ClockPrescaler;
	    g_AdcHandle.Init.Resolution = ADC_RESOLUTION_12B;
	    g_AdcHandle.Init.ScanConvMode = DISABLE;
	    g_AdcHandle.Init.ContinuousConvMode = ENABLE;
	    g_AdcHandle.Init.DiscontinuousConvMode = DISABLE;
	    g_AdcHandle.Init.NbrOfDiscConversion = 0;
	    g_AdcHandle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	    g_AdcHandle.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
	    g_AdcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	    g_AdcHandle.Init.NbrOfConversion = 1;
	    g_AdcHandle.Init.DMAContinuousRequests = ENABLE;
	    g_AdcHandle.Init.EOCSelection = DISABLE;

	    HAL_ADC_Init(&g_AdcHandle);

	    adcChannel.Channel = ADC_CHANNEL_11;
	    adcChannel.Rank = 1;
	    adcChannel.SamplingTime = ADC_SAMPLETIME_480CYCLES;
	    adcChannel.Offset = 0;

	    if (HAL_ADC_ConfigChannel(&g_AdcHandle, &adcChannel) != HAL_OK)
	    {
	        asm("bkpt 255");
	    }
}

void sen_lightIni();

uint8_t sen_getLight();
uint8_t sen_getTemperature();

void sen_startLightMeasure();
void sen_startTemperatureMeasure();

bool sen_temperatureMeasureReady();
bool sen_lightMeasureReady();

uint8_t sen_getTemperatureMeasure();
uint8_t sen_getLightMeasure();
