
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2019 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f1xx_hal.h"
#include "usart.h"
#include "gpio.h"
#include "BT_Serial.h"
#include "protocol_bt.h"
#include "dht11_Driver.h"

/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
uint8_t p_recBuffer[8] = {0};
uint8_t p_transBuffer[] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'f'};
uint8_t temp, lfeu;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void initialActionPerform(COMFROMSMART sX_rType, PDU_fromSmart *sX_rMessage, PDU *sX_tMessage);
bool messageActionPerform(COMFROMSMART sX_rType, PDU_fromSmart *sX_rMessage, PDU *sX_tMessage);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_ADC1_CLK_ENABLE();
  __HAL_RCC_USART1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  iniBT_Serial();
  dht11_ini(GPIOA, GPIO_PIN_0, TIM1);
  dht11_read(&temp, &lfeu);

  PDU sX_tMessage;
  PDU_fromSmart sX_rMessage;
  COMFROMSMART sX_rType;
  //computeChecksum(&nextMessage);
  uint8_t state = 5;

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

	  switch(state)
	  {
	  case 0:
		  break;
	  case 5: /* - Waiting for new Message - */
		  if(newMessageIsAvailable())
		  {
			  sX_rMessage = *getRecMessage();
			  sX_rType = getRecMessageType();

			  initialActionPerform(sX_rType, &sX_rMessage, &sX_tMessage);
			  state = 6;
		  }
		  break;
	  case 6: /* - Performing Message - */
		  if(messageActionPerform(sX_rType, &sX_rMessage, &sX_tMessage))
		  {
			  //Message replied
			  transmitReply(&sX_tMessage);
			  state = 5;
		  }
		  break;
	  }
  }

	  //Sende Byte per USART 1
	  //HAL_UART_Receive(&huart1, &rec, 2, 0xFFFF);
	  //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
	  //HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg),0xFFFF);


  /* USER CODE END 3 */

}

void initialActionPerform(COMFROMSMART sX_rType, PDU_fromSmart *sX_rMessage, PDU *sX_tMessage)
{
	switch(sX_rType) //Initial Action
	{
	case COMFROMSMART_MANUAL_CONTROL:
		//COMREC_MAN_REPLY is required
		sX_tMessage->PDU_s.startbyte = STARTBYTE_COMMAND;
		sX_tMessage->PDU_s.command = COMREC_MAN_REPLY;

		//Start Pump adjustment Here

		break;
	case COMFROMSMART_READ_SENSORY:
		//Data Reply is required
		sX_tMessage->PDU_s.startbyte = STARTBYTE_DATA;

		//Add timestemp
		sX_tMessage->PDU_s.command = 1;
		sX_tMessage->PDU_s.value2 = 2;
		sX_tMessage->PDU_s.value3 = 3;
		sX_tMessage->PDU_s.value4 = 4;

		sX_tMessage->PDU_s.value5 = 0x00;
		sX_tMessage->PDU_s.value6 = 0x00;
		sX_tMessage->PDU_s.value7 = 0x00;
		sX_tMessage->PDU_s.value8 = 0x00;
		sX_tMessage->PDU_s.value9 = 0x00;

		if(sX_rMessage->PDU_fromSmart_s.value2 == 0x01)
		{
		  //Read light

		}
		if(sX_rMessage->PDU_fromSmart_s.value3 == 0x01)
		{
		  //Read bat

		}
		if(sX_rMessage->PDU_fromSmart_s.value4 == 0x01)
		{
			dht11_read(&temp, &lfeu);
		}
		if(sX_rMessage->PDU_fromSmart_s.value5 == 0x01)
		{
		  //Read efeu

		}
		if(sX_rMessage->PDU_fromSmart_s.value6 == 0x01)
		{
		  //see value04

		}
		break;
	case COMFROMSMART_AVAILABILITY_REQUEST:
		//Data Reply is required
		sX_tMessage->PDU_s.startbyte = STARTBYTE_COMMAND;

		//Add timestemp
		sX_tMessage->PDU_s.command = COMREC_AVAILIBILITY;
		sX_tMessage->PDU_s.value2 = 0x11;
		sX_tMessage->PDU_s.value3 = 0;
		sX_tMessage->PDU_s.value4 = 0;
		sX_tMessage->PDU_s.value5 = 0x00;
		sX_tMessage->PDU_s.value6 = 0x00;
		sX_tMessage->PDU_s.value7 = 0x00;
		sX_tMessage->PDU_s.value8 = 0x00;
		sX_tMessage->PDU_s.value9 = 0x00;
		break;
	default:
		break;
	}
}

bool messageActionPerform(COMFROMSMART sX_rType, PDU_fromSmart *sX_rMessage, PDU *sX_tMessage)
{
	switch(sX_rType) //Initial Action
		{
		case COMFROMSMART_MANUAL_CONTROL:

			//FakePump Adjustment
			sX_tMessage->PDU_s.value2 = 0x02;
			sX_tMessage->PDU_s.value3 = 0x02;
			sX_tMessage->PDU_s.value4 = 0x02;
			sX_tMessage->PDU_s.value5 = 0x02;
			sX_tMessage->PDU_s.value6 = 0x02;
			sX_tMessage->PDU_s.value7 = 0x02;
			sX_tMessage->PDU_s.value8 = 0x02;
			sX_tMessage->PDU_s.value9 = 0x02;

			break;
		case COMFROMSMART_READ_SENSORY:

			if(sX_rMessage->PDU_fromSmart_s.value2 == 0x01 && sX_tMessage->PDU_s.value5 == 0x00)
			{
			  //Read light
				sX_tMessage->PDU_s.value5 = 0x50;
			}
			if(sX_rMessage->PDU_fromSmart_s.value3 == 0x01 && sX_tMessage->PDU_s.value5 == 0x00)
			{
			  //Read bat
				sX_tMessage->PDU_s.value5 = 0x05;
			}
			if(sX_rMessage->PDU_fromSmart_s.value4 == 0x01 && sX_tMessage->PDU_s.value6 == 0x00)
			{
			  //Read temperature
				sX_tMessage->PDU_s.value6 = temp;
			}
			if(sX_rMessage->PDU_fromSmart_s.value5 == 0x01 && sX_tMessage->PDU_s.value7 == 0x00)
			{
			  //Read efeu
				sX_tMessage->PDU_s.value7 = 7;
			}
			if(sX_rMessage->PDU_fromSmart_s.value6 == 0x01 && sX_tMessage->PDU_s.value8 == 0x00)
			{
			  //Read lfeu
				sX_tMessage->PDU_s.value8 = lfeu;
			}
			break;
		case COMFROMSMART_AVAILABILITY_REQUEST:
			//Nothing to do
			break;
		default:
			break;
		}
	return true;
}
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
